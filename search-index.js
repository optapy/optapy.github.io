antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,31.567,1,45.938]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1-2",[2,24.232,3,30.251,4,23.179,5,34.629]],["name/1-2",[]],["text/1-2",[]],["component/1-2",[]],["title/1-3",[4,23.179,5,34.629,6,26.298,7,43.027]],["name/1-3",[]],["text/1-3",[]],["component/1-3",[]],["title/1-4",[7,43.027,8,33.577,9,43.027,10,32.63]],["name/1-4",[]],["text/1-4",[]],["component/1-4",[]],["title/1-5",[11,30.646,12,36.67,13,45.682]],["name/1-5",[]],["text/1-5",[]],["component/1-5",[]],["title/1-6",[14,44.418,15,65.475]],["name/1-6",[]],["text/1-6",[]],["component/1-6",[]],["title/1-7",[16,38.918,17,41.771,18,45.682]],["name/1-7",[]],["text/1-7",[]],["component/1-7",[]],["title/1-8",[19,52.139,20,40.749]],["name/1-8",[]],["text/1-8",[]],["component/1-8",[]],["title/1-9",[21,52.139,22,59.274]],["name/1-9",[]],["text/1-9",[]],["component/1-9",[]],["title/1-10",[23,48.355,24,43.548,25,35.703]],["name/1-10",[]],["text/1-10",[]],["component/1-10",[]],["title/1-11",[25,31.769,26,51.046,27,31.769,28,40.649]],["name/1-11",[]],["text/1-11",[]],["component/1-11",[]],["title/1-12",[25,40.749,29,44.418]],["name/1-12",[]],["text/1-12",[]],["component/1-12",[]],["title/1-13",[25,40.749,30,59.274]],["name/1-13",[]],["text/1-13",[]],["component/1-13",[]],["title/1-14",[25,40.749,31,47.675]],["name/1-14",[]],["text/1-14",[]],["component/1-14",[]],["title/1-15",[25,40.749,32,49.703]],["name/1-15",[]],["text/1-15",[]],["component/1-15",[]],["title/1-16",[25,35.703,33,51.934,34,51.934]],["name/1-16",[]],["text/1-16",[]],["component/1-16",[]],["title/1-17",[25,31.769,35,46.211,36,46.211,37,46.211]],["name/1-17",[]],["text/1-17",[]],["component/1-17",[]],["title/1-18",[25,35.703,38,57.367,39,43.548]],["name/1-18",[]],["text/1-18",[]],["component/1-18",[]],["title/1-19",[25,35.703,40,57.367,41,48.355]],["name/1-19",[]],["text/1-19",[]],["component/1-19",[]],["title/1-20",[39,43.548,42,48.355,43,51.934]],["name/1-20",[]],["text/1-20",[]],["component/1-20",[]],["title/1-21",[44,51.934,45,37.735,46,48.355]],["name/1-21",[]],["text/1-21",[]],["component/1-21",[]],["title/1-22",[45,33.577,47,51.046,48,33.577,49,31.769]],["name/1-22",[]],["text/1-22",[]],["component/1-22",[]],["title/1-23",[46,35.257,50,41.828,51,28.376,52,33.308,53,21.179,54,35.257]],["name/1-23",[]],["text/1-23",[]],["component/1-23",[]],["title/1-24",[55,59.274,56,59.274]],["name/1-24",[]],["text/1-24",[]],["component/1-24",[]],["title/1",[4,23.179,5,34.629,57,19.854,58,24.232]],["name/1",[4,0.256,5,0.383]],["text/1",[0,1.312,2,0.73,3,1.764,4,3.829,5,5.122,6,0.614,7,3.261,9,1.004,10,0.272,11,1.157,12,3.142,13,3.661,17,1.786,18,1.953,20,1.853,22,3.848,24,3.362,25,4.229,27,1.348,28,0.949,29,2.485,30,0.385,31,1.577,32,1.644,33,0.744,34,0.744,35,0.744,36,0.744,37,0.744,39,1.644,41,0.359,43,1.392,45,2.674,46,5.104,48,0.28,49,3.151,51,0.558,52,2.371,53,3.594,54,2.509,56,0.385,57,1.912,58,1.028,59,0.385,60,0.599,61,1.043,62,0.359,63,0.983,64,0.599,65,0.339,66,0.905,67,0.339,68,1.725,69,0.385,70,0.744,71,0.323,72,1.192,73,0.822,74,1.224,75,3.081,76,1.103,77,0.624,78,4.248,79,0.426,80,1.192,81,5.336,82,0.577,83,4.929,84,0.426,85,2.452,86,1.569,87,4.585,88,0.265,89,0.385,90,0.289,91,0.9,92,1.028,93,0.784,94,0.911,95,0.744,96,0.299,97,0.599,98,0.385,99,1.192,100,2.168,101,1.355,102,1.469,103,1.079,104,0.426,105,1.421,106,0.323,107,0.339,108,0.558,109,0.385,110,3.095,111,2.293,112,0.655,113,1.613,114,0.599,115,1.224,116,5.191,117,1.537,118,2.977,119,1.685,120,0.426,121,0.706,122,2.722,123,0.339,124,2.28,125,0.911,126,0.87,127,0.872,128,0.534,129,0.525,130,1.91,131,1.907,132,1.791,133,4.984,134,0.525,135,0.265,136,0.385,137,3.802,138,1.569,139,1.685,140,4.675,141,1.103,142,0.525,143,0.227,144,0.272,145,0.299,146,0.744,147,1.079,148,0.385,149,0.784,150,0.31,151,1.13,152,1.907,153,2.295,154,0.339,155,1.055,156,0.272,157,0.359,158,1.384,159,0.558,160,1.569,161,0.778,162,0.426,163,0.822,164,0.426,165,1.224,166,1.907,167,0.426,168,1.011,169,1.384,170,1.314,171,0.216,172,0.17,173,0.385,174,0.385,175,0.983,176,0.836,177,0.655,178,0.299,179,0.742,180,1.862,181,0.822,182,0.836,183,1.192,184,0.426,185,0.822,186,0.426,187,1.192,188,0.426,189,1.192,190,0.426,191,0.426,192,0.426,193,0.359,194,0.265,195,0.426,196,2.977,197,0.426,198,0.525,199,0.891,200,0.426,201,0.272,202,0.289,203,0.426,204,0.426,205,0.949,206,0.426,207,0.836,208,0.558,209,0.426,210,0.624,211,0.822,212,0.426,213,0.359,214,0.577,215,0.359,216,0.933,217,0.426,218,0.426,219,1.537,220,0.426,221,0.426,222,0.426,223,0.426,224,0.426,225,0.426,226,1.192,227,0.744,228,0.227,229,2.443,230,1.224,231,0.272,232,0.525,233,0.241,234,1.011,235,0.693,236,0.272,237,0.499,238,1.537,239,0.476,240,0.28,241,0.426,242,0.426,243,0.28,244,0.742,245,0.426,246,0.202,247,0.385,248,3.227,249,1.284,250,0.905,251,0.693,252,0.426,253,0.426,254,0.426,255,0.426,256,0.693,257,0.426,258,1.192,259,0.31,260,0.541,261,0.385,262,0.359,263,0.385,264,0.323,265,0.426,266,0.323,267,0.323,268,0.258,269,1.425,270,0.299,271,0.426,272,0.426,273,0.339,274,0.426,275,0.599,276,0.299,277,0.385,278,0.31,279,0.359,280,0.784,281,0.384,282,0.742,283,1.079,284,0.28,285,0.512,286,0.359,287,0.655,288,0.655,289,0.476,290,1.745,291,1.355,292,0.323,293,0.426,294,0.396,295,0.299,296,0.624,297,0.339,298,1.119,299,0.359,300,0.693,301,0.624,302,0.426,303,0.359,304,1.862,305,2.464,306,0.426,307,0.822,308,0.289,309,0.566,310,1.19,311,0.558,312,0.359,313,1.228,314,0.426,315,0.299,316,0.385,317,0.949,318,0.655,319,0.599,320,0.822,321,1.613,322,0.359,323,0.385,324,0.339,325,4.012,326,0.426,327,1.13,328,0.323,329,0.426,330,0.744,331,0.655,332,0.299,333,0.385,334,1.685,335,0.808,336,0.299,337,0.385,338,0.426,339,0.426,340,0.426,341,0.693,342,0.385,343,0.868,344,0.426,345,1.192,346,0.822,347,0.822,348,0.822,349,0.822,350,0.808,351,0.624,352,0.744,353,2.913,354,0.426,355,0.822,356,1.224,357,0.426,358,0.426,359,0.426,360,0.541,361,0.385,362,1.004,363,0.836,364,0.577,365,0.31,366,0.359,367,1.314,368,0.299,369,0.933,370,0.339,371,0.525,372,1.079,373,0.512,374,0.426,375,0.426,376,0.426,377,2.22,378,0.258,379,1.613,380,1.296,381,0.693,382,1.725,383,1.847,384,1.263,385,0.31,386,0.359,387,0.744,388,0.426,389,0.426,390,0.426,391,0.426,392,1.355,393,0.426,394,0.742,395,0.744,396,0.289,397,0.289,398,0.385,399,0.476,400,0.808,401,0.762,402,0.426,403,0.258,404,0.693,405,0.359,406,1.079,407,0.426,408,0.426,409,0.426,410,0.624,411,0.808,412,0.476,413,0.385,414,0.385,415,1.192,416,4.012,417,1.807,418,1.482,419,1.192,420,0.624,421,0.385,422,0.359,423,1.52,424,0.426,425,0.822,426,2.722,427,2.913,428,0.822,429,1.537,430,2.166,431,0.822,432,0.822,433,0.359,434,0.426,435,0.339,436,0.339,437,0.323,438,0.744,439,0.744,440,1.862,441,0.624,442,0.31,443,1.296,444,0.426,445,0.385,446,0.655,447,0.426,448,0.822,449,0.426,450,0.426,451,0.426,452,1.862,453,0.426,454,0.426,455,0.426,456,0.744,457,0.323,458,0.426,459,0.28,460,0.426,461,0.426,462,0.822,463,0.339,464,0.323,465,0.558,466,0.426,467,0.426,468,0.426,469,0.744,470,0.822,471,0.426,472,0.426,473,0.426,474,0.822,475,0.655,476,0.744,477,0.385,478,0.822,479,0.822,480,0.339,481,0.339,482,0.599,483,0.525,484,0.426,485,1.192,486,0.426,487,0.426,488,0.426,489,0.655,490,0.299,491,0.426,492,0.426,493,0.426,494,0.323,495,0.323,496,0.822,497,0.426,498,0.426,499,0.426,500,0.706,501,0.822,502,0.426,503,0.359,504,0.822,505,0.426,506,0.289,507,0.359,508,0.28,509,0.272,510,0.744,511,0.599,512,0.385,513,0.822,514,0.385,515,0.525,516,0.624,517,0.822,518,0.426,519,0.426,520,0.426,521,0.426,522,0.744,523,0.272,524,0.905,525,0.31,526,0.359,527,0.385,528,1.192,529,0.385,530,0.426,531,0.426,532,0.426,533,0.426,534,0.822,535,0.323,536,0.247,537,0.323,538,0.525,539,0.426,540,0.385,541,0.339,542,0.359,543,0.426,544,0.426,545,0.426,546,0.822,547,0.426,548,0.426,549,0.624,550,0.822,551,0.426,552,0.426,553,0.426,554,0.31,555,0.426,556,0.426,557,0.426,558,0.426,559,0.289,560,0.299,561,0.624,562,0.558,563,0.241,564,0.289,565,0.822,566,0.822,567,0.822,568,0.822,569,0.499,570,1.685,571,0.299,572,0.949,573,0.359,574,0.655,575,0.431,576,0.655,577,0.272,578,1.004,579,0.265,580,0.744,581,0.426,582,0.299,583,0.272,584,0.655,585,0.289,586,0.426,587,0.426,588,0.426,589,0.385,590,0.426,591,0.359,592,0.385,593,0.426,594,0.323,595,0.247,596,0.744,597,0.822,598,0.359,599,0.426,600,0.426,601,0.323,602,0.323,603,0.426,604,0.426,605,0.426,606,1.224,607,0.426,608,0.426,609,1.192,610,0.323,611,0.426,612,0.426,613,0.426,614,0.426]],["component/1",[615,0.32]],["title/2-1",[0,31.567,616,38.802]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[2,27.233,155,32.528,617,33.997]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2-3",[294,27.658,618,40.249,619,22.578]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["title/2-4",[172,26.081,620,45.938]],["name/2-4",[]],["text/2-4",[]],["component/2-4",[]],["title/2-5",[6,26.298,155,28.944,194,31.769,617,30.251]],["name/2-5",[]],["text/2-5",[]],["component/2-5",[]],["title/2-6",[8,37.735,294,27.658,619,22.578]],["name/2-6",[]],["text/2-6",[]],["component/2-6",[]],["title/2-7",[172,26.081,621,44.418]],["name/2-7",[]],["text/2-7",[]],["component/2-7",[]],["title/2-8",[11,30.646,617,33.997,622,45.682]],["name/2-8",[]],["text/2-8",[]],["component/2-8",[]],["title/2-9",[14,38.918,294,27.658,619,22.578]],["name/2-9",[]],["text/2-9",[]],["component/2-9",[]],["title/2-10",[16,44.418,172,26.081]],["name/2-10",[]],["text/2-10",[]],["component/2-10",[]],["title/2-11",[194,31.769,228,27.269,617,30.251,622,40.649]],["name/2-11",[]],["text/2-11",[]],["component/2-11",[]],["title/2-12",[294,27.658,619,22.578,623,41.771]],["name/2-12",[]],["text/2-12",[]],["component/2-12",[]],["title/2-13",[172,26.081,624,49.703]],["name/2-13",[]],["text/2-13",[]],["component/2-13",[]],["title/2-14",[617,33.997,625,40.249,626,45.682]],["name/2-14",[]],["text/2-14",[]],["component/2-14",[]],["title/2-15",[294,27.658,619,22.578,627,48.355]],["name/2-15",[]],["text/2-15",[]],["component/2-15",[]],["title/2-16",[172,26.081,628,55.19]],["name/2-16",[]],["text/2-16",[]],["component/2-16",[]],["title/2-17",[194,31.769,617,30.251,626,40.649,629,35.814]],["name/2-17",[]],["text/2-17",[]],["component/2-17",[]],["title/2-18",[294,27.658,619,22.578,630,51.934]],["name/2-18",[]],["text/2-18",[]],["component/2-18",[]],["title/2-19",[172,26.081,631,59.274]],["name/2-19",[]],["text/2-19",[]],["component/2-19",[]],["title/2-20",[128,22.853,632,37.168,633,38.749,634,38.749]],["name/2-20",[]],["text/2-20",[]],["component/2-20",[]],["title/2-21",[294,27.658,619,22.578,635,51.934]],["name/2-21",[]],["text/2-21",[]],["component/2-21",[]],["title/2-22",[172,26.081,636,59.274]],["name/2-22",[]],["text/2-22",[]],["component/2-22",[]],["title/2-23",[125,30.251,128,22.853,399,29.575,637,46.211]],["name/2-23",[]],["text/2-23",[]],["component/2-23",[]],["title/2-24",[313,28.944,638,46.211,639,37.168,640,38.749]],["name/2-24",[]],["text/2-24",[]],["component/2-24",[]],["title/2-25",[290,25.847,633,38.749,634,38.749,641,38.749]],["name/2-25",[]],["text/2-25",[]],["component/2-25",[]],["title/2-26",[294,27.658,619,22.578,642,48.355]],["name/2-26",[]],["text/2-26",[]],["component/2-26",[]],["title/2-27",[172,26.081,643,55.19]],["name/2-27",[]],["text/2-27",[]],["component/2-27",[]],["title/2-28",[644,37.735,645,48.355,646,43.548]],["name/2-28",[]],["text/2-28",[]],["component/2-28",[]],["title/2-29",[294,27.658,619,22.578,647,57.367]],["name/2-29",[]],["text/2-29",[]],["component/2-29",[]],["title/2-30",[172,26.081,648,65.475]],["name/2-30",[]],["text/2-30",[]],["component/2-30",[]],["title/2-31",[646,43.548,649,45.682,650,48.355]],["name/2-31",[]],["text/2-31",[]],["component/2-31",[]],["title/2-32",[294,27.658,619,22.578,651,57.367]],["name/2-32",[]],["text/2-32",[]],["component/2-32",[]],["title/2-33",[172,26.081,652,65.475]],["name/2-33",[]],["text/2-33",[]],["component/2-33",[]],["title/2-34",[633,43.548,653,40.249,654,43.548]],["name/2-34",[]],["text/2-34",[]],["component/2-34",[]],["title/2-35",[294,27.658,619,22.578,655,57.367]],["name/2-35",[]],["text/2-35",[]],["component/2-35",[]],["title/2-36",[172,26.081,656,65.475]],["name/2-36",[]],["text/2-36",[]],["component/2-36",[]],["title/2-37",[88,31.769,657,46.211,658,29.575,659,28.944]],["name/2-37",[]],["text/2-37",[]],["component/2-37",[]],["title/2-38",[660,51.934,661,45.682,662,51.934]],["name/2-38",[]],["text/2-38",[]],["component/2-38",[]],["title/2-39",[88,23.876,91,12.68,92,18.212,399,22.227,658,22.227,659,21.753,663,34.731]],["name/2-39",[]],["text/2-39",[]],["component/2-39",[]],["title/2-40",[88,28.616,658,26.639,659,26.071,664,45.98,665,32.259]],["name/2-40",[]],["text/2-40",[]],["component/2-40",[]],["title/2",[658,37.935,659,37.125]],["name/2",[658,0.327,659,0.32]],["text/2",[0,1.153,2,0.334,3,0.417,4,0.604,6,0.973,12,0.45,20,0.828,27,3.328,51,0.902,53,1.211,57,1.786,60,0.968,76,0.417,77,1.009,81,3.032,82,0.494,88,4.52,89,0.638,90,0.902,91,3.08,92,2.83,93,1.872,94,1.119,98,0.638,101,0.513,107,0.561,110,1.888,111,1.119,113,0.463,121,3.419,125,1.687,128,4.296,129,0.45,131,1.119,135,0.438,141,0.417,143,0.376,144,0.45,151,1.727,152,0.788,155,4.18,156,1.819,166,2.359,170,2.416,172,3.161,179,0.438,182,1.678,194,3.591,199,3.098,208,0.902,216,0.427,231,0.85,233,1.356,234,4.256,237,0.427,239,1.386,240,0.463,244,3.822,246,2.739,249,1.687,264,1.815,281,1.861,282,1.175,283,1.204,284,0.875,285,0.438,289,1.888,290,4.172,295,0.494,308,1.281,309,2.427,310,1.207,313,0.399,319,3.894,321,3.363,327,1.146,332,1.325,360,1.573,362,2.399,363,1.997,367,1.978,369,0.427,371,1.207,378,1.146,379,0.788,394,1.771,396,0.902,399,1.094,401,0.85,403,3.103,412,2.106,417,0.807,423,0.933,436,0.561,442,0.513,465,1.281,489,0.561,490,3.752,494,0.535,506,0.478,509,3.688,515,0.45,523,0.45,536,1.094,537,0.535,538,0.85,559,0.902,561,0.535,562,0.478,563,1.848,569,0.427,575,0.697,577,0.45,579,0.828,583,0.85,594,1.009,595,0.408,601,1.009,606,0.561,617,4.431,619,1.913,622,2.895,626,1.904,632,0.513,633,3.691,634,4.059,639,1.741,640,0.535,645,2.399,646,2.76,650,1.592,654,1.434,658,4.07,659,3.983,661,2.266,662,0.638,665,0.933,666,0.594,667,0.463,668,0.704,669,0.561,670,0.594,671,1.281,672,0.513,673,0.968,674,0.594,675,1.504,676,1.978,677,2.935,678,0.45,679,1.889,680,2.857,681,0.968,682,1.121,683,1.931,684,0.494,685,1.741,686,0.463,687,0.494,688,3.613,689,0.513,690,1.059,691,0.704,692,0.704,693,1.33,694,3.926,695,2.466,696,0.968,697,1.573,698,0.704,699,3.022,700,3.026,701,2.747,702,2.576,703,0.704,704,1.889,705,0.638,706,4.432,707,2.165,708,1.33,709,2.061,710,1.33,711,0.478,712,1.33,713,1.33,714,1.33,715,1.375,716,1.504,717,1.33,718,2.165,719,2.165,720,2.165,721,1.204,722,2.399,723,0.594,724,0.463,725,1.204,726,2.399,727,1.375,728,1.204,729,0.638,730,3.198,731,0.704,732,0.478,733,0.535,734,1.434,735,0.902,736,0.594,737,0.638,738,0.594,739,2.76,740,0.638,741,0.704,742,0.704,743,2.016,744,2.399,745,1.889,746,1.592,747,0.902,748,0.561,749,0.535,750,0.704,751,0.513,752,0.704,753,1.33,754,1.889,755,1.815,756,0.638,757,0.638,758,0.704,759,1.33,760,0.594,761,1.33,762,0.638,763,0.638,764,0.45,765,1.678,766,1.33,767,0.594,768,0.704,769,0.933,770,0.535,771,1.121,772,0.77,773,0.94,774,0.638,775,0.638,776,0.594,777,0.704,778,0.561,779,0.438,780,0.704,781,0.535,782,0.438,783,1.434,784,0.638,785,0.561,786,0.638,787,0.594,788,0.594,789,0.494,790,0.478,791,0.478,792,0.638,793,0.561,794,0.968,795,3.291,796,0.535,797,0.704,798,0.85,799,1.242,800,0.513,801,0.704,802,0.408,803,0.561,804,0.561,805,0.561,806,0.513,807,1.325,808,0.594,809,0.594]],["component/2",[615,0.32]],["title/3-1",[0,24.611,1,35.814,48,33.577,810,32.63]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[2,24.232,235,43.027,700,31.769,811,33.577]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[6,23.688,91,15.197,121,27.249,128,20.585,309,21.827]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3-4",[8,25.235,121,22.736,669,30.55,810,24.523,812,46.172,813,29.122]],["name/3-4",[]],["text/3-4",[]],["component/3-4",[]],["title/3-5",[121,24.788,237,25.385,621,28.376,810,26.737,814,55.995]],["name/3-5",[]],["text/3-5",[]],["component/3-5",[]],["title/3-6",[121,18.211,236,31.205,237,18.65,309,23.174,378,18.65,810,19.643,815,24.47,816,21.56]],["name/3-6",[]],["text/3-6",[]],["component/3-6",[]],["title/3-7",[144,26.737,236,26.737,309,19.856,378,25.385,817,35.257,818,37.867]],["name/3-7",[]],["text/3-7",[]],["component/3-7",[]],["title/3-8",[144,22.648,236,22.648,309,16.819,378,21.502,716,28.213,782,22.05,819,32.074,820,29.864]],["name/3-8",[]],["text/3-8",[]],["component/3-8",[]],["title/3-9",[121,18.211,309,23.174,321,20.213,794,22.375,810,19.643,821,25.902,822,44.194,823,30.73]],["name/3-9",[]],["text/3-9",[]],["component/3-9",[]],["title/3-10",[11,27.269,810,32.63,824,33.577,825,43.027]],["name/3-10",[]],["text/3-10",[]],["component/3-10",[]],["title/3",[48,43.068,810,41.853]],["name/3",[48,0.371,810,0.361]],["text/3",[0,1.208,2,0.286,3,1.485,4,0.95,12,0.385,17,0.439,27,0.375,48,1.648,51,0.409,52,0.48,53,3.03,57,0.639,58,1.689,63,0.385,76,0.68,81,1.421,83,2.707,86,0.508,91,2.871,92,3.33,93,0.397,94,1.24,96,0.423,105,0.349,110,4.483,111,3.351,121,2.751,124,1.303,125,2.886,126,2.056,128,2.987,130,4.921,131,2.287,134,0.734,135,0.375,137,1.05,141,2.287,142,2.068,143,1.339,144,0.734,145,0.423,146,0.546,147,0.546,149,0.397,151,0.366,152,3.451,154,0.48,155,1.421,156,2.274,158,0.734,159,0.779,161,1.06,165,0.755,166,3.803,169,2.811,170,0.697,171,0.581,175,0.734,176,0.423,178,0.423,179,1.559,182,0.423,194,0.375,198,0.385,199,0.665,201,0.385,205,1.308,215,0.508,216,0.366,228,0.322,231,1.05,233,2.494,235,0.508,236,2.068,237,4.257,240,0.397,243,0.397,248,0.458,249,0.68,250,1.247,251,0.508,260,0.755,263,0.546,268,1.27,275,0.439,280,1.377,281,1.349,282,1.795,285,0.714,290,1.06,292,1.589,297,0.914,309,4.243,310,0.385,311,0.409,313,1.187,315,0.805,316,1.039,321,1.648,327,0.997,328,4.42,331,1.308,332,0.805,333,0.546,336,0.423,337,1.039,343,1.824,350,1.42,352,0.546,360,0.755,365,0.439,367,0.366,369,1.963,370,1.667,371,0.385,373,1.022,378,0.697,379,2.606,381,2.727,383,2.617,384,0.409,392,0.439,394,1.795,395,1.039,396,1.42,397,0.779,398,1.039,399,0.951,403,0.366,406,0.423,410,0.458,411,0.409,412,1.213,417,0.697,420,0.458,435,1.667,441,0.458,442,0.836,443,1.384,452,1.589,459,0.397,464,0.871,465,1.7,481,0.914,483,1.05,500,0.973,508,0.397,511,0.836,515,0.385,523,1.05,525,0.439,535,0.458,536,1.671,537,0.458,554,1.196,559,0.779,563,2.018,571,0.805,575,0.602,576,0.48,577,1.05,579,0.714,583,0.734,584,0.48,585,0.779,595,0.349,596,0.546,606,0.914,610,1.247,617,0.357,632,0.439,641,0.458,644,0.397,654,0.458,667,0.397,674,1.764,675,1.667,676,1.521,678,0.734,680,0.714,681,0.836,686,1.08,687,1.468,689,0.836,694,0.734,696,0.439,700,2.575,709,0.651,724,0.755,732,0.409,748,0.48,755,0.458,757,0.546,764,1.338,765,2.024,767,0.508,771,0.508,773,0.818,776,0.508,778,0.48,779,0.714,782,0.375,788,0.508,790,1.114,791,2.617,793,0.914,794,0.836,796,1.247,798,0.385,799,0.397,802,0.349,806,1.196,807,0.423,810,3.378,811,0.397,812,3.502,813,1.589,814,1.487,816,1.468,818,0.546,820,0.967,822,2.928,824,0.755,825,0.967,826,0.603,827,2.19,828,1.148,829,0.967,830,0.603,831,0.603,832,1.487,833,0.603,834,0.603,835,1.148,836,1.308,837,5.417,838,0.603,839,0.603,840,2.576,841,0.603,842,0.603,843,1.995,844,1.148,845,1.895,846,2.297,847,1.039,848,0.439,849,1.902,850,0.836,851,2.414,852,0.603,853,0.603,854,0.546,855,0.458,856,0.508,857,1.468,858,2.612,859,0.397,860,0.508,861,1.247,862,0.603,863,0.423,864,1.764,865,0.508,866,1.524,867,0.836,868,0.603,869,1.114,870,0.397,871,1.08,872,0.836,873,0.546,874,0.603,875,0.967,876,0.508,877,0.546,878,0.603,879,1.384,880,0.439,881,0.439,882,0.836,883,0.603,884,0.409,885,0.546,886,0.805,887,2.355,888,1.824,889,1.148,890,0.967,891,1.642,892,3.878,893,1.487,894,0.603,895,2.093,896,0.546,897,1.148,898,1.148,899,0.603,900,0.603,901,0.423,902,0.508,903,0.967,904,3.252,905,0.546,906,5.409,907,0.48,908,1.589,909,0.603,910,1.148,911,0.603,912,0.508,913,0.603,914,0.603,915,0.603,916,0.508,917,1.148,918,1.384,919,0.603,920,0.458,921,0.967,922,0.48,923,0.508,924,0.603,925,0.603,926,2.093,927,2.297,928,3.858,929,0.914,930,0.603,931,0.546,932,1.487,933,1.642,934,5.294,935,0.546,936,0.967,937,1.468,938,1.642,939,2.297,940,1.895,941,0.967,942,0.603,943,0.603,944,0.603,945,0.603,946,2.432,947,0.603,948,0.603,949,0.546,950,1.148,951,0.48,952,0.546,953,0.836,954,0.48,955,0.603,956,0.603,957,1.148,958,1.468,959,1.642,960,0.603,961,0.603,962,1.08,963,0.603,964,0.603,965,0.603,966,2.833,967,0.48,968,1.148,969,0.546,970,0.508,971,0.458,972,0.967,973,0.508,974,0.603,975,0.439,976,0.603,977,0.48,978,0.423,979,0.914,980,0.603,981,1.642,982,0.603,983,1.642,984,0.458,985,0.603,986,0.603,987,0.439,988,0.458,989,0.603,990,0.836,991,0.508,992,1.148,993,0.967,994,0.871,995,2.19,996,0.48,997,1.148,998,0.603,999,0.603,1000,0.871,1001,0.439,1002,0.546,1003,1.039,1004,0.603,1005,0.603,1006,0.546,1007,0.546,1008,0.603,1009,0.546,1010,1.384,1011,0.48,1012,0.603,1013,0.914,1014,0.546,1015,0.603,1016,0.546,1017,0.603,1018,0.603,1019,0.508,1020,0.48,1021,0.603,1022,0.967,1023,0.603,1024,0.603,1025,0.458,1026,0.603,1027,0.603,1028,0.48,1029,0.409,1030,0.603,1031,0.914,1032,0.967,1033,0.603,1034,0.508,1035,0.914,1036,0.603,1037,0.603,1038,0.546,1039,0.603,1040,0.603,1041,1.148,1042,0.603,1043,0.48,1044,0.409,1045,0.546,1046,0.546,1047,0.508,1048,0.967,1049,0.546,1050,0.603,1051,0.439,1052,0.546,1053,0.603,1054,0.603,1055,0.48,1056,1.148,1057,0.603,1058,0.603,1059,0.546,1060,0.508]],["component/3",[615,0.32]],["title/4-1",[0,31.567,616,38.802]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[2,27.233,1061,43.548,1062,48.355]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[6,29.554,619,22.578,1063,48.355]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4",[619,25.769,1061,49.703]],["name/4",[619,0.222,1061,0.428]],["text/4",[53,3.97,76,4.647,134,3.743,161,3.97,176,4.108,199,4.543,208,3.972,276,4.108,278,4.263,281,2.738,309,3.722,367,3.553,482,4.263,529,5.301,536,3.392,560,4.108,563,4.446,619,4.073,667,3.851,772,3.392,773,2.915,781,4.445,848,5.709,993,4.935,1061,4.445,1063,7.959,1064,7.841,1065,5.301,1066,5.301,1067,4.445,1068,4.935,1069,5.301,1070,5.301,1071,5.855,1072,4.445,1073,5.855,1074,5.855,1075,4.445,1076,4.445,1077,5.301,1078,4.263]],["component/4",[615,0.32]],["title/5-1",[0,31.567,616,38.802]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[2,27.233,582,40.249,1079,45.682]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[294,27.658,618,40.249,619,22.578]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5-4",[172,26.081,620,45.938]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["title/5-5",[6,29.554,1080,48.355,1081,45.682]],["name/5-5",[]],["text/5-5",[]],["component/5-5",[]],["title/5-6",[8,37.735,294,27.658,619,22.578]],["name/5-6",[]],["text/5-6",[]],["component/5-6",[]],["title/5-7",[172,26.081,621,44.418]],["name/5-7",[]],["text/5-7",[]],["component/5-7",[]],["title/5-8",[11,27.269,724,33.577,773,25.417,1082,38.749]],["name/5-8",[]],["text/5-8",[]],["component/5-8",[]],["title/5",[773,32.601,1082,49.703]],["name/5",[773,0.281,1082,0.428]],["text/5",[2,1.325,3,2.22,4,0.718,10,1.011,27,0.984,53,2.612,57,2.68,58,0.751,81,1.583,88,3.544,90,1.073,91,2.544,97,1.152,105,2.171,110,1.617,111,0.937,126,2.113,128,2.309,129,1.011,131,0.937,141,0.937,152,0.937,155,3.488,161,0.801,168,1.04,170,2.274,172,1.492,177,2.223,179,2.332,182,3.171,194,0.984,199,3.564,208,1.073,216,1.694,232,1.011,244,1.737,249,3.057,264,2.844,268,0.96,281,1.305,284,1.836,289,2.619,290,3.115,301,1.201,308,2.542,309,1.779,311,1.073,332,1.11,350,1.073,363,1.11,364,1.11,368,1.11,371,2.395,373,0.984,379,0.937,382,2.223,394,1.737,401,1.784,403,4.181,412,2.989,459,1.836,482,1.152,483,1.011,490,3.996,500,2.22,536,0.916,538,1.784,563,2.124,573,1.333,575,0.83,579,1.737,582,3.619,583,1.011,585,1.073,619,1.099,649,1.26,658,0.916,659,0.897,661,2.223,676,1.694,680,0.984,681,1.152,684,2.629,686,1.836,694,1.011,696,1.152,699,2.119,700,3.544,706,4.535,709,0.897,711,3.066,719,2.527,720,2.527,721,1.432,722,2.353,723,5.186,724,4.306,725,1.432,726,2.353,727,2.728,728,2.527,729,1.432,734,1.201,744,2.353,749,1.201,770,1.201,772,0.916,773,3.58,779,1.737,798,1.784,824,1.04,869,1.073,870,1.836,882,2.728,884,1.073,907,2.983,994,1.201,1014,1.432,1044,1.073,1051,2.033,1078,1.152,1079,4.108,1080,5.186,1081,7.367,1082,3.916,1083,1.333,1084,1.432,1085,1.333,1086,1.582,1087,3.431,1088,2.353,1089,2.983,1090,2.792,1091,3.392,1092,5.159,1093,5.156,1094,2.792,1095,2.119,1096,1.582,1097,5.159,1098,7.77,1099,1.432,1100,1.333,1101,3.392,1102,1.432,1103,6.546,1104,2.033,1105,5.159,1106,1.582,1107,1.432,1108,1.26,1109,3.431,1110,1.582,1111,1.333,1112,1.26,1113,1.582,1114,1.432,1115,2.119,1116,1.582,1117,1.26,1118,1.582,1119,1.333,1120,5.695,1121,1.582,1122,1.04,1123,3.747,1124,1.582,1125,4.52,1126,1.582,1127,4.52,1128,2.527,1129,4.52,1130,2.223,1131,2.792,1132,2.792,1133,1.582,1134,1.333,1135,2.223,1136,2.527,1137,1.432,1138,1.152,1139,1.432,1140,2.033,1141,1.582,1142,1.201,1143,1.582,1144,1.582,1145,1.11,1146,1.582,1147,1.582,1148,1.582,1149,2.527,1150,1.582,1151,1.432,1152,1.582,1153,1.582,1154,1.432,1155,1.333,1156,1.582]],["component/5",[615,0.32]],["title/6-1",[0,31.567,616,38.802]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[2,24.232,772,29.575,773,25.417,1157,51.046]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[618,40.249,730,50.874]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[620,35.814,730,33.577,857,35.814,937,35.814]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[1158,52.139,1159,55.19]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6-6",[1160,55.19,1161,55.19]],["name/6-6",[]],["text/6-6",[]],["component/6-6",[]],["title/6-7",[29,34.629,411,34.629,538,32.63,1162,46.211]],["name/6-7",[]],["text/6-7",[]],["component/6-7",[]],["title/6-8",[313,28.944,639,37.168,640,38.749,1163,46.211]],["name/6-8",[]],["text/6-8",[]],["component/6-8",[]],["title/6-9",[6,21.549,319,30.456,772,24.234,773,20.827,1075,31.752,1076,31.752]],["name/6-9",[]],["text/6-9",[]],["component/6-9",[]],["title/6-10",[8,37.735,294,27.658,619,22.578]],["name/6-10",[]],["text/6-10",[]],["component/6-10",[]],["title/6-11",[621,34.629,772,29.575,1164,43.027,1165,43.027]],["name/6-11",[]],["text/6-11",[]],["component/6-11",[]],["title/6-12",[172,26.081,815,52.139]],["name/6-12",[]],["text/6-12",[]],["component/6-12",[]],["title/6-13",[11,30.646,773,28.564,1166,45.682]],["name/6-13",[]],["text/6-13",[]],["component/6-13",[]],["title/6-14",[14,38.918,294,27.658,619,22.578]],["name/6-14",[]],["text/6-14",[]],["component/6-14",[]],["title/6-15",[16,44.418,172,26.081]],["name/6-15",[]],["text/6-15",[]],["component/6-15",[]],["title/6-16",[228,30.646,1167,43.548,1168,43.548]],["name/6-16",[]],["text/6-16",[]],["component/6-16",[]],["title/6-17",[294,27.658,619,22.578,623,41.771]],["name/6-17",[]],["text/6-17",[]],["component/6-17",[]],["title/6-18",[172,26.081,624,49.703]],["name/6-18",[]],["text/6-18",[]],["component/6-18",[]],["title/6-19",[411,38.918,625,40.249,1169,45.682]],["name/6-19",[]],["text/6-19",[]],["component/6-19",[]],["title/6-20",[294,27.658,619,22.578,627,48.355]],["name/6-20",[]],["text/6-20",[]],["component/6-20",[]],["title/6-21",[172,26.081,628,55.19]],["name/6-21",[]],["text/6-21",[]],["component/6-21",[]],["title/6-22",[629,40.249,1170,43.548,1171,48.355]],["name/6-22",[]],["text/6-22",[]],["component/6-22",[]],["title/6-23",[294,27.658,619,22.578,630,51.934]],["name/6-23",[]],["text/6-23",[]],["component/6-23",[]],["title/6-24",[172,26.081,631,59.274]],["name/6-24",[]],["text/6-24",[]],["component/6-24",[]],["title/6-25",[29,31.192,632,33.479,730,30.244,1075,34.903,1076,34.903]],["name/6-25",[]],["text/6-25",[]],["component/6-25",[]],["title/6-26",[294,27.658,619,22.578,635,51.934]],["name/6-26",[]],["text/6-26",[]],["component/6-26",[]],["title/6-27",[172,26.081,636,59.274]],["name/6-27",[]],["text/6-27",[]],["component/6-27",[]],["title/6-28",[294,27.658,619,22.578,637,51.934]],["name/6-28",[]],["text/6-28",[]],["component/6-28",[]],["title/6-29",[172,26.081,638,59.274]],["name/6-29",[]],["text/6-29",[]],["component/6-29",[]],["title/6-30",[92,24.232,641,38.749,1172,37.168,1173,43.027]],["name/6-30",[]],["text/6-30",[]],["component/6-30",[]],["title/6-31",[294,27.658,619,22.578,642,48.355]],["name/6-31",[]],["text/6-31",[]],["component/6-31",[]],["title/6-32",[172,26.081,643,55.19]],["name/6-32",[]],["text/6-32",[]],["component/6-32",[]],["title/6-33",[53,17.94,233,20.089,239,20.527,644,23.305,733,26.895,735,24.036,1159,29.864,1174,28.213]],["name/6-33",[]],["text/6-33",[]],["component/6-33",[]],["title/6",[772,37.935,773,32.601]],["name/6",[772,0.327,773,0.281]],["text/6",[0,2.637,2,1.51,3,0.275,6,2.743,10,0.825,11,1.072,20,0.289,27,0.804,29,2.158,49,0.289,53,2.905,57,3.441,58,0.613,61,0.606,67,1.598,71,0.352,74,1.323,76,1.559,81,4.45,82,4.645,87,0.289,88,0.289,90,1.361,91,1.135,92,0.789,93,1.093,94,0.529,97,0.65,101,0.65,102,0.876,103,0.809,105,0.269,108,0.315,110,2.126,111,1.189,113,0.305,123,0.711,126,1.488,127,0.263,128,1.178,129,0.297,131,0.985,132,0.588,134,0.571,137,0.571,138,0.753,141,0.275,142,0.571,143,1.072,149,0.305,151,0.542,152,1.559,155,1.804,156,2.034,158,1.283,161,0.841,166,2.034,168,0.588,169,0.825,170,0.542,171,1.016,172,2.336,175,0.825,177,1.598,178,0.326,179,0.804,182,1.166,194,1.45,198,1.283,199,0.518,201,0.297,208,1.785,216,1.414,228,0.477,229,0.678,231,2.489,232,1.283,233,0.507,234,0.588,237,2.363,239,0.748,240,0.588,243,0.305,244,0.804,246,1.63,249,0.529,264,0.678,268,0.784,269,0.588,270,0.326,273,0.37,280,0.305,281,3.05,282,1.98,284,3.078,285,0.556,286,0.391,289,1.163,290,2.079,291,0.338,292,0.352,295,0.326,299,0.753,308,0.315,309,2.382,310,0.825,313,0.942,321,1.32,327,2.492,330,0.42,335,1.58,336,0.627,351,0.352,364,0.906,366,0.753,367,0.542,368,0.906,369,0.784,371,0.825,373,0.804,378,0.282,379,0.529,382,0.37,385,0.338,394,0.556,396,1.127,397,0.315,399,0.963,400,0.315,401,0.825,403,2.227,411,5.207,412,0.748,417,0.542,420,0.352,436,0.37,441,1.261,446,0.37,457,0.352,459,0.305,477,0.42,482,0.338,483,0.297,495,0.678,500,0.985,508,0.588,523,0.571,524,0.678,536,0.518,537,0.352,549,0.352,554,0.65,560,0.326,561,0.352,563,0.942,564,0.315,569,0.282,575,0.243,576,0.37,577,0.297,579,0.556,583,0.571,595,1.163,619,0.917,625,1.408,629,1.846,639,4.442,640,0.98,641,0.352,644,0.305,653,0.627,658,0.963,659,1.321,666,0.391,667,1.093,671,0.315,672,0.338,675,0.711,676,0.542,677,1.489,680,3.571,683,1.785,684,0.906,685,0.338,686,3.857,687,4.199,688,5.254,689,0.338,690,0.37,694,1.489,695,0.606,697,0.588,701,0.391,709,1.321,711,0.876,716,0.37,724,0.305,727,2.99,730,5.711,733,0.352,734,1.261,735,0.876,739,0.352,746,0.391,747,0.606,751,0.338,765,0.326,769,1.166,772,3.085,773,3.472,776,0.391,779,0.289,781,0.352,782,1.45,789,0.326,793,0.37,796,0.352,798,0.297,799,1.093,802,0.748,803,0.37,813,0.678,829,0.391,836,0.711,846,0.37,849,0.352,850,0.94,855,0.352,857,0.906,859,1.917,870,2.093,871,0.305,875,0.391,880,0.338,882,1.21,884,0.876,912,1.088,922,0.37,937,2.232,940,0.42,952,0.42,953,0.338,958,0.326,962,1.532,975,1.461,978,0.326,988,0.678,1029,0.606,1035,0.37,1043,0.711,1055,1.028,1065,0.42,1070,0.809,1075,3.117,1076,3.117,1078,0.65,1083,0.753,1087,0.352,1089,0.711,1093,0.42,1095,0.352,1099,0.42,1104,1.21,1108,1.323,1115,1.997,1119,0.753,1122,2.701,1138,2.122,1140,1.696,1145,0.326,1159,3.093,1161,1.691,1164,1.4,1165,1.088,1166,6.336,1167,2.606,1168,2.606,1169,3.101,1170,1.261,1171,1.4,1172,0.94,1173,1.088,1174,0.37,1175,2.109,1176,0.42,1177,0.42,1178,0.37,1179,0.352,1180,1.504,1181,1.504,1182,2.321,1183,1.817,1184,0.42,1185,0.42,1186,1.088,1187,0.42,1188,0.42,1189,0.464,1190,0.464,1191,0.464,1192,0.464,1193,0.42,1194,0.391,1195,1.323,1196,1.997,1197,0.464,1198,0.42,1199,1.817,1200,0.65,1201,0.711,1202,1.028,1203,2.045,1204,0.711,1205,0.809,1206,1.4,1207,1.504,1208,1.504,1209,0.893,1210,0.893,1211,0.98,1212,0.893,1213,0.391,1214,0.42,1215,0.464,1216,0.464,1217,0.42,1218,0.391,1219,0.464,1220,0.464,1221,0.464,1222,0.464,1223,0.464,1224,0.464,1225,0.809,1226,0.338,1227,0.338,1228,0.391,1229,0.711,1230,2.457,1231,0.42,1232,0.42,1233,0.42,1234,0.391,1235,0.37,1236,0.326,1237,0.42,1238,0.42,1239,0.338,1240,1.291,1241,0.809,1242,0.391,1243,0.391,1244,0.464,1245,0.37,1246,0.42,1247,1.291,1248,0.391,1249,0.37,1250,0.37,1251,2.88,1252,0.42,1253,0.65,1254,1.323,1255,1.323,1256,0.37,1257,0.711,1258,0.893,1259,0.753,1260,0.893,1261,1.291,1262,0.42,1263,0.711,1264,0.37,1265,0.98,1266,0.391,1267,0.42,1268,0.338,1269,0.37,1270,0.464,1271,0.391,1272,0.464,1273,0.464,1274,0.464,1275,1.291,1276,0.42,1277,0.37,1278,2.218,1279,0.893,1280,0.42,1281,0.42,1282,0.464,1283,0.42,1284,1.291,1285,0.464,1286,0.464,1287,0.464,1288,0.464,1289,0.464,1290,1.169,1291,1.028,1292,0.809,1293,1.291,1294,0.893,1295,0.464,1296,0.391,1297,0.42,1298,0.352,1299,0.464,1300,0.809,1301,0.893,1302,0.678,1303,0.809,1304,0.464,1305,0.464,1306,0.326,1307,0.391,1308,0.893,1309,0.464,1310,0.37,1311,0.338,1312,0.893,1313,0.893,1314,0.464,1315,0.42,1316,0.464,1317,0.893,1318,0.893,1319,0.464,1320,0.464,1321,0.464,1322,2.915,1323,0.893,1324,0.42,1325,0.464,1326,0.464,1327,0.464,1328,0.893,1329,0.464,1330,0.464,1331,0.42,1332,0.464,1333,0.37,1334,1.504,1335,0.464,1336,0.464,1337,0.464,1338,0.464,1339,0.464,1340,0.464,1341,0.893,1342,0.893,1343,0.42,1344,0.893,1345,0.893,1346,0.464,1347,0.464,1348,0.893,1349,0.338,1350,0.464,1351,0.464,1352,0.37,1353,0.352,1354,0.464,1355,0.42,1356,0.464,1357,0.464,1358,0.464,1359,0.464]],["component/6",[615,0.32]],["title/7-1",[0,24.611,1,35.814,688,27.269,1172,37.168]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[688,34.977,1360,59.274]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[735,44.418,1361,59.274]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7-4",[128,20.585,290,23.282,688,24.563,1362,41.625,1363,45.98]],["name/7-4",[]],["text/7-4",[]],["component/7-4",[]],["title/7-5",[2,27.233,151,34.816,735,38.918]],["name/7-5",[]],["text/7-5",[]],["component/7-5",[]],["title/7-6",[151,30.98,616,30.251,618,35.814,735,34.629]],["name/7-6",[]],["text/7-6",[]],["component/7-6",[]],["title/7-7",[620,45.938,738,55.19]],["name/7-7",[]],["text/7-7",[]],["component/7-7",[]],["title/7-8",[1158,52.139,1364,59.274]],["name/7-8",[]],["text/7-8",[]],["component/7-8",[]],["title/7-9",[260,30.244,688,24.563,769,32.259,1160,38.756,1365,36.614]],["name/7-9",[]],["text/7-9",[]],["component/7-9",[]],["title/7-10",[1162,59.274,1366,59.274]],["name/7-10",[]],["text/7-10",[]],["component/7-10",[]],["title/7-11",[1163,59.274,1367,65.475]],["name/7-11",[]],["text/7-11",[]],["component/7-11",[]],["title/7-12",[541,45.682,1365,45.682,1368,57.367]],["name/7-12",[]],["text/7-12",[]],["component/7-12",[]],["title/7-13",[541,45.682,739,43.548,1365,45.682]],["name/7-13",[]],["text/7-13",[]],["component/7-13",[]],["title/7-14",[92,21.827,236,29.391,688,24.563,769,32.259,1369,45.98]],["name/7-14",[]],["text/7-14",[]],["component/7-14",[]],["title/7-15",[2,24.232,1370,51.046,1371,51.046,1372,46.211]],["name/7-15",[]],["text/7-15",[]],["component/7-15",[]],["title/7-16",[1373,65.475,1374,59.274]],["name/7-16",[]],["text/7-16",[]],["component/7-16",[]],["title/7-17",[1375,65.475,1376,59.274]],["name/7-17",[]],["text/7-17",[]],["component/7-17",[]],["title/7-18",[6,26.298,399,29.575,709,28.944,735,34.629]],["name/7-18",[]],["text/7-18",[]],["component/7-18",[]],["title/7-19",[8,43.068,1377,59.274]],["name/7-19",[]],["text/7-19",[]],["component/7-19",[]],["title/7-20",[621,44.418,1378,59.274]],["name/7-20",[]],["text/7-20",[]],["component/7-20",[]],["title/7-21",[11,34.977,733,49.703]],["name/7-21",[]],["text/7-21",[]],["component/7-21",[]],["title/7-22",[228,34.977,1174,52.139]],["name/7-22",[]],["text/7-22",[]],["component/7-22",[]],["title/7-23",[151,30.98,625,35.814,769,35.814,1379,40.649]],["name/7-23",[]],["text/7-23",[]],["component/7-23",[]],["title/7-24",[3,22.736,309,27.525,627,32.337,688,20.494,1380,32.337,1381,38.364]],["name/7-24",[]],["text/7-24",[]],["component/7-24",[]],["title/7-25",[401,24.523,509,24.523,628,32.337,1203,26.916,1256,30.55,1257,30.55,1382,32.337]],["name/7-25",[]],["text/7-25",[]],["component/7-25",[]],["title/7-26",[232,29.391,709,26.071,1256,36.614,1380,38.756,1383,45.98]],["name/7-26",[]],["text/7-26",[]],["component/7-26",[]],["title/7-27",[246,21.827,289,26.639,309,21.827,1203,32.259,1384,45.98]],["name/7-27",[]],["text/7-27",[]],["component/7-27",[]],["title/7-28",[246,24.232,901,35.814,1257,40.649,1385,51.046]],["name/7-28",[]],["text/7-28",[]],["component/7-28",[]],["title/7-29",[246,24.232,901,35.814,1203,35.814,1386,51.046]],["name/7-29",[]],["text/7-29",[]],["component/7-29",[]],["title/7-30",[20,35.703,246,27.233,1387,57.367]],["name/7-30",[]],["text/7-30",[]],["component/7-30",[]],["title/7-31",[20,31.769,246,24.232,688,27.269,1388,51.046]],["name/7-31",[]],["text/7-31",[]],["component/7-31",[]],["title/7-32",[20,31.769,128,22.853,246,24.232,1389,51.046]],["name/7-32",[]],["text/7-32",[]],["component/7-32",[]],["title/7-33",[20,31.769,246,24.232,290,25.847,1390,51.046]],["name/7-33",[]],["text/7-33",[]],["component/7-33",[]],["title/7-34",[246,27.233,509,36.67,1391,57.367]],["name/7-34",[]],["text/7-34",[]],["component/7-34",[]],["title/7-35",[246,24.232,509,32.63,1392,51.046,1393,46.211]],["name/7-35",[]],["text/7-35",[]],["component/7-35",[]],["title/7-36",[49,28.616,246,21.827,490,32.259,509,29.391,1394,45.98]],["name/7-36",[]],["text/7-36",[]],["component/7-36",[]],["title/7-37",[246,24.232,509,32.63,1395,51.046,1396,51.046]],["name/7-37",[]],["text/7-37",[]],["component/7-37",[]],["title/7-38",[246,24.232,509,32.63,1397,51.046,1398,51.046]],["name/7-38",[]],["text/7-38",[]],["component/7-38",[]],["title/7-39",[246,27.233,1382,48.355,1399,57.367]],["name/7-39",[]],["text/7-39",[]],["component/7-39",[]],["title/7-40",[246,27.233,538,36.67,1400,57.367]],["name/7-40",[]],["text/7-40",[]],["component/7-40",[]],["title/7-41",[246,24.232,736,43.027,1401,51.046,1402,51.046]],["name/7-41",[]],["text/7-41",[]],["component/7-41",[]],["title/7-42",[246,27.233,1403,57.367,1404,51.934]],["name/7-42",[]],["text/7-42",[]],["component/7-42",[]],["title/7-43",[233,32.528,629,40.249,688,30.646]],["name/7-43",[]],["text/7-43",[]],["component/7-43",[]],["title/7",[246,27.233,688,30.646,1172,41.771]],["name/7",[246,0.182,688,0.205,1172,0.28]],["text/7",[0,2.107,2,2.155,3,2.14,4,0.366,6,0.415,10,0.748,11,0.431,12,0.267,20,1.325,27,1.325,28,0.931,41,0.352,49,0.728,53,2.299,60,0.852,74,1.457,75,0.332,76,0.895,81,5.129,82,0.821,83,0.293,87,1.138,88,2.72,90,1.241,91,1.908,92,2.075,93,0.769,94,2.59,100,0.587,101,0.304,105,1.234,110,2.981,111,3.049,121,0.247,124,0.728,125,1.262,126,0.547,127,0.237,128,3.354,129,0.267,130,0.293,131,1.429,132,0.53,137,0.748,140,2.741,141,1.588,142,0.267,144,0.965,149,0.53,150,0.852,151,0.489,152,2.376,155,0.457,158,1.712,161,1.72,165,0.53,166,2.376,168,1.401,169,0.748,170,1.924,171,1.828,172,2.775,177,2.704,179,0.94,182,0.821,194,0.26,198,2.171,199,3.533,202,0.283,207,1.692,210,1.389,213,0.68,216,2.315,228,0.223,229,1.146,231,2.026,232,0.267,233,1.368,234,0.769,236,3.459,237,1.11,240,0.274,246,4.36,247,1.656,249,0.478,260,0.53,268,1.11,269,0.274,275,0.304,276,2.224,277,0.378,278,2.308,280,2.085,281,2.044,282,0.26,285,0.26,289,2.724,290,2.98,291,0.304,294,0.564,295,0.293,297,0.332,298,0.304,309,0.717,310,1.169,311,0.283,313,0.856,315,0.566,319,0.587,321,0.53,327,2.191,335,1.445,336,0.293,350,0.547,360,0.769,362,0.352,363,0.293,364,0.821,367,0.253,369,1.779,371,0.267,373,0.94,378,0.71,379,1.588,383,2.965,384,1.241,392,0.304,394,1.501,396,0.283,399,1.836,400,1.024,401,1.169,403,0.253,405,0.68,412,1.552,416,2.224,441,0.612,446,0.642,457,0.317,459,0.274,464,0.612,465,1.241,481,0.931,490,0.566,494,0.317,500,2.376,506,0.283,508,0.53,509,2.902,515,0.267,523,0.267,535,0.317,536,1.398,538,1.169,540,1.059,541,3.984,542,0.68,554,1.099,563,1.519,564,0.793,569,0.253,571,0.293,574,0.332,575,1.265,577,0.515,579,0.26,589,0.378,595,0.467,601,0.317,619,1.054,644,0.274,653,0.293,658,1.398,659,1.207,667,0.53,669,0.332,672,0.587,673,0.304,676,0.489,677,3.375,678,0.267,683,0.547,684,0.566,686,0.993,687,1.283,688,4.764,690,1.202,694,2.308,695,0.793,697,1.203,699,0.612,700,0.502,702,0.378,706,0.642,709,0.856,711,0.547,722,0.68,724,0.274,726,0.68,727,0.587,730,3.473,733,2.406,734,0.888,735,2.965,736,1.273,738,2.471,739,1.146,743,0.68,747,0.547,751,0.587,769,4.78,772,0.467,773,0.401,782,0.26,786,3.629,790,0.547,791,0.283,793,0.931,794,0.304,795,0.378,796,0.317,798,0.515,799,0.274,802,0.467,806,1.332,811,0.53,816,0.821,827,0.317,832,0.378,855,0.888,856,0.352,857,0.293,859,0.53,860,0.352,864,0.68,866,0.587,870,1.928,871,0.769,882,0.304,884,1.024,901,4.348,903,0.352,904,0.68,937,0.821,939,0.332,949,0.378,962,0.274,971,0.317,975,0.587,977,0.332,984,0.317,991,1.795,995,1.146,996,0.642,1013,0.642,1016,0.378,1028,0.332,1029,0.547,1044,0.283,1085,0.352,1087,0.888,1089,0.931,1091,0.378,1100,0.352,1107,0.378,1108,0.332,1117,2.704,1130,2.524,1134,0.352,1136,1.367,1145,0.566,1167,0.317,1168,0.317,1170,0.317,1174,2.334,1177,0.378,1179,0.317,1180,0.73,1181,0.73,1183,0.378,1184,1.367,1185,0.378,1187,0.378,1193,1.367,1194,0.986,1203,2.813,1214,0.378,1218,0.352,1226,0.587,1227,0.304,1228,0.352,1232,0.378,1239,0.852,1243,0.68,1245,0.332,1249,0.332,1250,1.921,1251,0.73,1253,1.55,1254,1.457,1256,2.524,1257,2.334,1262,0.378,1268,0.304,1271,2.672,1281,1.059,1303,1.367,1306,0.293,1364,0.378,1365,5.087,1366,0.378,1372,0.378,1374,1.059,1376,1.059,1377,1.059,1378,0.378,1379,0.332,1380,3.044,1382,0.986,1393,0.378,1404,0.73,1405,1.17,1406,1.146,1407,0.417,1408,0.417,1409,0.417,1410,0.417,1411,0.417,1412,0.806,1413,0.352,1414,0.417,1415,0.417,1416,0.352,1417,0.417,1418,0.332,1419,0.417,1420,0.332,1421,0.378,1422,0.378,1423,1.367,1424,0.806,1425,0.68,1426,5.145,1427,0.378,1428,0.332,1429,0.417,1430,1.17,1431,2.129,1432,0.378,1433,2.679,1434,0.352,1435,0.806,1436,0.806,1437,0.417,1438,0.417,1439,0.806,1440,1.059,1441,0.417,1442,0.417,1443,1.829,1444,0.378,1445,0.317,1446,0.566,1447,0.304,1448,0.417,1449,0.806,1450,0.888,1451,0.806,1452,0.806,1453,0.417,1454,0.417,1455,0.417,1456,0.352,1457,1.17,1458,0.806,1459,0.931,1460,0.806,1461,2.931,1462,0.417,1463,0.417,1464,0.806,1465,0.642,1466,0.417,1467,0.417,1468,0.806,1469,0.378,1470,0.417,1471,0.417,1472,0.332,1473,0.332,1474,1.542,1475,0.73,1476,0.417,1477,1.656,1478,0.417,1479,0.417,1480,0.417,1481,1.17,1482,0.417,1483,0.73,1484,0.417,1485,0.332,1486,0.417,1487,0.806,1488,0.378,1489,1.332,1490,0.73,1491,0.352,1492,0.806,1493,0.806,1494,1.17,1495,0.417,1496,0.417,1497,0.612,1498,0.378,1499,0.417,1500,0.417,1501,0.417,1502,0.806,1503,0.417,1504,0.806,1505,2.129,1506,0.417,1507,0.378,1508,0.378,1509,0.417,1510,0.417,1511,0.417,1512,1.17,1513,1.17,1514,0.888,1515,0.417,1516,0.332,1517,0.417,1518,0.73,1519,0.73,1520,0.417,1521,0.417,1522,0.806,1523,0.417,1524,0.417,1525,0.806,1526,1.17,1527,1.928,1528,1.367,1529,1.17,1530,0.806,1531,0.612,1532,1.367,1533,0.417,1534,0.73,1535,1.17,1536,2.653,1537,0.73,1538,1.928,1539,0.417,1540,0.73,1541,0.417,1542,0.352,1543,0.417,1544,0.378,1545,0.73,1546,0.317,1547,0.352,1548,0.417,1549,0.417,1550,0.332,1551,0.352,1552,0.642,1553,0.417,1554,0.417,1555,0.806,1556,0.378,1557,1.51,1558,0.378,1559,1.17,1560,0.417,1561,0.417]],["component/7",[615,0.32]],["title/8-1",[0,20.166,773,20.827,779,26.032,869,28.376,870,27.513,1095,31.752]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8-2",[2,21.827,129,29.391,161,23.282,281,21.499,575,24.114]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["title/8-3",[6,29.554,616,33.997,825,48.355]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["title/8-4",[11,27.269,575,26.771,616,30.251,619,20.09]],["name/8-4",[]],["text/8-4",[]],["component/8-4",[]],["title/8-5",[53,25.847,228,27.269,575,26.771,619,20.09]],["name/8-5",[]],["text/8-5",[]],["component/8-5",[]],["title/8-6",[289,24.234,290,21.179,418,33.308,625,29.347,1333,33.308,1562,33.308]],["name/8-6",[]],["text/8-6",[]],["component/8-6",[]],["title/8-7",[171,29.048,629,40.249,677,36.67]],["name/8-7",[]],["text/8-7",[]],["component/8-7",[]],["title/8-8",[616,33.997,632,41.771,1563,45.682]],["name/8-8",[]],["text/8-8",[]],["component/8-8",[]],["title/8-9",[239,37.935,641,49.703]],["name/8-9",[]],["text/8-9",[]],["component/8-9",[]],["title/8-10",[239,29.575,309,24.232,642,43.027,1138,37.168]],["name/8-10",[]],["text/8-10",[]],["component/8-10",[]],["title/8-11",[239,26.639,309,21.827,643,38.756,1138,33.479,1564,45.98]],["name/8-11",[]],["text/8-11",[]],["component/8-11",[]],["title/8-12",[1565,65.475,1566,59.274]],["name/8-12",[]],["text/8-12",[]],["component/8-12",[]],["title/8-13",[1567,65.475,1568,65.475]],["name/8-13",[]],["text/8-13",[]],["component/8-13",[]],["title/8-14",[1569,65.475,1570,65.475]],["name/8-14",[]],["text/8-14",[]],["component/8-14",[]],["title/8-15",[1571,65.475,1572,65.475]],["name/8-15",[]],["text/8-15",[]],["component/8-15",[]],["title/8-16",[1573,65.475,1574,59.274]],["name/8-16",[]],["text/8-16",[]],["component/8-16",[]],["title/8-17",[239,29.575,399,29.575,709,28.944,1575,51.046]],["name/8-17",[]],["text/8-17",[]],["component/8-17",[]],["title/8-18",[239,26.639,384,31.192,1576,45.98,1577,38.756,1578,36.614]],["name/8-18",[]],["text/8-18",[]],["component/8-18",[]],["title/8-19",[644,43.068,1579,59.274]],["name/8-19",[]],["text/8-19",[]],["component/8-19",[]],["title/8-20",[171,25.847,233,28.944,649,40.649,677,32.63]],["name/8-20",[]],["text/8-20",[]],["component/8-20",[]],["title/8-21",[94,30.251,171,25.847,653,35.814,677,32.63]],["name/8-21",[]],["text/8-21",[]],["component/8-21",[]],["title/8-22",[143,30.646,657,51.934,1580,43.548]],["name/8-22",[]],["text/8-22",[]],["component/8-22",[]],["title/8-23",[660,59.274,1581,52.139]],["name/8-23",[]],["text/8-23",[]],["component/8-23",[]],["title/8-24",[61,34.629,143,27.269,663,46.211,1580,38.749]],["name/8-24",[]],["text/8-24",[]],["component/8-24",[]],["title/8",[575,34.338,619,25.769]],["name/8",[575,0.296,619,0.222]],["text/8",[0,1.93,2,0.592,4,0.882,10,0.551,11,0.46,27,0.278,29,0.303,31,0.908,32,0.339,45,0.294,48,0.294,49,0.776,53,3.245,57,2.328,58,1.8,60,0.325,61,1.531,63,1.631,64,0.627,67,0.356,70,0.405,71,0.339,74,0.993,76,0.739,78,1.791,81,3.634,82,0.875,87,1.405,88,1,90,0.303,91,1.567,92,0.212,93,0.82,94,0.511,96,1.127,97,0.325,100,0.627,101,0.325,102,1.731,105,1.308,108,0.303,110,2.319,111,1.151,113,0.82,114,0.325,124,0.536,125,1.832,126,1.964,127,0.489,128,0.87,129,1.976,131,2.708,132,1.485,133,0.356,134,0.797,135,1.209,137,0.797,141,2.117,142,0.286,143,2.933,144,0.551,145,0.314,148,0.405,149,0.294,151,0.271,152,1.677,155,1.447,156,0.797,161,2.127,165,0.294,166,2.49,168,0.567,169,1.027,170,1.179,171,3.194,172,2.472,179,0.536,194,1,198,0.551,199,1.125,201,0.286,202,0.303,208,0.303,214,1.127,216,2.026,228,0.858,230,0.294,231,0.797,232,1.027,233,0.489,234,0.567,237,0.975,239,4.454,240,0.294,243,0.567,244,0.536,246,0.212,248,0.654,249,1.513,259,1.17,260,0.567,262,0.377,268,1.37,269,1.278,270,1.363,276,0.314,278,0.627,280,1.679,281,3.45,282,0.776,284,3.329,285,0.278,289,1.479,290,1.433,292,0.654,295,0.314,296,0.654,300,0.377,308,0.303,309,3.471,310,0.286,311,0.303,312,0.377,313,1.101,315,1.127,318,0.356,327,2.977,328,0.654,332,0.314,335,0.303,343,0.627,351,0.947,356,0.686,360,0.294,361,0.405,363,1.363,365,0.325,367,2.429,369,1.876,371,1.631,373,0.536,379,0.265,383,0.303,384,1.531,385,0.627,386,0.377,387,0.405,392,0.325,394,0.278,396,0.585,397,0.585,399,1.934,400,0.585,401,0.286,403,0.523,406,1.363,411,1.318,412,1.479,417,3.488,418,0.993,423,2.661,436,0.356,437,0.339,446,0.686,452,0.654,457,0.339,459,0.567,464,0.654,469,0.405,480,0.686,483,0.286,490,0.314,500,2.372,506,0.303,507,0.377,508,1.278,510,0.405,511,0.325,515,0.551,516,0.654,523,1.027,524,0.339,526,1.354,536,0.259,538,0.286,559,1.09,560,0.605,562,0.846,563,1.28,564,0.585,569,0.271,570,1.129,572,0.356,575,3.198,577,0.551,582,0.605,583,0.286,585,1.92,591,0.726,594,0.339,595,0.723,616,0.265,617,1.677,619,2.31,622,0.686,626,0.686,640,0.339,644,0.82,645,0.377,646,0.654,650,0.377,654,0.339,658,1.308,659,1.28,665,0.314,667,0.82,671,1.531,672,0.325,673,2.601,676,1.37,677,4.275,678,0.551,680,2.844,681,0.325,683,0.585,686,1.278,688,1.652,689,0.627,690,2.032,694,0.797,695,0.585,697,1.057,700,0.536,709,1.605,711,0.846,716,0.356,723,0.377,724,0.82,730,2.495,732,0.585,737,0.405,746,0.377,747,0.585,764,1.027,765,1.363,770,0.654,772,0.931,773,1.993,778,0.686,779,1.588,781,0.339,782,0.536,783,0.947,785,0.356,789,0.314,790,0.303,791,0.303,796,0.339,798,1.027,799,0.82,800,0.325,802,1.308,803,0.356,807,0.605,809,1.051,811,0.294,824,0.294,827,0.339,843,0.356,846,0.356,848,0.325,849,0.654,850,0.325,857,0.314,859,1.861,866,0.627,867,0.627,869,0.846,870,0.82,871,0.82,872,0.627,880,0.627,881,1.17,886,1.584,892,0.686,893,0.405,906,1.354,907,0.993,920,0.339,927,0.356,929,1.547,931,0.405,932,0.405,935,0.405,937,0.875,953,0.325,958,0.314,972,0.377,973,0.377,975,0.908,978,0.314,979,0.356,984,0.947,987,0.325,988,0.947,990,1.414,991,0.726,1000,0.339,1001,0.325,1002,0.405,1019,0.726,1029,0.585,1031,0.686,1044,0.303,1051,1.17,1055,0.356,1059,0.78,1060,0.377,1061,0.654,1062,0.377,1063,0.377,1066,0.405,1067,0.654,1072,1.22,1075,0.654,1076,0.654,1078,0.325,1079,0.686,1080,0.726,1081,0.686,1082,0.654,1088,0.377,1095,0.654,1100,0.377,1122,1.278,1135,0.686,1138,0.627,1140,1.17,1142,0.339,1145,0.605,1149,1.454,1151,0.405,1161,0.377,1166,0.993,1167,1.475,1168,1.475,1169,1.279,1170,0.947,1171,0.377,1172,0.325,1173,0.377,1175,0.78,1176,0.405,1178,0.686,1179,0.339,1195,0.356,1196,0.947,1202,2.032,1206,0.377,1211,0.947,1213,0.377,1217,0.405,1218,0.377,1226,0.627,1230,0.377,1233,0.78,1235,0.356,1248,0.726,1249,0.356,1253,0.908,1255,0.356,1264,0.356,1265,0.654,1266,0.377,1278,0.377,1280,0.405,1290,0.405,1298,0.654,1300,0.405,1307,1.637,1310,0.356,1311,0.325,1333,0.993,1334,2.043,1352,0.356,1353,0.339,1444,0.405,1445,0.339,1446,0.605,1450,0.654,1465,1.279,1489,0.627,1491,0.377,1498,1.129,1531,0.339,1532,0.405,1542,0.377,1552,0.356,1556,2.311,1562,1.797,1563,0.686,1566,0.405,1574,0.405,1577,0.726,1578,4.372,1579,0.405,1580,2.879,1581,2.032,1582,0.447,1583,0.862,1584,0.447,1585,0.447,1586,0.447,1587,0.405,1588,0.447,1589,0.447,1590,0.447,1591,0.447,1592,0.447,1593,0.447,1594,1.129,1595,0.405,1596,0.405,1597,0.405,1598,0.405,1599,0.447,1600,1.051,1601,0.405,1602,1.051,1603,1.279,1604,0.862,1605,1.129,1606,2.347,1607,0.447,1608,0.377,1609,0.377,1610,0.862,1611,0.862,1612,0.377,1613,0.447,1614,0.447,1615,0.377,1616,0.447,1617,0.447,1618,0.405,1619,0.447,1620,0.447,1621,0.447,1622,0.447,1623,0.405,1624,0.726,1625,0.447,1626,0.862,1627,0.447,1628,0.447,1629,0.862,1630,0.405,1631,0.377,1632,0.447,1633,0.78,1634,0.447,1635,1.247,1636,5.985,1637,3.793,1638,5.211,1639,0.862,1640,4.002,1641,0.447,1642,3.092,1643,0.447,1644,0.405,1645,0.447,1646,0.447,1647,0.405,1648,0.447,1649,0.78,1650,1.129,1651,0.447,1652,0.447,1653,0.356,1654,0.405,1655,0.447,1656,0.405,1657,0.405,1658,1.129,1659,0.862,1660,0.447,1661,0.447,1662,0.726,1663,1.454,1664,0.447,1665,0.447,1666,0.447,1667,1.129,1668,0.405,1669,0.862,1670,0.862,1671,0.862,1672,0.726,1673,0.862,1674,1.247,1675,0.377,1676,0.862,1677,1.129,1678,0.726,1679,0.78,1680,0.686,1681,0.862,1682,0.447,1683,0.862,1684,0.447,1685,1.129,1686,0.447,1687,0.447,1688,0.862,1689,0.447,1690,0.405,1691,0.447,1692,0.447,1693,0.447,1694,0.447,1695,0.862,1696,0.447,1697,0.356,1698,0.78,1699,0.447,1700,0.377,1701,0.447,1702,0.447,1703,0.447,1704,1.129,1705,0.447,1706,0.447,1707,0.447,1708,0.447,1709,0.405,1710,0.405,1711,0.447,1712,0.447,1713,0.447,1714,0.405,1715,0.405,1716,1.247,1717,0.447,1718,0.447,1719,0.78,1720,0.447,1721,0.405,1722,0.447,1723,0.686,1724,0.447,1725,0.862,1726,0.862,1727,0.447,1728,0.78,1729,0.447,1730,0.447,1731,0.447,1732,0.447,1733,0.447,1734,0.377,1735,0.405,1736,0.447,1737,0.78,1738,1.129,1739,0.356,1740,0.447,1741,0.862,1742,1.247,1743,1.247,1744,2.151,1745,0.862,1746,0.447,1747,0.356,1748,0.405,1749,0.447,1750,0.447,1751,0.405,1752,0.447,1753,0.447,1754,0.405,1755,0.447,1756,0.447,1757,0.447,1758,0.447,1759,0.339,1760,0.377,1761,0.447,1762,0.447,1763,0.447,1764,0.726,1765,0.447,1766,0.447,1767,0.447,1768,0.405,1769,1.942,1770,1.129,1771,0.447,1772,0.447,1773,0.447,1774,0.447,1775,0.447,1776,0.405,1777,0.356,1778,0.377,1779,0.447,1780,0.447,1781,0.356,1782,0.447]],["component/8",[615,0.32]],["title/9-1",[0,27.658,294,27.658,619,22.578]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9",[773,32.601,807,45.938]],["name/9",[773,0.281,807,0.396]],["text/9",[4,2.031,10,2.859,31,3.257,53,3.874,91,2.147,105,2.591,128,2.908,129,2.859,143,3.47,161,2.265,166,3.85,198,2.859,199,3.764,214,3.138,230,2.942,244,2.784,268,3.943,276,3.138,278,3.257,281,3.038,290,2.265,360,2.942,367,2.714,410,3.395,412,2.591,417,2.714,442,3.257,459,2.942,482,3.257,500,2.651,515,2.859,526,3.77,536,2.591,559,3.034,563,3.684,569,2.714,575,2.346,585,3.034,658,2.591,659,2.536,676,2.714,677,2.859,697,2.942,755,3.395,763,5.881,764,2.859,772,2.591,773,4.44,783,3.395,807,7.317,869,3.034,871,2.942,882,3.257,884,3.034,920,3.395,987,3.257,990,3.257,1000,3.395,1003,4.049,1104,3.257,1109,4.932,1227,3.257,1298,3.395,1306,4.558,1406,3.395,1531,3.395,1542,3.77,1580,3.395,1606,4.932,1744,3.77,1783,4.049,1784,5.173,1785,4.473,1786,4.049,1787,4.049,1788,3.562,1789,4.473,1790,4.473]],["component/9",[615,0.32]],["title/10-1",[0,31.567,616,38.802]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[2,27.233,171,29.048,172,22.851]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[171,25.847,172,20.333,618,35.814,1791,46.211]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[63,29.391,68,36.614,171,23.282,172,18.315,620,32.259]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10-5",[6,26.298,91,16.872,126,23.868,700,31.769]],["name/10-5",[]],["text/10-5",[]],["component/10-5",[]],["title/10-6",[8,27.513,91,13.825,125,24.788,126,19.558,127,23.717,128,18.726]],["name/10-6",[]],["text/10-6",[]],["component/10-6",[]],["title/10-7",[126,26.824,127,32.528,621,38.918]],["name/10-7",[]],["text/10-7",[]],["component/10-7",[]],["title/10-8",[91,18.961,128,25.683,815,45.682]],["name/10-8",[]],["text/10-8",[]],["component/10-8",[]],["title/10-9",[91,16.872,128,22.853,159,34.629,817,43.027]],["name/10-9",[]],["text/10-9",[]],["component/10-9",[]],["title/10-10",[91,16.872,128,22.853,699,38.749,819,46.211]],["name/10-10",[]],["text/10-10",[]],["component/10-10",[]],["title/10-11",[91,16.872,92,24.232,250,38.749,821,43.027]],["name/10-11",[]],["text/10-11",[]],["component/10-11",[]],["title/10-12",[91,16.872,92,24.232,159,34.629,1792,51.046]],["name/10-12",[]],["text/10-12",[]],["component/10-12",[]],["title/10-13",[91,16.872,92,24.232,266,38.749,1793,51.046]],["name/10-13",[]],["text/10-13",[]],["component/10-13",[]],["title/10-14",[91,15.197,92,21.827,244,28.616,267,34.903,1794,45.98]],["name/10-14",[]],["text/10-14",[]],["component/10-14",[]],["title/10-15",[91,18.961,290,29.048,1795,57.367]],["name/10-15",[]],["text/10-15",[]],["component/10-15",[]],["title/10-16",[91,15.197,230,30.244,290,23.282,987,33.479,1796,45.98]],["name/10-16",[]],["text/10-16",[]],["component/10-16",[]],["title/10-17",[616,45.189]],["name/10-17",[]],["text/10-17",[]],["component/10-17",[]],["title/10-18",[281,30.615,1797,49.703]],["name/10-18",[]],["text/10-18",[]],["component/10-18",[]],["title/10-19",[91,18.961,128,25.683,1797,43.548]],["name/10-19",[]],["text/10-19",[]],["component/10-19",[]],["title/10-20",[1798,69.031]],["name/10-20",[]],["text/10-20",[]],["component/10-20",[]],["title/10-21",[709,37.125,1797,49.703]],["name/10-21",[]],["text/10-21",[]],["component/10-21",[]],["title/10-22",[91,16.872,290,25.847,706,40.649,1799,51.046]],["name/10-22",[]],["text/10-22",[]],["component/10-22",[]],["title/10-23",[91,16.872,92,24.232,158,32.63,1800,51.046]],["name/10-23",[]],["text/10-23",[]],["component/10-23",[]],["title/10-24",[81,21.753,91,12.68,92,18.212,236,24.523,1801,38.364,1802,34.731,1803,38.364]],["name/10-24",[]],["text/10-24",[]],["component/10-24",[]],["title/10-25",[91,21.906,126,21.499,281,21.499,1804,41.625]],["name/10-25",[]],["text/10-25",[]],["component/10-25",[]],["title/10-26",[91,16.872,124,31.769,126,23.868,1805,51.046]],["name/10-26",[]],["text/10-26",[]],["component/10-26",[]],["title/10-27",[125,33.997,281,26.824,1806,57.367]],["name/10-27",[]],["text/10-27",[]],["component/10-27",[]],["title/10-28",[91,15.197,128,20.585,281,21.499,1807,45.98,1808,38.756]],["name/10-28",[]],["text/10-28",[]],["component/10-28",[]],["title/10-29",[57,19.854,281,23.868,1809,51.046,1810,51.046]],["name/10-29",[]],["text/10-29",[]],["component/10-29",[]],["title/10-30",[126,21.499,127,26.071,281,21.499,1811,45.98,1812,38.756]],["name/10-30",[]],["text/10-30",[]],["component/10-30",[]],["title/10-31",[126,26.824,127,32.528,901,40.249]],["name/10-31",[]],["text/10-31",[]],["component/10-31",[]],["title/10-32",[281,26.824,1236,40.249,1813,57.367]],["name/10-32",[]],["text/10-32",[]],["component/10-32",[]],["title/10-33",[1814,69.031]],["name/10-33",[]],["text/10-33",[]],["component/10-33",[]],["title/10-34",[3,30.251,281,23.868,732,34.629,1815,51.046]],["name/10-34",[]],["text/10-34",[]],["component/10-34",[]],["title/10-35",[11,30.646,53,29.048,171,29.048]],["name/10-35",[]],["text/10-35",[]],["component/10-35",[]],["title/10-36",[14,38.918,171,29.048,202,38.918]],["name/10-36",[]],["text/10-36",[]],["component/10-36",[]],["title/10-37",[16,38.918,126,26.824,143,30.646]],["name/10-37",[]],["text/10-37",[]],["component/10-37",[]],["title/10-38",[19,36.614,102,31.192,1200,33.479,1201,36.614,1777,36.614]],["name/10-38",[]],["text/10-38",[]],["component/10-38",[]],["title/10-39",[1816,65.475,1817,55.19]],["name/10-39",[]],["text/10-39",[]],["component/10-39",[]],["title/10-40",[1818,65.475,1819,59.274]],["name/10-40",[]],["text/10-40",[]],["component/10-40",[]],["title/10-41",[1820,65.475,1821,55.19]],["name/10-41",[]],["text/10-41",[]],["component/10-41",[]],["title/10-42",[289,33.237,1202,45.682,1822,57.367]],["name/10-42",[]],["text/10-42",[]],["component/10-42",[]],["title/10-43",[1823,65.475,1824,65.475]],["name/10-43",[]],["text/10-43",[]],["component/10-43",[]],["title/10-44",[21,36.614,171,23.282,365,33.479,1122,30.244,1196,34.903]],["name/10-44",[]],["text/10-44",[]],["component/10-44",[]],["title/10-45",[23,48.355,171,29.048,1825,57.367]],["name/10-45",[]],["text/10-45",[]],["component/10-45",[]],["title/10-46",[42,43.027,151,30.98,327,30.98,1203,35.814]],["name/10-46",[]],["text/10-46",[]],["component/10-46",[]],["title/10-47",[228,34.977,1747,52.139]],["name/10-47",[]],["text/10-47",[]],["component/10-47",[]],["title/10-48",[126,23.868,143,27.269,623,37.168,1047,43.027]],["name/10-48",[]],["text/10-48",[]],["component/10-48",[]],["title/10-49",[143,20.494,240,25.235,396,26.026,406,26.916,624,29.122,1031,30.55,1826,34.731]],["name/10-49",[]],["text/10-49",[]],["component/10-49",[]],["title/10",[161,33.153,172,26.081]],["name/10",[172,0.225,1178,0.449]],["text/10",[0,1.266,2,0.821,3,1.213,4,1.685,5,0.433,6,0.891,11,0.447,12,0.657,13,0.176,18,0.176,20,0.27,27,0.137,28,0.176,29,0.943,32,0.168,45,0.42,48,0.145,49,0.137,51,0.433,52,0.176,53,3.039,57,2.334,58,1.181,60,0.161,61,0.567,62,0.186,63,0.999,64,0.316,65,0.176,66,0.329,67,1.505,68,0.176,76,2.321,77,0.329,78,3.59,81,5.203,82,1.843,83,0.155,87,3.138,88,0.137,90,0.294,91,2.976,92,2.712,93,0.55,94,2.756,96,0.155,100,0.161,102,0.822,105,0.595,106,0.329,107,0.345,108,0.697,110,3.202,111,2.261,112,0.345,113,3.113,114,0.316,121,0.718,123,0.345,124,3.439,125,4.105,126,3.275,127,2.729,128,2.991,130,0.155,131,1.557,132,2.145,134,0.408,135,0.137,137,0.408,138,0.365,141,0.926,142,2.008,143,2.439,144,0.534,145,0.155,149,0.285,150,0.316,151,0.507,152,1.636,155,0.362,156,0.534,157,0.186,158,2.567,159,1.873,160,0.365,161,2.178,165,0.676,166,1.789,168,0.285,169,0.408,170,0.623,171,2.591,172,1.202,175,0.774,176,0.304,178,0.448,179,0.397,198,0.657,199,0.595,201,1.308,202,0.15,207,0.304,208,0.294,214,0.155,216,1.242,227,0.2,228,0.118,229,0.635,230,0.797,231,0.408,232,0.277,233,0.246,234,1.028,236,1.848,237,0.623,239,0.484,240,0.145,244,1.635,246,0.575,248,1.055,249,1.713,250,0.78,251,0.538,256,0.186,259,0.465,260,0.285,262,0.186,266,1.186,267,0.635,268,1.423,269,2.576,270,0.155,276,0.448,278,0.465,280,0.285,281,2.754,282,0.397,284,0.145,285,0.52,286,0.186,287,0.176,288,0.666,289,1.002,290,2.765,291,0.465,295,0.304,296,0.168,299,0.186,301,0.329,303,0.866,308,0.15,309,2.126,310,0.277,311,0.15,313,1.161,315,0.587,317,0.176,318,0.176,321,0.914,322,0.365,323,0.578,324,0.345,325,0.705,327,0.623,328,0.329,332,0.155,335,0.294,341,0.186,342,0.2,343,0.465,350,0.697,360,0.797,363,0.587,364,0.155,365,0.161,367,0.387,368,0.155,369,2.377,370,0.666,371,1.499,373,0.972,378,0.134,379,1.303,383,2.444,384,0.697,385,0.316,386,0.538,394,0.52,396,1.389,397,0.567,399,1.6,400,0.697,401,0.408,403,0.387,406,1.096,411,0.433,412,1.359,413,0.2,414,0.2,416,0.155,417,1.049,422,0.365,423,0.304,437,0.329,438,0.2,452,1.994,457,0.329,465,1.688,475,0.345,476,0.392,480,0.345,483,0.408,494,0.168,495,0.78,500,1.636,506,0.15,508,0.285,511,0.465,512,0.2,515,0.408,516,0.635,523,0.774,525,0.161,527,0.392,536,0.702,538,0.534,549,0.329,554,0.609,559,0.567,560,0.448,561,0.329,562,0.294,563,1.781,564,0.15,569,0.263,571,0.587,573,0.186,574,0.176,575,1.073,577,0.999,579,0.639,583,0.277,584,0.176,585,1.173,592,0.578,595,0.595,610,0.168,616,0.378,617,0.131,619,0.547,629,0.155,633,0.168,634,0.168,639,0.882,644,0.145,646,0.329,653,0.304,654,0.329,658,0.37,659,0.474,667,0.145,671,0.294,672,0.882,673,0.161,676,0.623,677,0.999,678,0.534,680,2.242,682,0.186,683,1.06,684,0.587,685,0.465,686,2.768,687,3.262,688,1.924,694,0.277,696,0.161,697,0.42,699,0.329,700,1.878,701,0.186,709,0.474,711,0.15,715,0.316,730,1.816,732,0.697,747,0.433,748,0.176,751,0.465,755,0.329,760,0.365,764,0.774,769,0.155,772,0.251,773,0.603,778,0.176,779,0.27,781,0.168,782,0.137,783,0.168,787,0.186,789,0.155,790,1.282,791,0.433,792,0.578,794,0.882,798,0.408,799,0.145,800,0.161,802,0.37,804,1.751,805,0.508,806,1.377,809,0.705,811,1.244,813,0.485,816,0.155,824,0.285,827,0.92,843,0.345,848,0.465,849,0.168,850,0.161,851,0.433,858,0.2,859,0.285,860,0.365,861,0.635,863,0.304,864,0.186,866,2.287,867,1.601,869,0.294,870,0.285,871,0.285,876,0.186,877,0.2,880,0.161,881,0.316,884,1.282,886,1.096,887,0.882,888,0.609,890,0.186,892,0.176,901,0.587,902,0.186,905,0.392,906,0.186,908,0.168,912,0.186,934,0.866,936,1.021,946,0.186,953,0.316,954,0.176,958,0.448,962,0.145,966,0.345,967,0.176,972,0.365,973,0.186,975,0.609,978,0.155,987,2.925,994,0.329,995,1.435,996,0.345,1001,0.161,1007,0.2,1010,0.538,1011,0.508,1013,0.176,1020,0.176,1022,0.365,1025,0.485,1028,0.176,1029,0.567,1032,0.186,1034,0.186,1035,0.176,1043,0.176,1047,0.365,1048,0.186,1049,0.392,1051,1.137,1055,0.176,1060,0.186,1067,0.485,1068,0.186,1072,0.329,1081,0.666,1083,0.186,1084,0.392,1089,0.176,1098,0.2,1101,0.2,1104,0.465,1115,0.78,1117,0.176,1122,0.42,1128,0.392,1130,0.508,1135,0.345,1137,0.392,1138,1.708,1140,0.161,1166,0.508,1167,0.635,1168,0.635,1169,0.345,1170,0.329,1186,0.186,1195,0.666,1196,1.994,1198,0.2,1199,1.097,1200,1.137,1201,3.567,1202,2.403,1203,1.542,1204,0.345,1205,1.258,1206,0.365,1207,0.392,1208,0.2,1211,0.485,1213,0.365,1226,0.316,1227,0.609,1229,0.176,1230,0.365,1234,0.186,1235,0.345,1236,2.37,1237,0.2,1239,0.609,1241,0.392,1242,0.365,1243,0.186,1248,0.365,1249,0.345,1250,0.176,1252,0.578,1253,0.748,1255,0.176,1259,0.365,1268,0.161,1269,0.176,1271,0.186,1277,1.244,1283,0.93,1291,0.176,1296,0.365,1297,0.2,1298,0.168,1302,0.168,1306,1.096,1307,0.365,1311,0.316,1324,0.2,1349,0.161,1353,0.168,1406,0.329,1413,0.186,1416,0.705,1418,0.345,1422,0.2,1425,0.186,1445,0.635,1446,0.304,1450,0.329,1456,0.186,1459,1.107,1465,1.244,1473,0.176,1489,0.161,1491,0.186,1497,0.329,1507,0.2,1514,0.168,1518,0.2,1528,0.2,1544,0.2,1546,0.329,1551,0.186,1552,0.345,1558,0.2,1563,0.508,1577,0.186,1578,1.505,1580,0.168,1587,0.2,1601,0.392,1602,0.186,1606,0.329,1609,0.186,1612,0.186,1623,0.2,1633,0.757,1650,0.2,1653,0.176,1654,0.578,1656,0.2,1657,0.392,1662,0.186,1672,0.186,1675,0.538,1678,0.538,1679,0.392,1680,0.176,1697,0.818,1710,0.2,1714,0.2,1715,0.93,1723,0.176,1737,0.392,1738,1.097,1747,1.377,1748,0.2,1754,0.2,1759,1.435,1760,0.705,1764,2.214,1768,0.392,1770,0.2,1777,0.965,1778,0.186,1783,0.392,1784,0.176,1788,0.176,1791,1.258,1797,0.168,1798,0.757,1802,0.392,1808,0.705,1812,1.021,1814,0.392,1817,0.365,1819,0.392,1821,0.705,1826,0.2,1827,3.215,1828,2.732,1829,0.433,1830,0.757,1831,0.757,1832,0.2,1833,0.757,1834,0.433,1835,0.433,1836,0.757,1837,0.638,1838,0.638,1839,0.578,1840,0.433,1841,0.433,1842,0.433,1843,0.221,1844,0.221,1845,0.221,1846,0.221,1847,0.433,1848,0.221,1849,0.221,1850,0.433,1851,0.638,1852,0.221,1853,0.221,1854,0.433,1855,0.433,1856,0.221,1857,0.221,1858,0.392,1859,0.221,1860,0.221,1861,0.433,1862,0.433,1863,0.221,1864,0.433,1865,0.638,1866,0.538,1867,0.433,1868,0.221,1869,0.433,1870,0.221,1871,0.221,1872,0.221,1873,0.221,1874,0.221,1875,0.221,1876,0.2,1877,0.221,1878,0.433,1879,0.638,1880,0.221,1881,0.392,1882,0.221,1883,0.221,1884,0.221,1885,0.433,1886,0.2,1887,0.2,1888,0.221,1889,0.221,1890,2.123,1891,0.538,1892,0.433,1893,0.221,1894,0.221,1895,0.221,1896,0.221,1897,0.221,1898,0.433,1899,0.433,1900,0.221,1901,0.186,1902,0.2,1903,0.221,1904,0.365,1905,0.392,1906,0.221,1907,0.2,1908,0.186,1909,0.221,1910,0.433,1911,0.221,1912,0.365,1913,0.221,1914,0.2,1915,0.221,1916,0.221,1917,0.221,1918,0.578,1919,0.538,1920,0.221,1921,0.2,1922,0.433,1923,0.221,1924,0.392,1925,0.221,1926,0.578,1927,0.345,1928,0.221,1929,0.392,1930,0.2,1931,0.221,1932,0.221,1933,0.392,1934,0.578,1935,0.93,1936,0.433,1937,0.836,1938,0.2,1939,0.433,1940,0.638,1941,0.221,1942,0.221,1943,0.221,1944,0.2,1945,0.186,1946,0.176,1947,0.221,1948,0.221,1949,0.221,1950,0.221,1951,0.221,1952,1.593,1953,0.2,1954,0.2,1955,0.345,1956,0.2,1957,0.221,1958,0.433,1959,0.221,1960,0.221,1961,0.2,1962,0.221,1963,0.638,1964,0.638,1965,1.211,1966,0.757,1967,0.433,1968,0.433,1969,1.39,1970,0.638,1971,0.433,1972,0.433,1973,0.2,1974,0.2,1975,0.221,1976,0.221,1977,0.186,1978,0.221,1979,1.39,1980,1.021,1981,0.221,1982,0.433,1983,0.221,1984,0.433,1985,0.221,1986,0.186,1987,0.2,1988,0.221,1989,0.221,1990,0.221,1991,0.221,1992,0.221,1993,0.433,1994,0.221,1995,0.221,1996,0.392,1997,0.221,1998,0.433,1999,0.2,2000,0.221,2001,0.221,2002,0.221,2003,0.2,2004,0.2,2005,0.221,2006,0.2,2007,0.221,2008,0.221,2009,0.221,2010,0.433,2011,0.433,2012,0.221,2013,0.221,2014,0.433,2015,0.221,2016,0.221,2017,0.221,2018,0.221,2019,0.221,2020,0.433,2021,0.221,2022,0.638,2023,0.433,2024,0.433,2025,0.221,2026,0.2,2027,0.2,2028,0.221,2029,0.433,2030,0.638,2031,0.221,2032,0.221,2033,0.221,2034,0.221,2035,0.221,2036,0.186,2037,0.538,2038,0.221,2039,0.221,2040,0.433,2041,0.221,2042,0.221,2043,0.2,2044,0.2,2045,0.433,2046,0.221,2047,0.221,2048,0.221,2049,0.221,2050,0.221,2051,0.221,2052,0.221,2053,0.221,2054,0.2,2055,0.392,2056,0.221,2057,0.392,2058,0.221,2059,0.221,2060,0.433,2061,0.221,2062,0.433,2063,0.433,2064,0.433,2065,0.433,2066,0.757,2067,0.638,2068,0.433,2069,0.221,2070,0.221,2071,0.221,2072,0.433,2073,0.221,2074,0.221,2075,0.2,2076,0.365,2077,0.705,2078,0.365,2079,0.2,2080,0.186,2081,0.221,2082,0.221,2083,0.221,2084,0.221,2085,0.221,2086,0.221,2087,0.2,2088,0.221,2089,0.433,2090,0.578,2091,0.221,2092,0.221,2093,0.221,2094,0.433,2095,0.221,2096,0.433,2097,0.433,2098,0.221,2099,0.221,2100,0.221,2101,0.392,2102,1.027,2103,0.221,2104,0.176,2105,0.345,2106,0.2,2107,0.221,2108,0.221,2109,0.93,2110,0.433,2111,0.221,2112,0.638,2113,0.221,2114,0.221,2115,0.221,2116,0.221,2117,0.433,2118,0.433,2119,0.433,2120,0.221,2121,0.221,2122,0.221,2123,0.221,2124,0.433,2125,0.433,2126,0.221,2127,0.221,2128,0.433,2129,0.221,2130,0.433,2131,0.221,2132,0.221,2133,0.221,2134,0.433,2135,0.221,2136,0.433,2137,0.638,2138,0.221,2139,0.221,2140,0.221,2141,0.221,2142,0.221,2143,0.221,2144,0.221,2145,0.221,2146,0.392,2147,0.433,2148,0.221,2149,0.2,2150,0.221,2151,0.2,2152,0.2,2153,0.221,2154,0.221,2155,0.221,2156,0.433,2157,0.221,2158,1.414,2159,0.221,2160,0.638,2161,0.638,2162,0.221,2163,0.538,2164,0.221,2165,0.2,2166,0.221,2167,0.221,2168,0.221,2169,0.221,2170,0.221,2171,0.221,2172,0.221,2173,0.221,2174,0.221,2175,0.221,2176,0.2,2177,0.221,2178,0.221,2179,0.221,2180,0.221,2181,0.221,2182,0.221,2183,0.221,2184,0.221,2185,0.221,2186,0.221,2187,0.221,2188,0.221,2189,0.638,2190,0.221,2191,0.221,2192,0.221,2193,0.221,2194,0.221,2195,0.221,2196,0.433,2197,0.221,2198,0.392,2199,0.221,2200,0.433,2201,0.433,2202,0.2,2203,0.221,2204,0.392,2205,0.221,2206,0.221,2207,0.221,2208,0.221,2209,0.221,2210,0.221,2211,0.221,2212,0.221,2213,0.638,2214,0.221,2215,0.221,2216,0.433,2217,0.221,2218,0.638,2219,0.221,2220,0.433,2221,0.221,2222,0.221,2223,0.221,2224,0.433,2225,0.2,2226,0.221,2227,0.221,2228,0.221,2229,0.221,2230,0.221,2231,0.93,2232,0.433,2233,0.433,2234,0.221,2235,0.2,2236,0.2,2237,0.221,2238,0.221,2239,0.221,2240,0.221,2241,0.433,2242,0.221,2243,1.027,2244,0.221,2245,0.433,2246,0.221,2247,0.433,2248,0.433,2249,0.433,2250,0.433,2251,0.221,2252,0.2,2253,0.221,2254,0.221,2255,0.221,2256,0.221,2257,0.221,2258,0.221,2259,0.221,2260,0.2,2261,0.392,2262,0.221,2263,0.221,2264,0.221,2265,0.221]],["component/10",[615,0.32]],["title/11-1",[0,31.567,161,33.153]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11-2",[2,27.233,91,18.961,126,26.824]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["title/11-3",[91,12.68,126,17.938,618,26.916,802,22.227,1264,46.172,1265,29.122]],["name/11-3",[]],["text/11-3",[]],["component/11-3",[]],["title/11-4",[4,18.994,91,13.825,126,19.558,135,26.032,620,29.347,802,24.234]],["name/11-4",[]],["text/11-4",[]],["component/11-4",[]],["title/11-5",[91,13.825,126,19.558,773,20.827,800,30.456,869,28.376,1158,33.308]],["name/11-5",[]],["text/11-5",[]],["component/11-5",[]],["title/11-6",[6,33.731,170,39.737]],["name/11-6",[]],["text/11-6",[]],["component/11-6",[]],["title/11-7",[11,34.977,2266,65.475]],["name/11-7",[]],["text/11-7",[]],["component/11-7",[]],["title/11-8",[14,38.918,161,29.048,261,51.934]],["name/11-8",[]],["text/11-8",[]],["component/11-8",[]],["title/11-9",[16,38.918,549,43.548,2267,48.355]],["name/11-9",[]],["text/11-9",[]],["component/11-9",[]],["title/11-10",[19,45.682,1955,45.682,2268,57.367]],["name/11-10",[]],["text/11-10",[]],["component/11-10",[]],["title/11-11",[21,45.682,199,33.237,2260,51.934]],["name/11-11",[]],["text/11-11",[]],["component/11-11",[]],["title/11-12",[53,25.847,161,25.847,228,27.269,2269,43.027]],["name/11-12",[]],["text/11-12",[]],["component/11-12",[]],["title/11-13",[12,32.63,161,25.847,602,38.749,623,37.168]],["name/11-13",[]],["text/11-13",[]],["component/11-13",[]],["title/11",[1,45.938,161,33.153]],["name/11",[1,0.396,1178,0.449]],["text/11",[0,1.531,2,0.471,4,3.277,9,0.837,12,2.685,18,1.459,45,0.653,49,0.618,53,2.711,57,1.634,58,1.211,59,0.899,63,2.958,64,1.858,65,1.459,71,0.754,75,0.791,76,1.086,81,4.62,83,0.697,87,0.618,91,2.329,94,1.512,102,1.731,105,0.575,106,0.754,108,0.674,110,2.903,111,0.589,124,0.618,126,3.52,127,0.563,129,2.03,130,2.228,131,3.524,135,1.588,137,0.635,141,0.589,143,1.363,152,1.086,154,0.791,155,1.039,156,1.172,161,4.012,165,0.653,166,0.589,168,0.653,169,0.635,171,0.928,172,0.396,175,0.635,178,0.697,198,1.172,199,0.575,201,0.635,207,0.697,216,3.438,230,0.653,231,1.631,233,1.039,234,1.206,243,1.679,249,1.512,259,0.723,260,0.653,268,1.549,279,0.837,280,1.206,281,4.166,282,0.618,284,1.679,285,1.141,287,2.032,288,0.791,309,2.689,311,0.674,315,0.697,318,0.791,327,3.766,328,0.754,350,0.674,351,1.937,363,0.697,367,0.603,368,0.697,369,1.112,373,1.141,378,1.112,379,1.086,385,0.723,399,0.575,403,0.603,404,1.545,412,1.84,416,2.228,417,1.112,423,1.791,433,1.545,482,0.723,483,0.635,494,0.754,500,1.512,511,0.723,515,1.172,516,1.937,536,1.479,538,1.172,549,1.391,563,1.8,564,0.674,569,0.603,571,0.697,575,4.216,577,0.635,579,0.618,582,1.286,583,1.172,595,0.575,598,1.545,602,2.824,606,1.459,610,0.754,617,0.589,619,1.653,634,0.754,649,0.791,659,0.563,665,0.697,666,0.837,670,0.837,671,3.139,673,0.723,675,0.791,676,0.603,678,1.172,680,1.141,682,0.837,685,0.723,686,0.653,688,0.531,689,0.723,694,1.172,695,1.731,697,0.653,709,0.563,724,0.653,727,0.723,749,1.937,751,0.723,762,0.899,764,1.631,774,0.899,789,0.697,790,0.674,791,2.85,799,0.653,800,0.723,802,2.155,804,2.032,805,2.032,808,0.837,824,0.653,827,0.754,840,0.791,848,1.858,850,0.723,855,0.754,859,0.653,863,0.697,865,0.837,871,1.679,872,0.723,873,0.899,875,0.837,881,2.312,884,0.674,887,1.858,888,1.334,923,0.837,927,0.791,934,0.837,951,0.791,958,1.286,962,2.089,966,0.791,967,0.791,971,0.754,978,1.286,990,1.858,1001,3.059,1009,1.659,1019,0.837,1025,0.754,1029,0.674,1032,0.837,1043,0.791,1044,1.731,1051,0.723,1067,0.754,1069,0.899,1079,0.791,1095,0.754,1102,0.899,1108,0.791,1109,0.754,1111,1.545,1112,1.459,1115,1.391,1122,1.206,1135,0.791,1140,1.334,1145,0.697,1182,2.032,1200,0.723,1204,0.791,1229,1.459,1236,1.286,1238,0.899,1250,0.791,1263,0.791,1264,2.032,1265,1.391,1268,1.334,1291,0.791,1298,1.391,1349,0.723,1355,0.899,1379,0.791,1406,0.754,1420,0.791,1432,1.659,1447,1.334,1472,0.791,1473,0.791,1474,0.837,1485,0.791,1489,1.334,1508,0.899,1527,0.899,1550,0.791,1551,0.837,1595,1.659,1596,0.899,1597,0.899,1598,0.899,1600,2.151,1618,0.899,1647,0.899,1649,0.899,1658,2.31,1680,0.791,1744,0.837,1777,0.791,1781,0.791,1784,0.791,1866,1.545,1905,0.899,1914,0.899,1918,0.899,1919,1.545,1944,0.899,1945,0.837,1955,0.791,1956,0.899,1987,0.899,2037,1.545,2104,0.791,2105,0.791,2146,0.899,2152,0.899,2163,2.151,2235,0.899,2267,4.512,2269,1.545,2270,0.993,2271,1.659,2272,0.993,2273,2.874,2274,0.993,2275,1.833,2276,0.993,2277,0.993,2278,0.993,2279,0.993,2280,0.993,2281,1.659,2282,0.993,2283,0.993,2284,0.899,2285,0.993,2286,0.993,2287,0.993,2288,1.833,2289,2.552,2290,0.993,2291,0.993,2292,0.993,2293,0.993,2294,0.899,2295,0.993,2296,0.993,2297,0.993,2298,0.993,2299,0.993,2300,1.833,2301,0.993,2302,0.993,2303,0.993,2304,0.837,2305,0.993,2306,3.803,2307,3.72,2308,1.659,2309,0.993,2310,0.993,2311,0.899,2312,1.833,2313,0.993,2314,0.837,2315,0.993,2316,0.993,2317,0.837,2318,1.833,2319,0.993,2320,0.993,2321,0.993,2322,1.833,2323,0.899,2324,3.175,2325,3.175,2326,0.993,2327,0.993,2328,0.993,2329,0.899,2330,0.993,2331,0.993,2332,0.993,2333,0.993,2334,0.993,2335,0.993,2336,0.899,2337,0.899,2338,0.899,2339,0.899,2340,0.993,2341,0.837,2342,0.993,2343,0.993,2344,0.837,2345,0.993,2346,0.993,2347,1.833,2348,0.993,2349,0.993,2350,0.899,2351,1.459,2352,0.993,2353,3.803,2354,0.993,2355,0.993,2356,0.993,2357,3.175,2358,0.899,2359,0.993,2360,1.833,2361,1.833,2362,1.833,2363,0.993,2364,0.993,2365,1.659,2366,0.993,2367,0.993,2368,0.837,2369,0.993,2370,2.552,2371,0.993,2372,0.993,2373,3.175,2374,0.993,2375,0.993,2376,0.993,2377,0.899,2378,0.993,2379,0.899,2380,0.993,2381,2.552,2382,1.833,2383,0.993,2384,1.833,2385,0.993,2386,0.993,2387,1.833,2388,0.993,2389,0.993,2390,0.993,2391,1.833,2392,1.833,2393,1.833,2394,0.993,2395,0.993,2396,0.993]],["component/11",[615,0.32]],["title/12-1",[0,31.567,12,41.853]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[2,31.082,2397,65.475]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[6,29.554,958,40.249,2398,51.934]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12-4",[11,30.646,700,35.703,811,37.735]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["title/12-5",[14,38.918,126,26.824,127,32.528]],["name/12-5",[]],["text/12-5",[]],["component/12-5",[]],["title/12-6",[16,38.918,91,18.961,128,25.683]],["name/12-6",[]],["text/12-6",[]],["component/12-6",[]],["title/12-7",[4,29.732,228,34.977]],["name/12-7",[]],["text/12-7",[]],["component/12-7",[]],["title/12-8",[91,13.825,175,26.737,281,19.558,625,29.347,811,27.513,1225,37.867]],["name/12-8",[]],["text/12-8",[]],["component/12-8",[]],["title/12-9",[143,34.977,629,45.938]],["name/12-9",[]],["text/12-9",[]],["component/12-9",[]],["title/12-10",[417,34.816,632,41.771,863,40.249]],["name/12-10",[]],["text/12-10",[]],["component/12-10",[]],["title/12",[2399,64.274]],["name/12",[2399,0.895]],["text/12",[3,2.536,4,2.972,5,0.393,10,0.37,12,0.37,24,0.439,49,2.503,53,2.403,57,2.08,58,0.524,63,1.011,69,0.524,76,0.343,78,4.757,81,6.308,87,3.914,91,1.767,92,1.325,93,0.726,94,1.197,96,0.406,101,0.421,102,2.341,110,2,111,2.678,112,1.26,113,3.261,114,1.47,115,0.461,116,2.353,121,0.937,124,2.148,125,3.057,126,1.88,127,1.373,128,1.084,131,0.343,134,1.784,135,1.737,137,2.206,140,0.439,141,0.343,143,1.674,150,0.421,151,0.351,152,0.654,155,0.626,156,0.705,157,2.909,158,0.37,159,2.903,160,1.333,161,3.541,165,0.381,166,2.045,170,0.351,173,0.524,175,0.37,176,0.406,201,0.705,207,0.774,210,2.119,216,0.351,230,2.061,234,0.381,239,0.335,243,0.726,249,0.654,269,0.381,270,0.406,273,0.461,281,2.584,288,0.461,289,0.335,290,1.413,291,1.763,296,1.201,298,1.152,305,1.432,309,1.778,313,1.373,315,2.822,319,0.421,322,0.488,353,0.524,369,0.96,377,2.527,378,0.351,379,0.343,380,1.333,383,0.749,397,0.749,403,0.351,410,0.439,412,0.335,417,0.351,420,0.439,423,0.406,433,0.488,456,0.524,463,0.461,465,4.441,483,1.011,500,1.197,524,1.201,563,0.328,569,0.67,575,0.579,578,0.488,579,0.36,580,0.524,583,0.37,585,0.749,602,0.439,617,0.343,671,0.393,678,0.705,680,0.984,700,0.36,705,0.524,732,0.393,739,0.838,764,0.37,765,0.774,782,0.36,783,0.439,802,2,804,2.748,805,1.928,811,1.328,812,3.202,859,0.381,861,0.838,863,1.11,867,1.152,881,1.152,892,0.461,929,0.461,937,0.406,939,0.461,958,2.822,962,0.381,970,1.333,978,0.406,987,1.152,1006,1.432,1062,0.93,1068,0.488,1155,0.93,1182,0.461,1200,0.804,1226,0.804,1229,0.461,1259,0.488,1277,0.461,1302,0.838,1343,0.524,1413,0.488,1428,0.879,1446,0.406,1447,0.804,1473,1.928,1474,3.81,1475,2.192,1483,0.524,1497,0.439,1581,1.928,1603,0.461,1631,0.488,1653,0.461,1672,0.488,1680,0.461,1698,0.524,1759,0.838,1764,1.702,1808,0.488,1812,0.488,1827,1.333,1831,1.432,1832,0.524,1833,1.432,1836,0.524,1839,0.524,1858,0.524,1886,0.524,1891,1.702,1912,0.93,1927,0.461,1934,0.524,1935,0.999,1938,0.524,1946,0.461,1952,0.488,1961,0.524,1966,0.524,1973,0.524,1974,1.432,1980,0.488,2026,2.527,2076,0.488,2077,1.702,2078,0.488,2080,0.488,2090,1.828,2151,0.524,2204,3.641,2269,0.93,2281,6.674,2314,1.702,2338,7.279,2344,3.607,2351,0.879,2353,0.999,2379,0.524,2398,1.432,2399,0.488,2400,0.579,2401,0.579,2402,0.579,2403,0.579,2404,0.579,2405,0.579,2406,0.579,2407,1.582,2408,0.579,2409,0.579,2410,0.579,2411,1.104,2412,1.104,2413,1.828,2414,2.421,2415,0.579,2416,1.582,2417,2.019,2418,0.579,2419,0.579,2420,1.828,2421,0.579,2422,1.104,2423,1.104,2424,1.104,2425,1.104,2426,0.579,2427,0.579,2428,0.579,2429,0.579,2430,1.104,2431,0.579,2432,0.579,2433,0.579,2434,1.104,2435,0.579,2436,0.579,2437,0.579,2438,0.579,2439,0.579,2440,1.582,2441,0.579,2442,0.579,2443,0.579,2444,0.579,2445,1.104,2446,1.104,2447,1.104,2448,0.579,2449,1.104,2450,0.579,2451,0.579,2452,0.579,2453,0.579,2454,0.579,2455,0.579,2456,0.524,2457,0.579,2458,0.579,2459,1.104,2460,1.104,2461,1.104,2462,1.582,2463,1.582,2464,1.582,2465,0.579,2466,1.582,2467,1.582,2468,0.579,2469,0.579,2470,0.579,2471,0.579,2472,0.579,2473,0.579,2474,0.579,2475,0.579,2476,0.579,2477,0.579,2478,0.579,2479,0.579,2480,0.579,2481,1.582,2482,2.019,2483,2.019,2484,0.579,2485,1.104,2486,1.104,2487,1.104,2488,0.579,2489,0.579,2490,0.579,2491,0.579,2492,0.579,2493,0.579,2494,0.579,2495,0.579,2496,0.579,2497,0.579,2498,0.579,2499,0.579,2500,0.579,2501,0.579,2502,0.579,2503,0.524,2504,1.104,2505,0.579,2506,0.579,2507,0.579,2508,0.579,2509,0.579,2510,0.579,2511,0.579,2512,1.104,2513,0.579,2514,1.104,2515,6.007,2516,2.019,2517,0.579,2518,2.019,2519,0.579,2520,1.104,2521,0.579,2522,1.104,2523,2.019,2524,0.579,2525,1.104,2526,0.579,2527,0.579,2528,0.579,2529,0.579,2530,0.579,2531,0.579,2532,0.579,2533,0.579,2534,0.579,2535,4.022,2536,6.007,2537,0.579,2538,0.579,2539,4.022,2540,0.579,2541,2.019,2542,0.579,2543,1.104,2544,2.019,2545,0.579,2546,1.828,2547,3.451,2548,0.579,2549,2.791,2550,0.579,2551,0.579,2552,2.791,2553,3.451,2554,3.451,2555,0.579,2556,0.579,2557,6.007,2558,0.579,2559,0.579,2560,0.579,2561,0.579,2562,0.579,2563,1.104,2564,0.579,2565,1.104,2566,0.579,2567,0.579,2568,0.579,2569,0.579,2570,0.579,2571,0.579,2572,0.579,2573,1.582,2574,0.579,2575,0.579,2576,0.579,2577,0.579,2578,0.579,2579,0.579,2580,0.579,2581,0.579,2582,2.421,2583,1.104,2584,1.104,2585,1.104,2586,1.104,2587,1.104,2588,2.421]],["component/12",[615,0.32]],["title/13-1",[0,24.611,1,35.814,91,16.872,715,37.168]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[2,27.233,91,18.961,2589,51.934]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13-3",[6,29.554,91,18.961,2590,43.548]],["name/13-3",[]],["text/13-3",[]],["component/13-3",[]],["title/13-4",[8,30.244,91,15.197,92,21.827,266,34.903,2590,34.903]],["name/13-4",[]],["text/13-4",[]],["component/13-4",[]],["title/13-5",[91,15.197,290,23.282,621,31.192,2351,36.614,2590,34.903]],["name/13-5",[]],["text/13-5",[]],["component/13-5",[]],["title/13-6",[11,24.563,91,21.906,336,32.259,908,34.903]],["name/13-6",[]],["text/13-6",[]],["component/13-6",[]],["title/13-7",[14,34.629,91,16.872,128,22.853,1516,40.649]],["name/13-7",[]],["text/13-7",[]],["component/13-7",[]],["title/13-8",[91,13.825,128,18.726,562,28.376,1516,33.308,2591,41.828,2592,37.867]],["name/13-8",[]],["text/13-8",[]],["component/13-8",[]],["title/13-9",[172,22.851,2593,57.367,2594,57.367]],["name/13-9",[]],["text/13-9",[]],["component/13-9",[]],["title/13-10",[16,22.328,91,10.878,128,14.735,954,26.209,1044,22.328,2595,29.796,2596,29.796,2597,29.796,2598,29.796]],["name/13-10",[]],["text/13-10",[]],["component/13-10",[]],["title/13-11",[91,16.872,228,27.269,309,24.232,779,31.769]],["name/13-11",[]],["text/13-11",[]],["component/13-11",[]],["title/13-12",[623,47.675,2599,55.19]],["name/13-12",[]],["text/13-12",[]],["component/13-12",[]],["title/13-13",[110,26.639,824,30.244,1142,34.903,2599,38.756,2600,45.98]],["name/13-13",[]],["text/13-13",[]],["component/13-13",[]],["title/13-14",[39,24.984,91,10.878,281,15.389,309,15.624,595,19.069,779,20.483,1236,23.092,2601,32.913,2602,29.796]],["name/13-14",[]],["text/13-14",[]],["component/13-14",[]],["title/13-15",[87,31.769,143,27.269,624,38.749,2603,46.211]],["name/13-15",[]],["text/13-15",[]],["component/13-15",[]],["title/13-16",[91,16.872,625,35.814,920,38.749,921,43.027]],["name/13-16",[]],["text/13-16",[]],["component/13-16",[]],["title/13",[91,21.641,715,47.675]],["name/13",[91,0.186,715,0.411]],["text/13",[3,1.67,4,1.975,6,0.26,10,0.323,13,0.772,17,0.368,24,0.736,27,1.116,31,0.706,39,0.384,49,0.603,51,0.343,53,2.902,57,1.771,58,0.24,66,0.384,71,0.384,75,0.403,76,1.062,77,0.384,78,3.195,81,4.52,83,1.754,86,0.426,87,1.939,90,0.658,91,3.236,92,1.735,94,4.461,96,0.68,100,0.368,105,0.293,106,0.736,110,3.62,111,2.165,113,1.854,115,0.403,116,0.817,119,0.458,121,2.699,124,1.939,125,2.165,126,3.259,127,3.474,128,3.431,130,2.898,131,1.846,132,2.049,134,2.64,135,1.344,137,1.991,140,1.898,141,1.67,142,0.893,143,1.952,149,1.645,152,1.28,153,1.178,154,0.403,155,1.766,156,0.323,158,0.893,161,1.427,165,1.179,166,2.311,168,0.332,169,0.893,170,1.088,171,3.103,172,1.123,175,0.323,178,0.355,179,0.87,193,0.817,194,0.315,198,1.146,199,0.293,201,0.323,214,0.355,215,0.426,216,0.588,228,0.27,230,0.332,232,0.323,233,0.55,237,1.71,239,1.251,243,0.332,244,1.344,248,1.639,249,1.846,259,0.706,266,1.361,267,0.736,268,1.311,269,1.179,270,0.68,273,0.403,275,0.706,276,0.98,280,0.919,281,2.976,282,0.87,284,0.919,285,0.315,289,0.293,290,1.266,292,0.384,297,0.403,298,0.706,300,0.426,301,0.384,308,0.343,309,2.786,310,0.62,313,1.017,317,0.772,321,0.919,324,0.403,325,0.817,327,1.311,332,0.355,334,0.878,335,1.216,336,0.98,341,0.426,343,1.572,350,0.658,351,0.384,356,1.72,360,0.332,364,0.355,367,1.311,368,0.355,369,1.311,370,1.113,371,0.893,372,0.458,373,1.116,379,0.575,383,0.343,384,0.948,392,0.368,394,0.603,397,0.343,399,0.293,400,0.658,401,1.38,403,0.848,406,0.98,411,1.216,412,1.805,416,0.68,417,1.71,418,0.403,420,0.384,422,0.426,427,0.458,435,0.772,437,0.384,459,0.332,464,1.061,465,0.658,483,0.893,489,0.403,500,0.3,506,0.343,507,0.426,508,0.332,515,0.323,522,0.458,523,0.323,524,0.736,525,0.368,535,0.736,536,1.251,537,0.384,559,0.343,560,1.258,561,0.384,562,1.696,563,1.224,564,0.658,569,1.088,571,1.258,572,0.403,575,0.265,576,0.403,582,0.68,583,1.146,584,0.403,585,0.343,595,0.562,601,0.384,610,0.384,619,0.199,644,0.638,653,0.355,658,0.81,659,0.792,665,0.68,667,0.638,669,0.403,671,0.948,673,0.368,674,0.817,676,1.89,677,1.801,678,0.323,680,0.87,681,1.305,683,0.343,684,0.98,685,0.368,687,0.68,689,0.706,694,0.323,695,0.658,696,0.368,697,0.332,709,0.792,711,0.658,715,0.706,718,0.458,732,1.216,747,1.216,764,0.893,767,0.426,770,0.384,771,0.817,773,0.252,775,0.458,779,1.116,782,0.87,785,0.403,788,0.426,789,0.68,791,2.113,794,2.839,798,0.323,799,1.179,802,1.251,806,1.017,807,0.355,813,0.384,816,0.98,820,1.178,824,0.332,829,0.426,840,1.72,843,0.403,847,0.458,848,0.706,849,1.061,857,0.355,859,1.42,861,0.736,863,1.258,865,0.426,866,1.017,867,1.821,869,0.343,870,0.332,871,0.332,872,0.706,880,0.368,881,0.368,885,0.458,886,0.68,887,1.017,888,0.368,902,0.426,908,1.898,918,0.426,920,1.898,921,2.86,922,0.403,936,1.511,937,0.98,939,0.403,941,0.426,946,2.626,951,0.403,953,0.368,954,1.991,962,0.919,971,0.384,975,1.017,979,0.403,984,1.361,988,0.384,990,2.268,993,0.426,994,1.639,996,0.403,1000,0.384,1001,1.017,1010,0.426,1011,0.772,1022,0.426,1028,0.403,1029,1.465,1034,0.817,1044,0.343,1048,0.426,1052,1.265,1077,0.458,1085,0.426,1104,0.706,1109,0.384,1114,0.458,1122,2.049,1130,0.772,1140,0.368,1142,0.384,1145,0.355,1154,0.458,1186,1.511,1201,1.72,1236,3.332,1239,0.368,1245,1.113,1254,0.772,1263,0.403,1265,0.384,1268,0.368,1269,0.403,1278,0.426,1302,1.061,1306,0.355,1311,0.706,1315,0.458,1349,0.706,1352,0.403,1353,0.736,1418,0.403,1420,0.403,1425,1.178,1428,0.403,1434,0.426,1445,1.361,1446,0.68,1447,0.368,1450,0.384,1459,0.403,1465,1.113,1472,1.991,1485,0.403,1489,0.368,1514,0.384,1516,3.627,1531,0.384,1546,0.384,1547,0.817,1550,1.428,1552,0.772,1562,0.403,1563,0.403,1578,2.91,1581,0.403,1594,0.458,1603,1.113,1605,0.458,1606,0.736,1608,0.426,1615,0.817,1624,0.426,1662,0.426,1667,0.878,1678,0.426,1709,0.878,1719,0.878,1721,1.623,1723,1.113,1728,0.458,1734,0.426,1735,0.458,1747,0.772,1751,0.458,1759,0.384,1760,0.426,1776,0.458,1781,0.403,1786,0.458,1788,0.403,1830,0.458,1876,0.458,1891,0.426,1901,0.426,1907,0.878,1908,0.426,1919,1.178,1924,0.878,1927,1.113,1929,1.265,1946,1.991,1977,0.426,1986,0.426,1996,0.458,2036,0.426,2037,0.426,2101,0.458,2104,0.403,2105,0.403,2106,0.458,2149,1.623,2225,0.458,2231,0.878,2236,0.878,2284,0.878,2294,0.458,2304,1.178,2317,0.817,2341,0.426,2351,1.72,2358,0.458,2368,0.817,2546,0.458,2589,1.955,2590,1.898,2592,1.955,2595,0.458,2596,1.265,2597,0.458,2598,1.623,2599,3.839,2602,0.458,2603,1.955,2604,0.505,2605,0.458,2606,0.505,2607,0.505,2608,2.159,2609,1.793,2610,0.505,2611,0.505,2612,0.505,2613,1.397,2614,0.505,2615,0.505,2616,0.458,2617,0.97,2618,0.505,2619,0.505,2620,0.458,2621,0.505,2622,0.505,2623,0.505,2624,0.505,2625,0.505,2626,0.505,2627,3.899,2628,0.458,2629,0.458,2630,0.97,2631,0.505,2632,0.505,2633,0.505,2634,0.458,2635,0.505,2636,0.505,2637,1.397,2638,0.505,2639,0.505,2640,0.505,2641,2.818,2642,0.505,2643,0.505,2644,0.458,2645,0.505,2646,0.505,2647,0.505,2648,0.505,2649,0.505,2650,0.97,2651,0.505,2652,0.505,2653,0.505,2654,0.505,2655,0.505,2656,0.505,2657,0.505,2658,0.505,2659,0.505,2660,0.458,2661,0.97,2662,0.505,2663,0.505,2664,0.505,2665,0.505,2666,0.97,2667,0.505,2668,0.505,2669,0.505,2670,0.505,2671,0.505,2672,0.505,2673,0.505,2674,0.505,2675,0.505,2676,0.505,2677,0.505,2678,0.505,2679,0.505,2680,0.505,2681,0.505,2682,0.505,2683,0.505,2684,0.458,2685,0.505,2686,0.426,2687,1.397,2688,2.5,2689,0.505,2690,1.397,2691,0.505,2692,0.505,2693,1.397,2694,0.97,2695,0.97,2696,2.82,2697,1.397,2698,0.458,2699,0.426,2700,0.458,2701,0.505,2702,0.505,2703,0.97,2704,0.97,2705,0.505,2706,1.397,2707,0.505,2708,0.505,2709,0.505,2710,0.458,2711,0.505,2712,0.505,2713,0.505,2714,1.793,2715,0.505,2716,0.505,2717,0.505,2718,0.505,2719,0.505,2720,0.505,2721,0.505,2722,0.505,2723,0.505,2724,0.505,2725,0.505,2726,0.505,2727,0.505,2728,0.505,2729,0.505,2730,0.505,2731,0.505,2732,0.505,2733,0.458,2734,0.97,2735,0.505,2736,0.505,2737,0.505,2738,0.505,2739,0.458,2740,0.458,2741,0.505,2742,0.505,2743,0.505,2744,0.505,2745,0.505,2746,0.505,2747,0.505,2748,0.505,2749,0.505,2750,0.458,2751,0.505,2752,0.505,2753,0.505]],["component/13",[615,0.32]],["title/14-1",[0,27.658,57,22.312,2754,57.367]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[57,25.466,1360,59.274]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[4,23.179,872,37.168,1361,46.211,2755,46.211]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14-4",[4,18.994,57,16.269,749,31.752,1112,33.308,1362,37.867,2756,37.867]],["name/14-4",[]],["text/14-4",[]],["component/14-4",[]],["title/14-5",[4,23.179,57,19.854,298,37.168,2757,51.046]],["name/14-5",[]],["text/14-5",[]],["component/14-5",[]],["title/14-6",[4,17.421,57,14.921,81,21.753,135,23.876,802,22.227,1122,25.235,2758,34.731]],["name/14-6",[]],["text/14-6",[]],["component/14-6",[]],["title/14-7",[57,19.854,665,35.814,709,28.944,2759,46.211]],["name/14-7",[]],["text/14-7",[]],["component/14-7",[]],["title/14-8",[57,22.312,202,38.918,2760,57.367]],["name/14-8",[]],["text/14-8",[]],["component/14-8",[]],["title/14-9",[57,14.921,58,18.212,327,23.283,475,30.55,595,22.227,886,26.916,2761,38.364]],["name/14-9",[]],["text/14-9",[]],["component/14-9",[]],["title/14-10",[2,24.232,57,19.854,313,28.944,879,43.027]],["name/14-10",[]],["text/14-10",[]],["component/14-10",[]],["title/14-11",[618,45.938,1697,52.139]],["name/14-11",[]],["text/14-11",[]],["component/14-11",[]],["title/14-12",[114,41.771,232,36.67,620,40.249]],["name/14-12",[]],["text/14-12",[]],["component/14-12",[]],["title/14-13",[1158,52.139,2762,59.274]],["name/14-13",[]],["text/14-13",[]],["component/14-13",[]],["title/14-14",[1160,55.19,1700,55.19]],["name/14-14",[]],["text/14-14",[]],["component/14-14",[]],["title/14-15",[6,29.554,57,22.312,58,27.233]],["name/14-15",[]],["text/14-15",[]],["component/14-15",[]],["title/14-16",[8,33.577,57,19.854,58,24.232,313,28.944]],["name/14-16",[]],["text/14-16",[]],["component/14-16",[]],["title/14-17",[57,17.883,58,21.827,63,29.391,64,33.479,621,31.192]],["name/14-17",[]],["text/14-17",[]],["component/14-17",[]],["title/14-18",[57,17.883,58,21.827,61,31.192,63,29.391,815,36.614]],["name/14-18",[]],["text/14-18",[]],["component/14-18",[]],["title/14-19",[817,55.19,2763,59.274]],["name/14-19",[]],["text/14-19",[]],["component/14-19",[]],["title/14-20",[661,52.139,821,55.19]],["name/14-20",[]],["text/14-20",[]],["component/14-20",[]],["title/14-21",[57,19.854,145,35.814,1804,46.211,2036,43.027]],["name/14-21",[]],["text/14-21",[]],["component/14-21",[]],["title/14-22",[11,24.563,57,17.883,58,21.827,105,26.639,2764,41.625]],["name/14-22",[]],["text/14-22",[]],["component/14-22",[]],["title/14-23",[14,44.418,616,38.802]],["name/14-23",[]],["text/14-23",[]],["component/14-23",[]],["title/14-24",[16,34.629,57,19.854,58,24.232,1211,38.749]],["name/14-24",[]],["text/14-24",[]],["component/14-24",[]],["title/14-25",[19,36.614,57,17.883,58,21.827,61,31.192,1310,36.614]],["name/14-25",[]],["text/14-25",[]],["component/14-25",[]],["title/14-26",[21,28.213,57,13.78,58,16.819,132,23.305,142,22.648,595,20.527,1025,26.895,2765,32.074]],["name/14-26",[]],["text/14-26",[]],["component/14-26",[]],["title/14-27",[4,26.05,23,48.355,977,45.682]],["name/14-27",[]],["text/14-27",[]],["component/14-27",[]],["title/14-28",[4,23.179,42,43.027,108,34.629,802,29.575]],["name/14-28",[]],["text/14-28",[]],["component/14-28",[]],["title/14-29",[44,41.625,57,17.883,58,21.827,105,26.639,2764,41.625]],["name/14-29",[]],["text/14-29",[]],["component/14-29",[]],["title/14-30",[55,51.934,57,22.312,2766,51.934]],["name/14-30",[]],["text/14-30",[]],["component/14-30",[]],["title/14-31",[4,23.179,57,19.854,2767,51.046,2768,46.211]],["name/14-31",[]],["text/14-31",[]],["component/14-31",[]],["title/14-32",[4,20.879,57,17.883,150,33.479,228,24.563,1447,33.479]],["name/14-32",[]],["text/14-32",[]],["component/14-32",[]],["title/14-33",[53,21.179,57,16.269,58,19.856,171,21.179,623,30.456,2684,37.867]],["name/14-33",[]],["text/14-33",[]],["component/14-33",[]],["title/14-34",[4,24.778,57,13.78,133,28.213,495,26.895,562,24.036,624,26.895,962,23.305]],["name/14-34",[]],["text/14-34",[]],["component/14-34",[]],["title/14-35",[45,23.305,91,11.71,128,15.862,916,29.864,2769,35.43,2770,32.074,2771,32.074,2772,35.43]],["name/14-35",[]],["text/14-35",[]],["component/14-35",[]],["title/14",[57,25.466,58,31.082]],["name/14",[57,0.219,58,0.268]],["text/14",[0,1.343,2,0.153,3,0.861,4,4.046,5,1.154,10,0.762,17,0.235,20,0.2,24,0.244,27,0.904,29,0.425,31,1.239,32,1.103,45,0.603,48,0.413,49,1.059,51,0.425,53,3.169,54,0.529,57,3.873,58,3.308,61,1.89,62,0.271,63,1.655,64,0.667,65,0.499,66,1.103,68,0.499,76,3.084,77,0.244,78,3.927,81,5.129,82,1.671,83,0.226,87,1.482,88,1.059,91,1.449,92,0.808,93,1.424,94,1.975,95,0.568,96,0.44,97,0.235,100,0.457,102,0.808,105,1.254,106,0.476,108,0.622,109,1.315,110,3.492,111,2.17,112,1.157,113,2.077,114,2.029,115,0.499,121,0.706,123,0.256,124,0.2,125,1.283,126,1.303,127,0.52,128,2.131,129,0.586,130,1.019,131,1.008,132,0.956,133,3.04,134,0.929,135,2.809,136,1.078,137,0.206,139,0.292,140,0.904,141,2.17,142,1.088,143,0.636,144,0.762,145,0.226,149,0.212,150,1.058,152,2.075,153,0.529,155,0.675,156,1.088,158,0.929,159,0.218,161,1.507,165,0.413,166,2.075,168,0.212,169,1.239,170,1.033,171,1.507,172,0.862,174,0.292,175,0.586,176,0.226,178,1.019,179,0.39,182,0.226,193,0.271,198,0.206,199,0.531,201,0.401,202,0.622,207,0.226,208,0.218,210,0.244,214,0.643,216,0.556,228,0.172,230,0.212,231,0.206,232,0.206,233,0.183,234,0.212,237,0.556,239,0.187,240,0.413,243,0.413,244,0.2,246,0.435,249,2.262,256,0.529,259,0.457,260,0.956,264,0.244,267,0.244,268,0.882,269,1.119,270,0.226,275,0.457,279,0.271,280,0.212,281,2.855,282,1.482,284,1.424,285,0.741,287,0.256,289,0.187,290,2.009,295,0.643,298,3.864,301,0.476,303,0.271,308,0.218,309,1.738,310,0.401,311,0.622,312,0.773,313,1.468,317,0.73,319,0.235,321,0.956,324,0.256,327,1.917,335,0.622,336,0.226,343,0.457,350,0.622,356,0.499,360,1.567,364,0.226,365,0.457,367,0.556,368,0.44,369,2.125,371,2.019,373,1.059,378,0.381,379,2.075,380,0.271,382,0.949,384,0.808,385,0.235,392,1.412,397,0.622,399,0.986,400,0.425,403,0.723,404,0.529,405,0.271,406,0.226,410,0.244,412,1.38,416,1.671,417,0.195,423,0.226,435,0.256,437,0.904,441,0.476,442,0.457,443,0.271,445,0.83,452,2.53,459,0.212,463,0.256,465,1.154,475,1.355,480,0.949,483,0.762,489,0.256,490,0.226,495,0.476,500,0.543,503,1.634,506,0.425,508,0.413,509,0.206,511,0.457,514,0.292,515,0.929,516,0.476,523,0.401,525,0.235,535,0.244,536,0.69,538,0.206,542,0.529,554,0.235,559,0.425,560,0.44,562,0.218,563,1.985,564,0.808,569,0.723,571,0.44,575,1.249,577,0.762,579,1.059,582,0.226,591,0.271,594,0.476,595,0.986,598,0.529,601,0.696,617,0.372,619,0.763,639,0.235,653,0.226,658,0.187,659,0.183,665,0.836,667,0.784,671,0.985,672,0.667,676,0.882,678,0.401,680,1.207,683,0.808,684,0.226,685,0.867,686,2.192,687,1.019,688,2.196,694,0.206,695,0.622,696,0.867,697,0.603,700,0.2,707,0.568,709,0.356,711,0.425,724,1.275,727,0.457,730,0.212,732,0.218,734,0.244,740,0.292,744,0.271,747,0.622,748,0.256,749,2.259,751,0.667,755,0.476,756,0.568,760,0.271,764,0.206,765,0.226,770,0.696,772,0.69,779,0.2,782,0.2,784,0.292,785,0.949,787,1.004,789,0.226,790,0.218,791,0.425,798,0.586,799,0.956,800,0.457,802,2.89,803,0.499,806,0.235,808,0.529,810,0.586,811,0.212,812,0.256,816,0.44,824,0.603,836,0.499,840,0.256,845,0.292,846,0.499,850,0.457,851,0.218,856,0.271,857,0.226,859,0.784,863,0.226,870,0.212,871,0.212,872,2.78,879,0.271,880,0.867,882,0.235,884,1.469,886,0.643,887,0.235,888,0.235,890,0.271,896,0.292,901,0.44,903,0.773,904,1.004,907,0.256,916,0.271,922,0.256,923,0.271,927,0.256,929,0.256,941,0.271,951,0.499,953,0.235,962,1.567,966,0.949,967,0.256,969,0.292,970,0.529,971,0.476,977,0.256,978,0.44,979,0.499,984,0.696,988,0.476,990,0.457,994,0.244,1000,0.244,1001,0.235,1011,0.256,1020,0.256,1025,0.696,1029,0.622,1035,0.256,1038,0.568,1044,0.622,1046,0.292,1051,0.867,1067,0.244,1072,0.244,1078,0.235,1087,0.244,1088,0.271,1104,0.867,1109,0.476,1111,1.634,1112,1.355,1115,0.244,1119,0.271,1122,4.117,1134,0.529,1142,1.292,1155,0.773,1164,0.271,1165,1.004,1179,0.476,1182,0.73,1188,0.292,1195,0.256,1196,0.244,1200,0.235,1204,0.256,1211,1.103,1227,0.457,1228,0.271,1231,0.568,1234,0.271,1235,0.256,1239,0.867,1242,0.271,1245,0.499,1246,0.292,1253,0.457,1254,0.256,1255,0.256,1263,0.256,1266,0.271,1267,0.292,1268,0.457,1269,0.256,1276,0.292,1277,0.499,1291,0.256,1292,0.568,1296,0.271,1302,0.476,1306,0.643,1310,0.499,1311,0.457,1331,0.292,1333,0.256,1349,0.867,1352,0.256,1353,0.244,1379,0.256,1406,0.476,1416,0.271,1418,0.499,1420,0.256,1421,0.568,1423,0.568,1434,0.271,1440,0.292,1445,0.476,1446,0.44,1447,1.577,1450,0.244,1456,1.004,1469,0.292,1472,0.73,1477,0.568,1485,0.73,1488,0.292,1489,0.235,1490,0.292,1497,0.696,1514,0.244,1531,0.696,1545,0.292,1546,0.244,1550,0.949,1600,0.271,1602,0.271,1603,1.544,1606,1.292,1608,0.271,1609,0.271,1612,0.271,1615,0.271,1624,0.271,1630,0.292,1631,1.004,1644,0.568,1653,0.256,1663,0.292,1668,0.292,1675,0.271,1677,1.078,1685,1.96,1690,0.292,1697,1.157,1700,1.004,1704,0.292,1734,0.271,1739,0.256,1778,0.271,1784,0.256,1787,0.568,1788,0.256,1797,0.244,1817,0.529,1821,0.773,1827,0.773,1828,0.292,1866,0.271,1881,0.568,1887,0.292,1890,0.83,1901,0.529,1902,0.292,1904,0.529,1912,0.271,1921,0.292,1926,0.83,1927,0.256,1930,0.292,1933,0.292,1945,0.271,1946,0.256,1952,0.271,1953,0.292,1954,0.292,1955,0.256,1977,0.271,1986,0.271,1999,0.292,2003,0.83,2004,0.83,2006,0.292,2066,0.292,2075,0.292,2076,1.224,2077,2.007,2078,0.271,2079,0.292,2080,0.529,2087,0.292,2104,0.499,2105,0.256,2158,0.83,2163,0.271,2165,0.292,2176,0.292,2198,0.83,2202,0.568,2252,0.292,2261,1.078,2267,0.271,2271,0.292,2273,0.292,2304,0.271,2306,0.292,2308,0.568,2311,0.292,2314,0.529,2317,0.271,2323,0.83,2336,0.292,2337,0.292,2339,0.292,2341,0.773,2344,0.529,2350,0.292,2365,0.292,2377,0.292,2413,0.292,2456,0.292,2503,0.292,2590,0.244,2605,0.292,2616,0.292,2620,0.292,2628,0.292,2634,0.292,2644,0.292,2660,0.292,2686,0.773,2696,1.078,2699,0.271,2700,0.292,2710,0.292,2733,0.292,2739,0.292,2740,0.292,2750,0.292,2755,0.83,2756,0.83,2758,0.292,2759,0.292,2762,1.078,2763,0.568,2765,0.568,2766,2.523,2768,1.078,2770,1.96,2771,0.292,2773,0.322,2774,0.322,2775,0.322,2776,0.322,2777,0.322,2778,0.322,2779,0.627,2780,0.322,2781,0.627,2782,0.627,2783,0.322,2784,0.322,2785,0.322,2786,0.322,2787,0.322,2788,1.191,2789,0.322,2790,0.322,2791,0.322,2792,0.322,2793,0.322,2794,0.322,2795,0.322,2796,1.191,2797,0.627,2798,0.322,2799,0.322,2800,0.322,2801,0.322,2802,0.322,2803,1.191,2804,0.322,2805,0.322,2806,0.322,2807,0.322,2808,0.322,2809,0.322,2810,0.322,2811,0.322,2812,0.322,2813,0.322,2814,0.568,2815,0.322,2816,0.322,2817,0.916,2818,0.627,2819,0.916,2820,0.322,2821,0.627,2822,0.322,2823,0.627,2824,0.322,2825,0.322,2826,0.322,2827,0.322,2828,0.322,2829,0.322,2830,0.627,2831,0.627,2832,0.322,2833,0.322,2834,0.322,2835,0.322,2836,0.322,2837,0.322,2838,0.627,2839,0.322,2840,0.322,2841,0.322,2842,0.322,2843,0.322,2844,0.322,2845,0.322,2846,0.322,2847,0.322,2848,0.322,2849,0.292,2850,0.627,2851,0.322,2852,1.453,2853,0.322,2854,0.916,2855,0.322,2856,0.322,2857,0.322,2858,0.627,2859,0.322,2860,0.322,2861,0.322,2862,0.322,2863,0.322,2864,0.322,2865,0.322,2866,0.322,2867,0.322,2868,0.322,2869,0.322,2870,0.322,2871,0.322,2872,0.322,2873,0.322,2874,0.322,2875,0.322,2876,0.916,2877,1.191,2878,0.627,2879,0.568,2880,0.627,2881,1.078,2882,0.568,2883,0.627,2884,0.627,2885,0.627,2886,1.191,2887,0.627,2888,0.322,2889,0.322,2890,0.322,2891,0.322,2892,0.322,2893,0.322,2894,0.627,2895,0.322,2896,0.322,2897,0.322,2898,0.322,2899,0.322,2900,0.322,2901,0.627,2902,0.627,2903,0.322,2904,1.191,2905,0.627,2906,0.627,2907,0.627,2908,0.627,2909,0.322,2910,0.627,2911,0.627,2912,0.627,2913,0.322,2914,0.627,2915,0.627,2916,0.627,2917,0.322,2918,0.322,2919,0.322,2920,0.322,2921,0.322,2922,0.322,2923,1.191,2924,0.322,2925,0.322,2926,0.322,2927,0.322,2928,0.627,2929,0.627,2930,0.627,2931,0.322,2932,0.322,2933,0.322,2934,0.916,2935,0.322,2936,0.322,2937,0.322,2938,0.322,2939,0.322,2940,0.322,2941,0.322,2942,0.322,2943,0.322,2944,0.322,2945,0.322,2946,0.322,2947,0.322,2948,0.627,2949,0.322,2950,0.322,2951,0.322,2952,0.322,2953,0.322,2954,0.627,2955,0.322,2956,0.627,2957,0.322,2958,0.627,2959,0.322,2960,0.322,2961,0.322,2962,0.322,2963,0.322,2964,0.322,2965,0.322,2966,0.322,2967,0.322,2968,0.322,2969,0.322,2970,0.322,2971,0.627,2972,1.702,2973,0.322,2974,0.322,2975,0.322,2976,0.322,2977,0.322,2978,1.191,2979,0.322,2980,0.322,2981,2.165,2982,0.627,2983,0.322,2984,0.322,2985,1.453,2986,0.322,2987,0.322,2988,0.322,2989,0.916,2990,0.627,2991,0.322,2992,0.627,2993,0.322,2994,0.322,2995,0.322,2996,0.322,2997,0.322,2998,0.322,2999,0.916,3000,0.322,3001,0.322,3002,0.627,3003,0.627,3004,0.627,3005,0.322,3006,0.322,3007,0.322,3008,0.322,3009,0.322,3010,0.322,3011,0.322,3012,0.322,3013,0.322,3014,0.322,3015,0.627,3016,0.322,3017,0.322,3018,0.322,3019,0.322,3020,0.322,3021,0.322,3022,0.322,3023,0.322,3024,0.322,3025,0.916,3026,0.916,3027,0.322,3028,0.627,3029,0.322,3030,0.627,3031,0.322,3032,0.627,3033,0.322,3034,0.322,3035,0.322,3036,0.627,3037,0.322,3038,0.322,3039,0.322,3040,0.322,3041,0.322,3042,0.322,3043,0.322,3044,0.322]],["component/14",[615,0.32]],["title/15-1",[0,31.567,1,45.938]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[2,16.819,92,25.904,205,28.213,331,28.213,851,24.036,854,32.074,855,26.895]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15-3",[6,26.298,92,24.232,851,34.629,995,38.749]],["name/15-3",[]],["text/15-3",[]],["component/15-3",[]],["title/15-4",[11,30.646,233,32.528,3045,48.355]],["name/15-4",[]],["text/15-4",[]],["component/15-4",[]],["title/15-5",[228,27.269,394,31.769,1739,40.649,3045,43.027]],["name/15-5",[]],["text/15-5",[]],["component/15-5",[]],["title/15",[92,31.082,851,44.418]],["name/15",[92,0.268,851,0.383]],["text/15",[4,0.451,17,0.724,45,0.654,51,0.674,53,1.885,57,0.387,58,0.871,60,0.724,66,0.755,76,1.087,78,5.179,81,5.091,87,3.703,91,2.874,92,4.739,94,3.948,97,0.724,105,0.576,107,0.792,108,1.245,110,3.447,111,1.883,113,3.297,124,1.59,125,4.624,126,0.858,127,0.564,128,2.779,131,1.087,132,1.207,134,1.173,141,1.514,142,0.635,144,0.635,145,1.792,149,0.654,152,1.087,155,2.111,158,2.687,159,0.674,161,3.656,166,2.971,169,0.635,171,0.929,172,0.396,175,0.635,176,1.287,179,1.142,201,1.633,202,1.245,205,2.965,207,2.612,210,0.755,213,1.546,214,0.697,229,0.755,231,0.635,233,4.27,236,2.38,237,0.603,243,0.654,244,0.619,249,2.206,250,5.923,260,0.654,268,1.113,269,2.765,275,0.724,281,1.194,282,0.619,285,0.619,289,1.063,290,1.885,291,2.314,296,1.393,309,1.509,310,0.635,313,1.802,331,3.347,335,0.674,366,0.838,369,1.113,373,0.619,379,2.491,381,4.515,383,2.526,394,1.978,400,0.674,401,0.635,412,0.576,416,1.287,421,0.9,439,0.9,442,0.724,463,0.792,481,0.792,500,0.589,503,0.838,506,2.526,508,1.207,523,0.635,525,0.724,536,0.576,563,1.04,569,2.551,572,0.792,574,1.461,575,0.962,577,1.173,578,1.546,579,1.142,594,0.755,595,1.063,602,2.412,670,1.546,676,0.603,678,0.635,680,0.619,681,1.336,683,1.245,688,0.98,695,0.674,743,0.838,747,0.674,764,1.633,765,0.697,782,1.142,790,0.674,798,0.635,816,0.697,836,0.792,837,3.806,851,6.387,861,3.191,866,3.9,867,4.333,876,1.546,886,2.23,887,4.333,888,0.724,908,0.755,918,1.546,995,2.412,1013,0.792,1020,0.792,1031,0.792,1045,0.9,1072,0.755,1078,0.724,1087,0.755,1117,0.792,1139,0.9,1145,0.697,1179,0.755,1194,1.546,1226,1.336,1227,0.724,1236,2.23,1239,1.336,1253,0.724,1306,0.697,1311,0.724,1349,0.724,1427,1.661,1428,1.461,1446,1.792,1459,2.965,1497,0.755,1514,0.755,1519,0.9,1534,1.661,1536,0.9,1537,0.9,1538,0.9,1540,0.9,1546,0.755,1547,2.153,1562,1.461,1723,2.034,1739,2.53,1759,0.755,1781,3.347,1904,0.838,1908,0.838,1980,0.838,2027,0.9,2043,0.9,2044,2.877,2054,1.661,2055,1.661,2057,3.806,2109,1.661,2329,0.9,2368,0.838,2420,3.37,2629,1.661,2686,0.838,2698,0.9,2699,2.679,2814,1.661,2849,0.9,2879,0.9,2881,0.9,2882,0.9,3045,4.226,3046,3.178,3047,1.835,3048,0.994,3049,0.994,3050,0.994,3051,0.994,3052,0.994,3053,2.554,3054,0.994,3055,0.994,3056,0.994,3057,3.178,3058,0.994,3059,0.994,3060,0.994,3061,0.994,3062,0.994,3063,0.994,3064,0.994,3065,0.994,3066,0.994,3067,0.994,3068,1.835,3069,0.994,3070,1.835,3071,0.994,3072,0.994,3073,0.994,3074,1.835,3075,2.554,3076,2.554,3077,0.994,3078,0.994,3079,3.723,3080,0.994,3081,0.994,3082,0.994,3083,3.178,3084,2.554,3085,2.554,3086,1.835,3087,0.994,3088,1.835,3089,0.994,3090,0.994,3091,2.554,3092,1.835,3093,0.994,3094,0.994,3095,0.994,3096,0.994,3097,0.994,3098,0.994,3099,0.994,3100,0.994,3101,0.994,3102,0.994,3103,0.994,3104,0.994,3105,0.994,3106,0.994,3107,0.994,3108,0.994,3109,0.994,3110,0.994,3111,1.835,3112,0.994,3113,0.994,3114,1.835,3115,0.994]],["component/15",[615,0.32]]],"invertedIndex":[["",{"_index":81,"title":{"10-24":{},"14-6":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["0",{"_index":82,"title":{},"name":{},"text":{"1":{},"2":{},"6":{},"7":{},"8":{},"10":{},"14":{}},"component":{}}],["0.0",{"_index":1960,"title":{},"name":{},"text":{"10":{}},"component":{}}],["0.00000005",{"_index":1328,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0.01",{"_index":2822,"title":{},"name":{},"text":{"14":{}},"component":{}}],["0.02",{"_index":1292,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["0.03",{"_index":2821,"title":{},"name":{},"text":{"14":{}},"component":{}}],["0.05",{"_index":2815,"title":{},"name":{},"text":{"14":{}},"component":{}}],["0.07",{"_index":2827,"title":{},"name":{},"text":{"14":{}},"component":{}}],["0/0/0]hard",{"_index":1701,"title":{},"name":{},"text":{"8":{}},"component":{}}],["0/5",{"_index":1635,"title":{},"name":{},"text":{"8":{}},"component":{}}],["000",{"_index":795,"title":{},"name":{},"text":{"2":{},"7":{}},"component":{}}],["012",{"_index":2841,"title":{},"name":{},"text":{"14":{}},"component":{}}],["07:55",{"_index":2682,"title":{},"name":{},"text":{"13":{}},"component":{}}],["07:56",{"_index":2679,"title":{},"name":{},"text":{"13":{}},"component":{}}],["08:00",{"_index":1915,"title":{},"name":{},"text":{"10":{}},"component":{}}],["08:00:00",{"_index":911,"title":{},"name":{},"text":{"3":{}},"component":{}}],["08:02",{"_index":2680,"title":{},"name":{},"text":{"13":{}},"component":{}}],["08:30",{"_index":2583,"title":{},"name":{},"text":{"12":{}},"component":{}}],["08:45",{"_index":2681,"title":{},"name":{},"text":{"13":{}},"component":{}}],["09:00:00",{"_index":913,"title":{},"name":{},"text":{"3":{}},"component":{}}],["09:30",{"_index":2584,"title":{},"name":{},"text":{"12":{}},"component":{}}],["0hard",{"_index":1698,"title":{},"name":{},"text":{"8":{},"12":{}},"component":{}}],["0hard/100soft",{"_index":1683,"title":{},"name":{},"text":{"8":{}},"component":{}}],["1",{"_index":0,"title":{"1-1":{},"2-1":{},"3-1":{},"4-1":{},"5-1":{},"6-1":{},"7-1":{},"8-1":{},"9-1":{},"10-1":{},"11-1":{},"12-1":{},"13-1":{},"14-1":{},"15-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["1,000,000",{"_index":2328,"title":{},"name":{},"text":{"11":{}},"component":{}}],["1.0",{"_index":1507,"title":{},"name":{},"text":{"7":{},"10":{}},"component":{}}],["1.1",{"_index":1360,"title":{"7-2":{},"14-2":{}},"name":{},"text":{},"component":{}}],["1.2",{"_index":1361,"title":{"7-3":{},"14-3":{}},"name":{},"text":{},"component":{}}],["1.3",{"_index":1362,"title":{"7-4":{},"14-4":{}},"name":{},"text":{},"component":{}}],["1.4",{"_index":2757,"title":{"14-5":{}},"name":{},"text":{},"component":{}}],["1.5",{"_index":2758,"title":{"14-6":{}},"name":{},"text":{"14":{}},"component":{}}],["1.6",{"_index":2759,"title":{"14-7":{}},"name":{},"text":{"14":{}},"component":{}}],["1.7",{"_index":2760,"title":{"14-8":{}},"name":{},"text":{},"component":{}}],["1.8",{"_index":2761,"title":{"14-9":{}},"name":{},"text":{},"component":{}}],["1/5",{"_index":1639,"title":{},"name":{},"text":{"8":{}},"component":{}}],["10",{"_index":644,"title":{"2-28":{},"6-33":{},"8-19":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"13":{}},"component":{}}],["10.1",{"_index":647,"title":{"2-29":{}},"name":{},"text":{},"component":{}}],["10.2",{"_index":648,"title":{"2-30":{}},"name":{},"text":{},"component":{}}],["100",{"_index":1556,"title":{},"name":{},"text":{"7":{},"8":{}},"component":{}}],["1000",{"_index":1254,"title":{},"name":{},"text":{"6":{},"7":{},"13":{},"14":{}},"component":{}}],["100000",{"_index":1706,"title":{},"name":{},"text":{"8":{}},"component":{}}],["1000000",{"_index":2799,"title":{},"name":{},"text":{"14":{}},"component":{}}],["10000000",{"_index":1993,"title":{},"name":{},"text":{"10":{}},"component":{}}],["100soft",{"_index":1691,"title":{},"name":{},"text":{"8":{}},"component":{}}],["10:00",{"_index":1004,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10:15",{"_index":961,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10:30",{"_index":2585,"title":{},"name":{},"text":{"12":{}},"component":{}}],["10^115",{"_index":1592,"title":{},"name":{},"text":{"8":{}},"component":{}}],["10^80",{"_index":1598,"title":{},"name":{},"text":{"8":{},"11":{}},"component":{}}],["10soft",{"_index":3011,"title":{},"name":{},"text":{"14":{}},"component":{}}],["10th",{"_index":2557,"title":{},"name":{},"text":{"12":{}},"component":{}}],["11",{"_index":649,"title":{"2-31":{},"8-20":{}},"name":{},"text":{"5":{},"11":{}},"component":{}}],["11.1",{"_index":651,"title":{"2-32":{}},"name":{},"text":{},"component":{}}],["11.2",{"_index":652,"title":{"2-33":{}},"name":{},"text":{},"component":{}}],["11:15",{"_index":963,"title":{},"name":{},"text":{"3":{}},"component":{}}],["12",{"_index":653,"title":{"2-34":{},"8-21":{}},"name":{},"text":{"6":{},"7":{},"10":{},"13":{},"14":{}},"component":{}}],["12.1",{"_index":655,"title":{"2-35":{}},"name":{},"text":{},"component":{}}],["12.2",{"_index":656,"title":{"2-36":{}},"name":{},"text":{},"component":{}}],["12/12",{"_index":1208,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["120",{"_index":933,"title":{},"name":{},"text":{"3":{}},"component":{}}],["123",{"_index":2830,"title":{},"name":{},"text":{"14":{}},"component":{}}],["123hard",{"_index":2831,"title":{},"name":{},"text":{"14":{}},"component":{}}],["13",{"_index":657,"title":{"2-37":{},"8-22":{}},"name":{},"text":{},"component":{}}],["13.1",{"_index":660,"title":{"2-38":{},"8-23":{}},"name":{},"text":{},"component":{}}],["13.2",{"_index":663,"title":{"2-39":{},"8-24":{}},"name":{},"text":{},"component":{}}],["13.3",{"_index":664,"title":{"2-40":{}},"name":{},"text":{},"component":{}}],["13:30",{"_index":2586,"title":{},"name":{},"text":{"12":{}},"component":{}}],["14",{"_index":1014,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["14:30",{"_index":2587,"title":{},"name":{},"text":{"12":{}},"component":{}}],["15",{"_index":928,"title":{},"name":{},"text":{"3":{}},"component":{}}],["150",{"_index":1674,"title":{},"name":{},"text":{"8":{}},"component":{}}],["16",{"_index":1219,"title":{},"name":{},"text":{"6":{}},"component":{}}],["16777216",{"_index":1588,"title":{},"name":{},"text":{"8":{}},"component":{}}],["18446744073709551616",{"_index":1221,"title":{},"name":{},"text":{"6":{}},"component":{}}],["19",{"_index":2188,"title":{},"name":{},"text":{"10":{}},"component":{}}],["1989",{"_index":1287,"title":{},"name":{},"text":{"6":{}},"component":{}}],["1990",{"_index":1288,"title":{},"name":{},"text":{"6":{}},"component":{}}],["1hard",{"_index":1685,"title":{},"name":{},"text":{"8":{},"14":{}},"component":{}}],["1hard/*soft",{"_index":1694,"title":{},"name":{},"text":{"8":{}},"component":{}}],["1hard/0soft",{"_index":1688,"title":{},"name":{},"text":{"8":{}},"component":{}}],["1init/0",{"_index":2186,"title":{},"name":{},"text":{"10":{}},"component":{}}],["1soft",{"_index":2800,"title":{},"name":{},"text":{"14":{}},"component":{}}],["1st",{"_index":2631,"title":{},"name":{},"text":{"13":{}},"component":{}}],["1subsoft",{"_index":2979,"title":{},"name":{},"text":{"14":{}},"component":{}}],["2",{"_index":2,"title":{"1-2":{},"2-2":{},"3-2":{},"4-2":{},"5-2":{},"6-2":{},"7-5":{},"7-15":{},"8-2":{},"10-2":{},"11-2":{},"12-2":{},"13-2":{},"14-10":{},"15-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["2.0",{"_index":1508,"title":{},"name":{},"text":{"7":{},"11":{}},"component":{}}],["2.1",{"_index":618,"title":{"2-3":{},"5-3":{},"6-3":{},"7-6":{},"10-3":{},"11-3":{},"14-11":{}},"name":{},"text":{},"component":{}}],["2.2",{"_index":620,"title":{"2-4":{},"5-4":{},"6-4":{},"7-7":{},"10-4":{},"11-4":{},"14-12":{}},"name":{},"text":{},"component":{}}],["2.3",{"_index":1158,"title":{"6-5":{},"7-8":{},"11-5":{},"14-13":{}},"name":{},"text":{},"component":{}}],["2.4",{"_index":1160,"title":{"6-6":{},"7-9":{},"14-14":{}},"name":{},"text":{},"component":{}}],["2.4.1",{"_index":1162,"title":{"6-7":{},"7-10":{}},"name":{},"text":{},"component":{}}],["2.4.2",{"_index":1163,"title":{"6-8":{},"7-11":{}},"name":{},"text":{},"component":{}}],["2.4.3",{"_index":1368,"title":{"7-12":{}},"name":{},"text":{},"component":{}}],["2.5",{"_index":1369,"title":{"7-14":{}},"name":{},"text":{},"component":{}}],["2.5.1",{"_index":1370,"title":{"7-15":{}},"name":{},"text":{},"component":{}}],["2.5.2",{"_index":1373,"title":{"7-16":{}},"name":{},"text":{},"component":{}}],["2.5.3",{"_index":1375,"title":{"7-17":{}},"name":{},"text":{},"component":{}}],["2/5",{"_index":1638,"title":{},"name":{},"text":{"8":{}},"component":{}}],["20",{"_index":776,"title":{},"name":{},"text":{"2":{},"3":{},"6":{}},"component":{}}],["200",{"_index":792,"title":{},"name":{},"text":{"2":{},"10":{}},"component":{}}],["2012",{"_index":1319,"title":{},"name":{},"text":{"6":{}},"component":{}}],["2013",{"_index":1339,"title":{},"name":{},"text":{"6":{}},"component":{}}],["20soft",{"_index":3004,"title":{},"name":{},"text":{"14":{}},"component":{}}],["212",{"_index":1916,"title":{},"name":{},"text":{"10":{}},"component":{}}],["2147483648soft",{"_index":1695,"title":{},"name":{},"text":{"8":{}},"component":{}}],["22soft",{"_index":3010,"title":{},"name":{},"text":{"14":{}},"component":{}}],["24",{"_index":2189,"title":{},"name":{},"text":{"10":{}},"component":{}}],["240",{"_index":797,"title":{},"name":{},"text":{"2":{}},"component":{}}],["256",{"_index":1218,"title":{},"name":{},"text":{"6":{},"7":{},"8":{}},"component":{}}],["2^32",{"_index":1470,"title":{},"name":{},"text":{"7":{}},"component":{}}],["2hard",{"_index":2474,"title":{},"name":{},"text":{"12":{}},"component":{}}],["2hard/100soft",{"_index":1312,"title":{},"name":{},"text":{"6":{}},"component":{}}],["2init/0",{"_index":2185,"title":{},"name":{},"text":{"10":{}},"component":{}}],["2opt",{"_index":1484,"title":{},"name":{},"text":{"7":{}},"component":{}}],["3",{"_index":6,"title":{"1-3":{},"2-5":{},"3-3":{},"4-3":{},"5-5":{},"6-9":{},"7-18":{},"8-3":{},"10-5":{},"11-6":{},"12-3":{},"13-3":{},"14-15":{},"15-3":{}},"name":{},"text":{"1":{},"2":{},"6":{},"7":{},"10":{},"13":{}},"component":{}}],["3.1",{"_index":8,"title":{"1-4":{},"2-6":{},"3-4":{},"5-6":{},"6-10":{},"7-19":{},"10-6":{},"13-4":{},"14-16":{}},"name":{},"text":{},"component":{}}],["3.2",{"_index":621,"title":{"2-7":{},"3-5":{},"5-7":{},"6-11":{},"7-20":{},"10-7":{},"13-5":{},"14-17":{}},"name":{},"text":{},"component":{}}],["3.3",{"_index":815,"title":{"3-6":{},"6-12":{},"10-8":{},"14-18":{}},"name":{},"text":{},"component":{}}],["3.3.1",{"_index":817,"title":{"3-7":{},"10-9":{},"14-19":{}},"name":{},"text":{},"component":{}}],["3.3.2",{"_index":819,"title":{"3-8":{},"10-10":{}},"name":{},"text":{},"component":{}}],["3.4",{"_index":821,"title":{"3-9":{},"10-11":{},"14-20":{}},"name":{},"text":{},"component":{}}],["3.4.1",{"_index":1792,"title":{"10-12":{}},"name":{},"text":{},"component":{}}],["3.4.2",{"_index":1793,"title":{"10-13":{}},"name":{},"text":{},"component":{}}],["3.4.3",{"_index":1794,"title":{"10-14":{}},"name":{},"text":{},"component":{}}],["3.4.4",{"_index":1795,"title":{"10-15":{}},"name":{},"text":{},"component":{}}],["3.4.5",{"_index":1796,"title":{"10-16":{}},"name":{},"text":{},"component":{}}],["3.4.6",{"_index":1799,"title":{"10-22":{}},"name":{},"text":{},"component":{}}],["3.4.7",{"_index":1800,"title":{"10-23":{}},"name":{},"text":{},"component":{}}],["3.4.8",{"_index":1801,"title":{"10-24":{}},"name":{},"text":{},"component":{}}],["3.5",{"_index":1804,"title":{"10-25":{},"14-21":{}},"name":{},"text":{},"component":{}}],["3.5.1",{"_index":1805,"title":{"10-26":{}},"name":{},"text":{},"component":{}}],["3.5.2",{"_index":1806,"title":{"10-27":{}},"name":{},"text":{},"component":{}}],["3.5.3",{"_index":1807,"title":{"10-28":{}},"name":{},"text":{},"component":{}}],["3.5.4",{"_index":1809,"title":{"10-29":{}},"name":{},"text":{},"component":{}}],["3.5.5",{"_index":1811,"title":{"10-30":{}},"name":{},"text":{},"component":{}}],["3.5.6",{"_index":1813,"title":{"10-32":{}},"name":{},"text":{},"component":{}}],["3.5.7",{"_index":1815,"title":{"10-34":{}},"name":{},"text":{},"component":{}}],["3.9",{"_index":2354,"title":{},"name":{},"text":{"11":{}},"component":{}}],["3/5",{"_index":1640,"title":{},"name":{},"text":{"8":{}},"component":{}}],["30",{"_index":929,"title":{},"name":{},"text":{"3":{},"8":{},"12":{},"14":{}},"component":{}}],["300",{"_index":801,"title":{},"name":{},"text":{"2":{}},"component":{}}],["31",{"_index":1209,"title":{},"name":{},"text":{"6":{}},"component":{}}],["3125",{"_index":1585,"title":{},"name":{},"text":{"8":{}},"component":{}}],["32",{"_index":1469,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["32bit",{"_index":1997,"title":{},"name":{},"text":{"10":{}},"component":{}}],["340soft",{"_index":3001,"title":{},"name":{},"text":{"14":{}},"component":{}}],["345]soft",{"_index":2842,"title":{},"name":{},"text":{"14":{}},"component":{}}],["34soft",{"_index":2994,"title":{},"name":{},"text":{"14":{}},"component":{}}],["37",{"_index":1216,"title":{},"name":{},"text":{"6":{}},"component":{}}],["3init/0",{"_index":2184,"title":{},"name":{},"text":{"10":{}},"component":{}}],["3soft",{"_index":2475,"title":{},"name":{},"text":{"12":{}},"component":{}}],["4",{"_index":11,"title":{"1-5":{},"2-8":{},"3-10":{},"5-8":{},"6-13":{},"7-21":{},"8-4":{},"10-35":{},"11-7":{},"12-4":{},"13-6":{},"14-22":{},"15-4":{}},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"10":{}},"component":{}}],["4.1",{"_index":14,"title":{"1-6":{},"2-9":{},"6-14":{},"10-36":{},"11-8":{},"12-5":{},"13-7":{},"14-23":{}},"name":{},"text":{},"component":{}}],["4.1.1",{"_index":2591,"title":{"13-8":{}},"name":{},"text":{},"component":{}}],["4.1.2",{"_index":2593,"title":{"13-9":{}},"name":{},"text":{},"component":{}}],["4.2",{"_index":16,"title":{"1-7":{},"2-10":{},"6-15":{},"10-37":{},"11-9":{},"12-6":{},"13-10":{},"14-24":{}},"name":{},"text":{},"component":{}}],["4.3",{"_index":19,"title":{"1-8":{},"10-38":{},"11-10":{},"14-25":{}},"name":{},"text":{},"component":{}}],["4.3.1",{"_index":1816,"title":{"10-39":{}},"name":{},"text":{},"component":{}}],["4.3.2",{"_index":1818,"title":{"10-40":{}},"name":{},"text":{},"component":{}}],["4.3.3",{"_index":1820,"title":{"10-41":{}},"name":{},"text":{},"component":{}}],["4.3.4",{"_index":1822,"title":{"10-42":{}},"name":{},"text":{},"component":{}}],["4.3.5",{"_index":1823,"title":{"10-43":{}},"name":{},"text":{},"component":{}}],["4.4",{"_index":21,"title":{"1-9":{},"10-44":{},"11-11":{},"14-26":{}},"name":{},"text":{},"component":{}}],["4.5",{"_index":23,"title":{"1-10":{},"10-45":{},"14-27":{}},"name":{},"text":{},"component":{}}],["4.5.1",{"_index":26,"title":{"1-11":{}},"name":{},"text":{},"component":{}}],["4.5.2",{"_index":38,"title":{"1-18":{}},"name":{},"text":{},"component":{}}],["4.5.3",{"_index":40,"title":{"1-19":{}},"name":{},"text":{},"component":{}}],["4.6",{"_index":42,"title":{"1-20":{},"10-46":{},"14-28":{}},"name":{},"text":{},"component":{}}],["4.7",{"_index":44,"title":{"1-21":{},"14-29":{}},"name":{},"text":{},"component":{}}],["4.7.1",{"_index":47,"title":{"1-22":{}},"name":{},"text":{},"component":{}}],["4.7.2",{"_index":50,"title":{"1-23":{}},"name":{},"text":{},"component":{}}],["4.8",{"_index":55,"title":{"1-24":{},"14-30":{}},"name":{},"text":{},"component":{}}],["4.9",{"_index":2767,"title":{"14-31":{}},"name":{},"text":{},"component":{}}],["4/5",{"_index":1637,"title":{},"name":{},"text":{"8":{}},"component":{}}],["40",{"_index":793,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"7":{}},"component":{}}],["400",{"_index":912,"title":{},"name":{},"text":{"3":{},"6":{},"10":{}},"component":{}}],["4000/sec",{"_index":2191,"title":{},"name":{},"text":{"10":{}},"component":{}}],["41",{"_index":1210,"title":{},"name":{},"text":{"6":{}},"component":{}}],["45",{"_index":930,"title":{},"name":{},"text":{"3":{}},"component":{}}],["456]hard",{"_index":2839,"title":{},"name":{},"text":{"14":{}},"component":{}}],["456medium",{"_index":2833,"title":{},"name":{},"text":{"14":{}},"component":{}}],["456soft",{"_index":2832,"title":{},"name":{},"text":{"14":{}},"component":{}}],["460",{"_index":914,"title":{},"name":{},"text":{"3":{}},"component":{}}],["4^4",{"_index":1584,"title":{},"name":{},"text":{"8":{}},"component":{}}],["4init/0",{"_index":2183,"title":{},"name":{},"text":{"10":{}},"component":{}}],["4init/0hard/0soft",{"_index":2473,"title":{},"name":{},"text":{"12":{}},"component":{}}],["5",{"_index":228,"title":{"2-11":{},"6-16":{},"7-22":{},"8-5":{},"10-47":{},"11-12":{},"12-7":{},"13-11":{},"14-32":{},"15-5":{}},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["5.1",{"_index":623,"title":{"2-12":{},"6-17":{},"10-48":{},"11-13":{},"13-12":{},"14-33":{}},"name":{},"text":{},"component":{}}],["5.1.1",{"_index":2600,"title":{"13-13":{}},"name":{},"text":{},"component":{}}],["5.1.2",{"_index":2601,"title":{"13-14":{}},"name":{},"text":{},"component":{}}],["5.2",{"_index":624,"title":{"2-13":{},"6-18":{},"10-49":{},"13-15":{},"14-34":{}},"name":{},"text":{},"component":{}}],["5.3",{"_index":2769,"title":{"14-35":{}},"name":{},"text":{},"component":{}}],["5/5",{"_index":1636,"title":{},"name":{},"text":{"8":{}},"component":{}}],["50",{"_index":777,"title":{},"name":{},"text":{"2":{}},"component":{}}],["500",{"_index":1673,"title":{},"name":{},"text":{"8":{}},"component":{}}],["5000",{"_index":1783,"title":{},"name":{},"text":{"9":{},"10":{}},"component":{}}],["5000/sec",{"_index":1212,"title":{},"name":{},"text":{"6":{}},"component":{}}],["5000]soft",{"_index":1702,"title":{},"name":{},"text":{"8":{}},"component":{}}],["5000soft",{"_index":1699,"title":{},"name":{},"text":{"8":{}},"component":{}}],["52",{"_index":998,"title":{},"name":{},"text":{"3":{}},"component":{}}],["5^5",{"_index":1586,"title":{},"name":{},"text":{"8":{}},"component":{}}],["5th",{"_index":2632,"title":{},"name":{},"text":{"13":{}},"component":{}}],["6",{"_index":625,"title":{"2-14":{},"6-19":{},"7-23":{},"8-6":{},"12-8":{},"13-16":{}},"name":{},"text":{"6":{}},"component":{}}],["6.1",{"_index":627,"title":{"2-15":{},"6-20":{},"7-24":{}},"name":{},"text":{},"component":{}}],["6.2",{"_index":628,"title":{"2-16":{},"6-21":{},"7-25":{}},"name":{},"text":{},"component":{}}],["6.3",{"_index":1383,"title":{"7-26":{}},"name":{},"text":{},"component":{}}],["6.3.1",{"_index":1384,"title":{"7-27":{}},"name":{},"text":{},"component":{}}],["6.3.2",{"_index":1385,"title":{"7-28":{}},"name":{},"text":{},"component":{}}],["6.3.3",{"_index":1386,"title":{"7-29":{}},"name":{},"text":{},"component":{}}],["6.4",{"_index":1387,"title":{"7-30":{}},"name":{},"text":{},"component":{}}],["6.4.1",{"_index":1388,"title":{"7-31":{}},"name":{},"text":{},"component":{}}],["6.4.2",{"_index":1389,"title":{"7-32":{}},"name":{},"text":{},"component":{}}],["6.4.3",{"_index":1390,"title":{"7-33":{}},"name":{},"text":{},"component":{}}],["6.5",{"_index":1391,"title":{"7-34":{}},"name":{},"text":{},"component":{}}],["6.5.1",{"_index":1392,"title":{"7-35":{}},"name":{},"text":{},"component":{}}],["6.5.2",{"_index":1394,"title":{"7-36":{}},"name":{},"text":{},"component":{}}],["6.5.3",{"_index":1395,"title":{"7-37":{}},"name":{},"text":{},"component":{}}],["6.5.4",{"_index":1397,"title":{"7-38":{}},"name":{},"text":{},"component":{}}],["6.6",{"_index":1399,"title":{"7-39":{}},"name":{},"text":{},"component":{}}],["6.7",{"_index":1400,"title":{"7-40":{}},"name":{},"text":{},"component":{}}],["6.8",{"_index":1401,"title":{"7-41":{}},"name":{},"text":{},"component":{}}],["6.9",{"_index":1403,"title":{"7-42":{}},"name":{},"text":{},"component":{}}],["60",{"_index":931,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["600",{"_index":1990,"title":{},"name":{},"text":{"10":{}},"component":{}}],["64",{"_index":1591,"title":{},"name":{},"text":{"8":{}},"component":{}}],["64^64",{"_index":1593,"title":{},"name":{},"text":{"8":{}},"component":{}}],["64bit",{"_index":1998,"title":{},"name":{},"text":{"10":{}},"component":{}}],["7",{"_index":629,"title":{"2-17":{},"6-22":{},"7-43":{},"8-7":{},"12-9":{}},"name":{},"text":{"6":{},"10":{}},"component":{}}],["7.1",{"_index":630,"title":{"2-18":{},"6-23":{}},"name":{},"text":{},"component":{}}],["7.2",{"_index":631,"title":{"2-19":{},"6-24":{}},"name":{},"text":{},"component":{}}],["70",{"_index":2829,"title":{},"name":{},"text":{"14":{}},"component":{}}],["7000/sec",{"_index":2192,"title":{},"name":{},"text":{"10":{}},"component":{}}],["72",{"_index":3009,"title":{},"name":{},"text":{"14":{}},"component":{}}],["7441",{"_index":1220,"title":{},"name":{},"text":{"6":{}},"component":{}}],["789",{"_index":2840,"title":{},"name":{},"text":{"14":{}},"component":{}}],["789soft",{"_index":2834,"title":{},"name":{},"text":{"14":{}},"component":{}}],["7soft",{"_index":2477,"title":{},"name":{},"text":{"12":{}},"component":{}}],["8",{"_index":632,"title":{"2-20":{},"6-25":{},"8-8":{},"12-10":{}},"name":{},"text":{"2":{},"3":{}},"component":{}}],["8.1",{"_index":635,"title":{"2-21":{},"6-26":{}},"name":{},"text":{},"component":{}}],["8.2",{"_index":636,"title":{"2-22":{},"6-27":{}},"name":{},"text":{},"component":{}}],["8.3",{"_index":637,"title":{"2-23":{},"6-28":{}},"name":{},"text":{},"component":{}}],["8.4",{"_index":638,"title":{"2-24":{},"6-29":{}},"name":{},"text":{},"component":{}}],["806soft",{"_index":3000,"title":{},"name":{},"text":{"14":{}},"component":{}}],["8601",{"_index":1671,"title":{},"name":{},"text":{"8":{}},"component":{}}],["8:00",{"_index":959,"title":{},"name":{},"text":{"3":{}},"component":{}}],["8:52",{"_index":999,"title":{},"name":{},"text":{"3":{}},"component":{}}],["8^8",{"_index":1589,"title":{},"name":{},"text":{"8":{}},"component":{}}],["8m",{"_index":2150,"title":{},"name":{},"text":{"10":{}},"component":{}}],["9",{"_index":641,"title":{"2-25":{},"6-30":{},"8-9":{}},"name":{},"text":{"3":{},"6":{}},"component":{}}],["9.1",{"_index":642,"title":{"2-26":{},"6-31":{},"8-10":{}},"name":{},"text":{},"component":{}}],["9.2",{"_index":643,"title":{"2-27":{},"6-32":{},"8-11":{}},"name":{},"text":{},"component":{}}],["9.3",{"_index":1565,"title":{"8-12":{}},"name":{},"text":{},"component":{}}],["9.4",{"_index":1567,"title":{"8-13":{}},"name":{},"text":{},"component":{}}],["9.5",{"_index":1569,"title":{"8-14":{}},"name":{},"text":{},"component":{}}],["9.6",{"_index":1571,"title":{"8-15":{}},"name":{},"text":{},"component":{}}],["9.7",{"_index":1573,"title":{"8-16":{}},"name":{},"text":{},"component":{}}],["9.8",{"_index":1575,"title":{"8-17":{}},"name":{},"text":{},"component":{}}],["9.9",{"_index":1576,"title":{"8-18":{}},"name":{},"text":{},"component":{}}],["9/12",{"_index":2190,"title":{},"name":{},"text":{"10":{}},"component":{}}],["90",{"_index":932,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["900",{"_index":1684,"title":{},"name":{},"text":{"8":{}},"component":{}}],["9000/sec",{"_index":2187,"title":{},"name":{},"text":{"10":{}},"component":{}}],["900soft",{"_index":1686,"title":{},"name":{},"text":{"8":{}},"component":{}}],["92",{"_index":1590,"title":{},"name":{},"text":{"8":{}},"component":{}}],["9999600",{"_index":1991,"title":{},"name":{},"text":{"10":{}},"component":{}}],["9999800",{"_index":1992,"title":{},"name":{},"text":{"10":{}},"component":{}}],["9:00",{"_index":960,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9th",{"_index":2536,"title":{},"name":{},"text":{"12":{}},"component":{}}],["__eq__(self",{"_index":387,"title":{},"name":{},"text":{"1":{},"8":{}},"component":{}}],["__gt__",{"_index":1479,"title":{},"name":{},"text":{"7":{}},"component":{}}],["__gt__(self",{"_index":493,"title":{},"name":{},"text":{"1":{}},"component":{}}],["__hash__",{"_index":1294,"title":{},"name":{},"text":{"6":{}},"component":{}}],["__hash__(self",{"_index":386,"title":{},"name":{},"text":{"1":{},"8":{},"10":{}},"component":{}}],["__init__(self",{"_index":1891,"title":{},"name":{},"text":{"10":{},"12":{},"13":{}},"component":{}}],["__lt__",{"_index":1478,"title":{},"name":{},"text":{"7":{}},"component":{}}],["__lt__(self",{"_index":492,"title":{},"name":{},"text":{"1":{}},"component":{}}],["__main__",{"_index":1848,"title":{},"name":{},"text":{"10":{}},"component":{}}],["__str__",{"_index":1214,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["__str__(self",{"_index":2417,"title":{},"name":{},"text":{"12":{}},"component":{}}],["_id",{"_index":2023,"title":{},"name":{},"text":{"10":{}},"component":{}}],["a0",{"_index":1193,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["a1",{"_index":1194,"title":{},"name":{},"text":{"6":{},"7":{},"15":{}},"component":{}}],["a2",{"_index":1534,"title":{},"name":{},"text":{"7":{},"15":{}},"component":{}}],["a3",{"_index":1535,"title":{},"name":{},"text":{"7":{}},"component":{}}],["a4",{"_index":1430,"title":{},"name":{},"text":{"7":{}},"component":{}}],["a5",{"_index":1429,"title":{},"name":{},"text":{"7":{}},"component":{}}],["a5..visit",{"_index":1435,"title":{},"name":{},"text":{"7":{}},"component":{}}],["a8",{"_index":1436,"title":{},"name":{},"text":{"7":{}},"component":{}}],["a_list",{"_index":2480,"title":{},"name":{},"text":{"12":{}},"component":{}}],["abil",{"_index":2312,"title":{},"name":{},"text":{"11":{}},"component":{}}],["abov",{"_index":569,"title":{},"name":{},"text":{"1":{},"2":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["absenc",{"_index":544,"title":{},"name":{},"text":{"1":{}},"component":{}}],["absolut",{"_index":1274,"title":{},"name":{},"text":{"6":{}},"component":{}}],["academ",{"_index":1107,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["accept",{"_index":411,"title":{"6-7":{},"6-19":{}},"name":{},"text":{"1":{},"3":{},"6":{},"8":{},"10":{},"13":{}},"component":{}}],["accepted/select",{"_index":1207,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["acceptedcountlimit",{"_index":1251,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["acceptor",{"_index":1159,"title":{"6-5":{},"6-33":{}},"name":{},"text":{"6":{}},"component":{}}],["access",{"_index":438,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["accommod",{"_index":705,"title":{},"name":{},"text":{"2":{},"12":{}},"component":{}}],["accomplish",{"_index":2019,"title":{},"name":{},"text":{"10":{}},"component":{}}],["accord",{"_index":405,"title":{},"name":{},"text":{"1":{},"7":{},"14":{}},"component":{}}],["accordingli",{"_index":2629,"title":{},"name":{},"text":{"13":{},"15":{}},"component":{}}],["account",{"_index":682,"title":{},"name":{},"text":{"2":{},"10":{},"11":{}},"component":{}}],["accur",{"_index":896,"title":{},"name":{},"text":{"3":{},"14":{}},"component":{}}],["accuraci",{"_index":981,"title":{},"name":{},"text":{"3":{}},"component":{}}],["achiev",{"_index":9,"title":{"1-4":{}},"name":{},"text":{"1":{},"11":{}},"component":{}}],["acquaint",{"_index":2777,"title":{},"name":{},"text":{"14":{}},"component":{}}],["act",{"_index":1177,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["action",{"_index":1708,"title":{},"name":{},"text":{"8":{}},"component":{}}],["activ",{"_index":978,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{},"14":{}},"component":{}}],["actual",{"_index":564,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["ad",{"_index":984,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"13":{},"14":{}},"component":{}}],["add",{"_index":134,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["addconstraintmatch",{"_index":2935,"title":{},"name":{},"text":{"14":{}},"component":{}}],["addeventlistener(self",{"_index":1724,"title":{},"name":{},"text":{"8":{}},"component":{}}],["addit",{"_index":785,"title":{},"name":{},"text":{"2":{},"8":{},"13":{},"14":{}},"component":{}}],["addition",{"_index":410,"title":{},"name":{},"text":{"1":{},"3":{},"9":{},"12":{},"14":{}},"component":{}}],["addproblemchange(self",{"_index":2687,"title":{},"name":{},"text":{"13":{}},"component":{}}],["address",{"_index":1273,"title":{},"name":{},"text":{"6":{}},"component":{}}],["adher",{"_index":2476,"title":{},"name":{},"text":{"12":{}},"component":{}}],["adjust",{"_index":1908,"title":{},"name":{},"text":{"10":{},"13":{},"15":{}},"component":{}}],["admin",{"_index":613,"title":{},"name":{},"text":{"1":{}},"component":{}}],["admiss",{"_index":2614,"title":{},"name":{},"text":{"13":{}},"component":{}}],["advanc",{"_index":694,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["advantag",{"_index":2850,"title":{},"name":{},"text":{"14":{}},"component":{}}],["advertis",{"_index":2279,"title":{},"name":{},"text":{"11":{}},"component":{}}],["affect",{"_index":149,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["afterentityad",{"_index":3107,"title":{},"name":{},"text":{"15":{}},"component":{}}],["afterentityadded(self",{"_index":2879,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["afterentityremov",{"_index":3109,"title":{},"name":{},"text":{"15":{}},"component":{}}],["afterentityremoved(self",{"_index":2884,"title":{},"name":{},"text":{"14":{}},"component":{}}],["afternoon",{"_index":2335,"title":{},"name":{},"text":{"11":{}},"component":{}}],["aftervariablechang",{"_index":3108,"title":{},"name":{},"text":{"15":{}},"component":{}}],["aftervariablechanged(self",{"_index":2882,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["again",{"_index":1186,"title":{},"name":{},"text":{"6":{},"10":{},"13":{}},"component":{}}],["against",{"_index":1155,"title":{},"name":{},"text":{"5":{},"12":{},"14":{}},"component":{}}],["agenda",{"_index":2277,"title":{},"name":{},"text":{"11":{}},"component":{}}],["aggreg",{"_index":414,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["ago",{"_index":1070,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["ahead",{"_index":1381,"title":{"7-24":{}},"name":{},"text":{},"component":{}}],["ai",{"_index":2403,"title":{},"name":{},"text":{"12":{}},"component":{}}],["aid",{"_index":1222,"title":{},"name":{},"text":{"6":{}},"component":{}}],["aim",{"_index":1609,"title":{},"name":{},"text":{"8":{},"10":{},"14":{}},"component":{}}],["air",{"_index":1144,"title":{},"name":{},"text":{"5":{}},"component":{}}],["airplan",{"_index":2284,"title":{},"name":{},"text":{"11":{},"13":{}},"component":{}}],["aka",{"_index":2337,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["algorithm",{"_index":619,"title":{"4":{},"8":{},"2-3":{},"2-6":{},"2-9":{},"2-12":{},"2-15":{},"2-18":{},"2-21":{},"2-26":{},"2-29":{},"2-32":{},"2-35":{},"4-3":{},"5-3":{},"5-6":{},"6-10":{},"6-14":{},"6-17":{},"6-20":{},"6-23":{},"6-26":{},"6-28":{},"6-31":{},"8-4":{},"8-5":{},"9-1":{}},"name":{"4":{},"8":{}},"text":{"2":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["algorithm(",{"_index":1855,"title":{},"name":{},"text":{"10":{}},"component":{}}],["alia",{"_index":1347,"title":{},"name":{},"text":{"6":{}},"component":{}}],["alloc",{"_index":633,"title":{"2-20":{},"2-25":{},"2-34":{}},"name":{},"text":{"2":{},"10":{}},"component":{}}],["allocate_entity_from_queu",{"_index":717,"title":{},"name":{},"text":{"2":{}},"component":{}}],["allocate_from_pool",{"_index":766,"title":{},"name":{},"text":{"2":{}},"component":{}}],["allocate_to_value_from_queu",{"_index":759,"title":{},"name":{},"text":{"2":{}},"component":{}}],["allow",{"_index":483,"title":{},"name":{},"text":{"1":{},"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["along",{"_index":2404,"title":{},"name":{},"text":{"12":{}},"component":{}}],["alongsid",{"_index":915,"title":{},"name":{},"text":{"3":{}},"component":{}}],["alpha",{"_index":2357,"title":{},"name":{},"text":{"11":{}},"component":{}}],["alreadi",{"_index":681,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"8":{},"13":{},"15":{}},"component":{}}],["alter",{"_index":2606,"title":{},"name":{},"text":{"13":{}},"component":{}}],["altern",{"_index":259,"title":{},"name":{},"text":{"1":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["although",{"_index":481,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"15":{}},"component":{}}],["alway",{"_index":579,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"11":{},"12":{},"14":{},"15":{}},"component":{}}],["ambigu",{"_index":1417,"title":{},"name":{},"text":{"7":{}},"component":{}}],["amongst",{"_index":2982,"title":{},"name":{},"text":{"14":{}},"component":{}}],["amount",{"_index":1658,"title":{},"name":{},"text":{"8":{},"11":{}},"component":{}}],["analysi",{"_index":2927,"title":{},"name":{},"text":{"14":{}},"component":{}}],["analyt",{"_index":2791,"title":{},"name":{},"text":{"14":{}},"component":{}}],["anchor",{"_index":995,"title":{"15-3":{}},"name":{},"text":{"3":{},"7":{},"10":{},"15":{}},"component":{}}],["anchor_shadow_vari",{"_index":3068,"title":{},"name":{},"text":{"15":{}},"component":{}}],["anchor_shadow_variable(vehicl",{"_index":3069,"title":{},"name":{},"text":{"15":{}},"component":{}}],["and/or",{"_index":1420,"title":{},"name":{},"text":{"7":{},"11":{},"13":{},"14":{}},"component":{}}],["ann",{"_index":86,"title":{},"name":{},"text":{"1":{},"3":{},"13":{}},"component":{}}],["anneal",{"_index":1168,"title":{"6-16":{}},"name":{},"text":{"6":{},"7":{},"8":{},"10":{}},"component":{}}],["annot",{"_index":866,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"10":{},"13":{},"15":{}},"component":{}}],["anoth",{"_index":384,"title":{"8-18":{}},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["another’",{"_index":1757,"title":{},"name":{},"text":{"8":{}},"component":{}}],["anticip",{"_index":2332,"title":{},"name":{},"text":{"11":{}},"component":{}}],["any.whl",{"_index":2392,"title":{},"name":{},"text":{"11":{}},"component":{}}],["anyon",{"_index":1618,"title":{},"name":{},"text":{"8":{},"11":{}},"component":{}}],["anyth",{"_index":1280,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["anyway",{"_index":1776,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["apach",{"_index":2346,"title":{},"name":{},"text":{"11":{}},"component":{}}],["api",{"_index":68,"title":{"10-4":{}},"name":{},"text":{"1":{},"10":{},"14":{}},"component":{}}],["appear",{"_index":573,"title":{},"name":{},"text":{"1":{},"5":{},"10":{}},"component":{}}],["append",{"_index":2182,"title":{},"name":{},"text":{"10":{}},"component":{}}],["appl",{"_index":2779,"title":{},"name":{},"text":{"14":{}},"component":{}}],["appli",{"_index":310,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["applic",{"_index":863,"title":{"12-10":{}},"name":{},"text":{"3":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["appoint",{"_index":2278,"title":{},"name":{},"text":{"11":{}},"component":{}}],["approach",{"_index":77,"title":{},"name":{},"text":{"1":{},"2":{},"10":{},"13":{},"14":{}},"component":{}}],["appropri",{"_index":352,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["approv",{"_index":1040,"title":{},"name":{},"text":{"3":{}},"component":{}}],["arbitrari",{"_index":2001,"title":{},"name":{},"text":{"10":{}},"component":{}}],["arc",{"_index":1922,"title":{},"name":{},"text":{"10":{}},"component":{}}],["architectur",{"_index":825,"title":{"3-10":{},"8-3":{}},"name":{},"text":{"3":{}},"component":{}}],["aren’t",{"_index":458,"title":{},"name":{},"text":{"1":{}},"component":{}}],["argument",{"_index":157,"title":{},"name":{},"text":{"1":{},"10":{},"12":{}},"component":{}}],["arithmet",{"_index":2817,"title":{},"name":{},"text":{"14":{}},"component":{}}],["around",{"_index":537,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"13":{}},"component":{}}],["array",{"_index":2838,"title":{},"name":{},"text":{"14":{}},"component":{}}],["arriv",{"_index":918,"title":{},"name":{},"text":{"3":{},"13":{},"15":{}},"component":{}}],["arrow",{"_index":1190,"title":{},"name":{},"text":{"6":{}},"component":{}}],["art",{"_index":1411,"title":{},"name":{},"text":{"7":{}},"component":{}}],["articl",{"_index":2360,"title":{},"name":{},"text":{"11":{}},"component":{}}],["artifici",{"_index":2402,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ascend",{"_index":1356,"title":{},"name":{},"text":{"6":{}},"component":{}}],["ascending_diagonal_index_list",{"_index":2910,"title":{},"name":{},"text":{"14":{}},"component":{}}],["ascending_diagonal_index_list.append(queen",{"_index":2913,"title":{},"name":{},"text":{"14":{}},"component":{}}],["ascending_diagonal_index_list.remove(queen",{"_index":2920,"title":{},"name":{},"text":{"14":{}},"component":{}}],["ascending_diagonal_index_map",{"_index":2889,"title":{},"name":{},"text":{"14":{}},"component":{}}],["ask",{"_index":342,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["assembl",{"_index":1032,"title":{},"name":{},"text":{"3":{},"10":{},"11":{}},"component":{}}],["assert",{"_index":2158,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["assertionscoredirectorfactori",{"_index":2950,"title":{},"name":{},"text":{"14":{}},"component":{}}],["assess",{"_index":1625,"title":{},"name":{},"text":{"8":{}},"component":{}}],["asset",{"_index":2271,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["assign",{"_index":121,"title":{"3-3":{},"3-4":{},"3-5":{},"3-6":{},"3-9":{}},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"10":{},"12":{},"13":{},"14":{}},"component":{}}],["associ",{"_index":2750,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["assum",{"_index":612,"title":{},"name":{},"text":{"1":{}},"component":{}}],["assur",{"_index":876,"title":{},"name":{},"text":{"3":{},"10":{},"15":{}},"component":{}}],["asymmetr",{"_index":1486,"title":{},"name":{},"text":{"7":{}},"component":{}}],["asynchron",{"_index":1577,"title":{"8-18":{}},"name":{},"text":{"8":{},"10":{}},"component":{}}],["atom",{"_index":1596,"title":{},"name":{},"text":{"8":{},"11":{}},"component":{}}],["attack",{"_index":2782,"title":{},"name":{},"text":{"14":{}},"component":{}}],["attain",{"_index":2253,"title":{},"name":{},"text":{"10":{}},"component":{}}],["attempt",{"_index":3012,"title":{},"name":{},"text":{"14":{}},"component":{}}],["attend",{"_index":2411,"title":{},"name":{},"text":{"12":{}},"component":{}}],["attent",{"_index":1931,"title":{},"name":{},"text":{"10":{}},"component":{}}],["authent",{"_index":2382,"title":{},"name":{},"text":{"11":{}},"component":{}}],["auto",{"_index":1770,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["automat",{"_index":144,"title":{"3-7":{},"3-8":{}},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"8":{},"10":{},"14":{},"15":{}},"component":{}}],["autonomi",{"_index":1042,"title":{},"name":{},"text":{"3":{}},"component":{}}],["avail",{"_index":423,"title":{},"name":{},"text":{"1":{},"2":{},"8":{},"10":{},"11":{},"12":{},"14":{}},"component":{}}],["availableprocessorcount",{"_index":1779,"title":{},"name":{},"text":{"8":{}},"component":{}}],["averag",{"_index":32,"title":{"1-15":{}},"name":{},"text":{"1":{},"8":{},"10":{},"14":{}},"component":{}}],["average(group_value_map",{"_index":530,"title":{},"name":{},"text":{"1":{}},"component":{}}],["average_cpu_pow",{"_index":474,"title":{},"name":{},"text":{"1":{}},"component":{}}],["average_cpu_power(constraint_factori",{"_index":471,"title":{},"name":{},"text":{"1":{}},"component":{}}],["avoid",{"_index":595,"title":{"13-14":{},"14-9":{},"14-26":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["away",{"_index":1101,"title":{},"name":{},"text":{"5":{},"10":{}},"component":{}}],["b",{"_index":207,"title":{},"name":{},"text":{"1":{},"7":{},"10":{},"11":{},"12":{},"14":{},"15":{}},"component":{}}],["b0",{"_index":1180,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["b1",{"_index":1536,"title":{},"name":{},"text":{"7":{},"15":{}},"component":{}}],["b2",{"_index":1431,"title":{},"name":{},"text":{"7":{}},"component":{}}],["b3",{"_index":1181,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["b3..visit",{"_index":1437,"title":{},"name":{},"text":{"7":{}},"component":{}}],["b9",{"_index":1438,"title":{},"name":{},"text":{"7":{}},"component":{}}],["back",{"_index":1055,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{}},"component":{}}],["backup",{"_index":2589,"title":{"13-2":{}},"name":{},"text":{"13":{}},"component":{}}],["backward",{"_index":2268,"title":{"11-10":{}},"name":{},"text":{},"component":{}}],["bad",{"_index":2783,"title":{},"name":{},"text":{"14":{}},"component":{}}],["badli",{"_index":1461,"title":{},"name":{},"text":{"7":{}},"component":{}}],["balanc",{"_index":1142,"title":{"13-13":{}},"name":{},"text":{"5":{},"8":{},"13":{},"14":{}},"component":{}}],["barrier",{"_index":1005,"title":{},"name":{},"text":{"3":{}},"component":{}}],["base",{"_index":260,"title":{"7-9":{}},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["basebal",{"_index":2301,"title":{},"name":{},"text":{"11":{}},"component":{}}],["basic",{"_index":1019,"title":{},"name":{},"text":{"3":{},"8":{},"11":{}},"component":{}}],["batch",{"_index":1047,"title":{"10-48":{}},"name":{},"text":{"3":{},"10":{}},"component":{}}],["be",{"_index":364,"title":{},"name":{},"text":{"1":{},"5":{},"6":{},"7":{},"10":{},"13":{},"14":{}},"component":{}}],["becom",{"_index":846,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"14":{}},"component":{}}],["bed",{"_index":1034,"title":{},"name":{},"text":{"3":{},"10":{},"13":{}},"component":{}}],["beddesign",{"_index":1880,"title":{},"name":{},"text":{"10":{}},"component":{}}],["befor",{"_index":523,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["beforeentityadded(self",{"_index":2878,"title":{},"name":{},"text":{"14":{}},"component":{}}],["beforeentityremoved(self",{"_index":2883,"title":{},"name":{},"text":{"14":{}},"component":{}}],["beforehand",{"_index":917,"title":{},"name":{},"text":{"3":{}},"component":{}}],["beforevariablechanged(self",{"_index":2880,"title":{},"name":{},"text":{"14":{}},"component":{}}],["begin",{"_index":1528,"title":{},"name":{},"text":{"7":{},"10":{}},"component":{}}],["behav",{"_index":264,"title":{},"name":{},"text":{"1":{},"2":{},"5":{},"6":{},"14":{}},"component":{}}],["behavior",{"_index":2701,"title":{},"name":{},"text":{"13":{}},"component":{}}],["behaviour",{"_index":1951,"title":{},"name":{},"text":{"10":{}},"component":{}}],["behind",{"_index":1648,"title":{},"name":{},"text":{"8":{}},"component":{}}],["belong",{"_index":1970,"title":{},"name":{},"text":{"10":{}},"component":{}}],["below",{"_index":1227,"title":{},"name":{},"text":{"6":{},"7":{},"9":{},"10":{},"14":{},"15":{}},"component":{}}],["benchmark",{"_index":781,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"8":{},"10":{}},"component":{}}],["bendable_hard_levels_size=2",{"_index":2844,"title":{},"name":{},"text":{"14":{}},"component":{}}],["bendable_soft_levels_size=3",{"_index":2845,"title":{},"name":{},"text":{"14":{}},"component":{}}],["bendablescor",{"_index":1700,"title":{"14-14":{}},"name":{},"text":{"8":{},"14":{}},"component":{}}],["benefici",{"_index":2752,"title":{},"name":{},"text":{"13":{}},"component":{}}],["benefit",{"_index":106,"title":{},"name":{},"text":{"1":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["bert",{"_index":841,"title":{},"name":{},"text":{"3":{}},"component":{}}],["besid",{"_index":1016,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["best",{"_index":680,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["best_solut",{"_index":2149,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["best_solution_changed(ev",{"_index":2743,"title":{},"name":{},"text":{"13":{}},"component":{}}],["bestscorefeasibletermin",{"_index":1568,"title":{"8-13":{}},"name":{},"text":{},"component":{}}],["bestscorelimit",{"_index":1703,"title":{},"name":{},"text":{"8":{}},"component":{}}],["bestscoretermin",{"_index":1566,"title":{"8-12":{}},"name":{},"text":{"8":{}},"component":{}}],["bestsolutionchangedev",{"_index":1721,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["bestsolutionchangedevent'",{"_index":1728,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["bestsolutionchangedevent[cloudbal",{"_index":2744,"title":{},"name":{},"text":{"13":{}},"component":{}}],["bet",{"_index":1749,"title":{},"name":{},"text":{"8":{}},"component":{}}],["beth",{"_index":997,"title":{},"name":{},"text":{"3":{}},"component":{}}],["beth’",{"_index":337,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["better",{"_index":403,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["between",{"_index":764,"title":{},"name":{},"text":{"2":{},"3":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["beyond",{"_index":1085,"title":{},"name":{},"text":{"5":{},"7":{},"13":{}},"component":{}}],["bi",{"_index":205,"title":{"15-2":{}},"name":{},"text":{"1":{},"3":{},"15":{}},"component":{}}],["bi[shift",{"_index":186,"title":{},"name":{},"text":{"1":{}},"component":{}}],["biconstraintstream",{"_index":226,"title":{},"name":{},"text":{"1":{}},"component":{}}],["biconstraintstream[a",{"_index":206,"title":{},"name":{},"text":{"1":{}},"component":{}}],["biconstraintstream[shift",{"_index":220,"title":{},"name":{},"text":{"1":{}},"component":{}}],["biconstraintstream[tuple[shift",{"_index":225,"title":{},"name":{},"text":{"1":{}},"component":{}}],["big",{"_index":1134,"title":{},"name":{},"text":{"5":{},"7":{},"14":{}},"component":{}}],["bigdecim",{"_index":2003,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["bigger",{"_index":1599,"title":{},"name":{},"text":{"8":{}},"component":{}}],["biggest_process",{"_index":488,"title":{},"name":{},"text":{"1":{}},"component":{}}],["biginteg",{"_index":2000,"title":{},"name":{},"text":{"10":{}},"component":{}}],["biject",{"_index":581,"title":{},"name":{},"text":{"1":{}},"component":{}}],["billion",{"_index":1607,"title":{},"name":{},"text":{"8":{}},"component":{}}],["bin",{"_index":2288,"title":{},"name":{},"text":{"11":{}},"component":{}}],["biologi",{"_index":2543,"title":{},"name":{},"text":{"12":{}},"component":{}}],["bistream[shift",{"_index":195,"title":{},"name":{},"text":{"1":{}},"component":{}}],["bit",{"_index":1119,"title":{},"name":{},"text":{"5":{},"6":{},"14":{}},"component":{}}],["black",{"_index":2172,"title":{},"name":{},"text":{"10":{}},"component":{}}],["block",{"_index":13,"title":{"1-5":{}},"name":{},"text":{"1":{},"10":{},"13":{}},"component":{}}],["blog",{"_index":2361,"title":{},"name":{},"text":{"11":{}},"component":{}}],["blow",{"_index":1583,"title":{},"name":{},"text":{"8":{}},"component":{}}],["blue",{"_index":1228,"title":{},"name":{},"text":{"6":{},"7":{},"14":{}},"component":{}}],["boat",{"_index":2283,"title":{},"name":{},"text":{"11":{}},"component":{}}],["bool",{"_index":356,"title":{},"name":{},"text":{"1":{},"8":{},"13":{},"14":{}},"component":{}}],["boolean",{"_index":1996,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["boost",{"_index":1785,"title":{},"name":{},"text":{"9":{}},"component":{}}],["both",{"_index":350,"title":{},"name":{},"text":{"1":{},"3":{},"5":{},"7":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["bother",{"_index":2959,"title":{},"name":{},"text":{"14":{}},"component":{}}],["bottleneck",{"_index":2181,"title":{},"name":{},"text":{"10":{}},"component":{}}],["bounc",{"_index":1299,"title":{},"name":{},"text":{"6":{}},"component":{}}],["bound",{"_index":1081,"title":{"5-5":{}},"name":{},"text":{"5":{},"8":{},"10":{}},"component":{}}],["boundari",{"_index":1790,"title":{},"name":{},"text":{"9":{}},"component":{}}],["box",{"_index":28,"title":{"1-11":{}},"name":{},"text":{"1":{},"7":{},"10":{}},"component":{}}],["branch",{"_index":1080,"title":{"5-5":{}},"name":{},"text":{"5":{},"8":{}},"component":{}}],["branch_and_bound",{"_index":1120,"title":{},"name":{},"text":{"5":{}},"component":{}}],["breach",{"_index":302,"title":{},"name":{},"text":{"1":{}},"component":{}}],["breadth_first",{"_index":1127,"title":{},"name":{},"text":{"5":{}},"component":{}}],["break",{"_index":962,"title":{"14-34":{}},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["breakfast",{"_index":2233,"title":{},"name":{},"text":{"10":{}},"component":{}}],["breakout",{"_index":924,"title":{},"name":{},"text":{"3":{}},"component":{}}],["breaktierandomli",{"_index":1244,"title":{},"name":{},"text":{"6":{}},"component":{}}],["bridg",{"_index":2962,"title":{},"name":{},"text":{"14":{}},"component":{}}],["bring",{"_index":1448,"title":{},"name":{},"text":{"7":{}},"component":{}}],["broken",{"_index":1447,"title":{"14-32":{}},"name":{},"text":{"7":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["brows",{"_index":314,"title":{},"name":{},"text":{"1":{}},"component":{}}],["brute",{"_index":1079,"title":{"5-2":{}},"name":{},"text":{"5":{},"8":{},"11":{}},"component":{}}],["brute_forc",{"_index":1096,"title":{},"name":{},"text":{"5":{}},"component":{}}],["bucket",{"_index":822,"title":{"3-9":{}},"name":{},"text":{"3":{}},"component":{}}],["budget",{"_index":2313,"title":{},"name":{},"text":{"11":{}},"component":{}}],["bug",{"_index":1777,"title":{"10-38":{}},"name":{},"text":{"8":{},"10":{},"11":{}},"component":{}}],["build",{"_index":12,"title":{"1-5":{},"11-13":{},"12-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"10":{},"11":{},"12":{}},"component":{}}],["buildsolv",{"_index":2579,"title":{},"name":{},"text":{"12":{}},"component":{}}],["built",{"_index":108,"title":{"14-28":{}},"name":{},"text":{"1":{},"6":{},"8":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["bullet",{"_index":2325,"title":{},"name":{},"text":{"11":{}},"component":{}}],["burden",{"_index":2678,"title":{},"name":{},"text":{"13":{}},"component":{}}],["burk",{"_index":1316,"title":{},"name":{},"text":{"6":{}},"component":{}}],["busi",{"_index":872,"title":{"14-3":{}},"name":{},"text":{"3":{},"8":{},"11":{},"13":{},"14":{}},"component":{}}],["buy",{"_index":1986,"title":{},"name":{},"text":{"10":{},"13":{},"14":{}},"component":{}}],["bykov",{"_index":1318,"title":{},"name":{},"text":{"6":{}},"component":{}}],["c",{"_index":210,"title":{},"name":{},"text":{"1":{},"7":{},"12":{},"14":{},"15":{}},"component":{}}],["c0",{"_index":1184,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["c1",{"_index":1537,"title":{},"name":{},"text":{"7":{},"15":{}},"component":{}}],["c2",{"_index":1538,"title":{},"name":{},"text":{"7":{},"15":{}},"component":{}}],["c3",{"_index":1185,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["cach",{"_index":901,"title":{"7-28":{},"7-29":{},"10-31":{}},"name":{},"text":{"3":{},"7":{},"10":{},"14":{}},"component":{}}],["cachetyp",{"_index":1380,"title":{"7-24":{},"7-26":{}},"name":{},"text":{"7":{}},"component":{}}],["calcul",{"_index":58,"title":{"1":{},"14":{},"14-9":{},"14-15":{},"14-16":{},"14-17":{},"14-18":{},"14-22":{},"14-24":{},"14-25":{},"14-26":{},"14-29":{},"14-33":{}},"name":{"14":{}},"text":{"1":{},"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["calculate_averag",{"_index":532,"title":{},"name":{},"text":{"1":{}},"component":{}}],["calculate_average(count",{"_index":533,"title":{},"name":{},"text":{"1":{}},"component":{}}],["calculate_topic_conflict_list(self",{"_index":2092,"title":{},"name":{},"text":{"10":{}},"component":{}}],["calculatescor",{"_index":2161,"title":{},"name":{},"text":{"10":{}},"component":{}}],["calculatescore(self",{"_index":2885,"title":{},"name":{},"text":{"14":{}},"component":{}}],["call",{"_index":132,"title":{"14-26":{}},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["callable[[a",{"_index":355,"title":{},"name":{},"text":{"1":{}},"component":{}}],["callable[[a,b",{"_index":357,"title":{},"name":{},"text":{"1":{}},"component":{}}],["callable[[a,b,c",{"_index":358,"title":{},"name":{},"text":{"1":{}},"component":{}}],["callable[[a,b,c,d",{"_index":359,"title":{},"name":{},"text":{"1":{}},"component":{}}],["callable[[solut",{"_index":2689,"title":{},"name":{},"text":{"13":{}},"component":{}}],["callable[[solverev",{"_index":1726,"title":{},"name":{},"text":{"8":{}},"component":{}}],["can’t",{"_index":2645,"title":{},"name":{},"text":{"13":{}},"component":{}}],["capac",{"_index":972,"title":{},"name":{},"text":{"3":{},"8":{},"10":{}},"component":{}}],["capacit",{"_index":823,"title":{"3-9":{}},"name":{},"text":{},"component":{}}],["car",{"_index":2294,"title":{},"name":{},"text":{"11":{},"13":{}},"component":{}}],["cardin",{"_index":7,"title":{"1-3":{},"1-4":{}},"name":{},"text":{"1":{}},"component":{}}],["care",{"_index":2170,"title":{},"name":{},"text":{"10":{}},"component":{}}],["carl",{"_index":842,"title":{},"name":{},"text":{"3":{}},"component":{}}],["carpet",{"_index":2296,"title":{},"name":{},"text":{"11":{}},"component":{}}],["carri",{"_index":227,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["carrier",{"_index":586,"title":{},"name":{},"text":{"1":{}},"component":{}}],["cartesian",{"_index":362,"title":{},"name":{},"text":{"1":{},"2":{},"7":{}},"component":{}}],["cartesianproductmoveselector",{"_index":1378,"title":{"7-20":{}},"name":{},"text":{"7":{}},"component":{}}],["case",{"_index":563,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["catch",{"_index":2619,"title":{},"name":{},"text":{"13":{}},"component":{}}],["categor",{"_index":1875,"title":{},"name":{},"text":{"10":{}},"component":{}}],["categori",{"_index":2342,"title":{},"name":{},"text":{"11":{}},"component":{}}],["catent",{"_index":742,"title":{},"name":{},"text":{"2":{}},"component":{}}],["caus",{"_index":1311,"title":{},"name":{},"text":{"6":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["cd",{"_index":2387,"title":{},"name":{},"text":{"11":{}},"component":{}}],["certain",{"_index":511,"title":{},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["ch",{"_index":1633,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["chain",{"_index":236,"title":{"3-6":{},"3-7":{},"3-8":{},"7-14":{},"10-24":{}},"name":{},"text":{"1":{},"3":{},"7":{},"10":{},"15":{}},"component":{}}],["chain’",{"_index":3082,"title":{},"name":{},"text":{"15":{}},"component":{}}],["challeng",{"_index":828,"title":{},"name":{},"text":{"3":{}},"component":{}}],["chanc",{"_index":1303,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["chang",{"_index":94,"title":{"8-21":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["changemov",{"_index":786,"title":{},"name":{},"text":{"2":{},"7":{}},"component":{}}],["changemoveselector",{"_index":738,"title":{"7-7":{}},"name":{},"text":{"2":{},"7":{}},"component":{}}],["chapter",{"_index":1223,"title":{},"name":{},"text":{"6":{}},"component":{}}],["chase",{"_index":1270,"title":{},"name":{},"text":{"6":{}},"component":{}}],["cheap",{"_index":989,"title":{},"name":{},"text":{"3":{}},"component":{}}],["cheaper",{"_index":2239,"title":{},"name":{},"text":{"10":{}},"component":{}}],["cheapest",{"_index":645,"title":{"2-28":{}},"name":{},"text":{"2":{},"8":{}},"component":{}}],["cheapest_insert",{"_index":761,"title":{},"name":{},"text":{"2":{}},"component":{}}],["check",{"_index":850,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["chemistri",{"_index":2541,"title":{},"name":{},"text":{"12":{}},"component":{}}],["child",{"_index":1505,"title":{},"name":{},"text":{"7":{}},"component":{}}],["childmoveselector",{"_index":1515,"title":{},"name":{},"text":{"7":{}},"component":{}}],["children",{"_index":1501,"title":{},"name":{},"text":{"7":{}},"component":{}}],["choic",{"_index":1630,"title":{},"name":{},"text":{"8":{},"14":{}},"component":{}}],["choos",{"_index":879,"title":{"14-10":{}},"name":{},"text":{"3":{},"14":{}},"component":{}}],["chosen",{"_index":1262,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["circumst",{"_index":512,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["citi",{"_index":1030,"title":{},"name":{},"text":{"3":{}},"component":{}}],["clariti",{"_index":1113,"title":{},"name":{},"text":{"5":{}},"component":{}}],["class",{"_index":125,"title":{"2-23":{},"10-6":{},"10-27":{}},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["class/funct",{"_index":1847,"title":{},"name":{},"text":{"10":{}},"component":{}}],["classic",{"_index":1301,"title":{},"name":{},"text":{"6":{}},"component":{}}],["claus",{"_index":409,"title":{},"name":{},"text":{"1":{}},"component":{}}],["clearli",{"_index":838,"title":{},"name":{},"text":{"3":{}},"component":{}}],["clever",{"_index":1645,"title":{},"name":{},"text":{"8":{}},"component":{}}],["client",{"_index":1056,"title":{},"name":{},"text":{"3":{}},"component":{}}],["climb",{"_index":1076,"title":{"6-9":{},"6-25":{}},"name":{},"text":{"4":{},"6":{},"8":{}},"component":{}}],["clone",{"_index":1236,"title":{"10-32":{},"13-14":{}},"name":{},"text":{"6":{},"10":{},"11":{},"13":{},"15":{}},"component":{}}],["cloner",{"_index":3104,"title":{},"name":{},"text":{"15":{}},"component":{}}],["close",{"_index":2040,"title":{},"name":{},"text":{"10":{}},"component":{}}],["cloud",{"_index":824,"title":{"3-10":{},"13-13":{}},"name":{},"text":{"3":{},"5":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["cloud_bal",{"_index":2705,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cloud_balance.computer_list",{"_index":2717,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cloud_balance.computer_list.copi",{"_index":2716,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cloud_balance.process_list",{"_index":2710,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["cloudbal",{"_index":2079,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["cloudcomput",{"_index":572,"title":{},"name":{},"text":{"1":{},"8":{},"13":{},"15":{}},"component":{}}],["cloudprocess",{"_index":439,"title":{},"name":{},"text":{"1":{},"15":{}},"component":{}}],["coars",{"_index":903,"title":{},"name":{},"text":{"3":{},"7":{},"14":{}},"component":{}}],["coarser",{"_index":985,"title":{},"name":{},"text":{"3":{}},"component":{}}],["code",{"_index":102,"title":{"10-38":{}},"name":{},"text":{"1":{},"6":{},"8":{},"10":{},"11":{},"12":{},"14":{}},"component":{}}],["cold",{"_index":2732,"title":{},"name":{},"text":{"13":{}},"component":{}}],["collaps",{"_index":818,"title":{"3-7":{}},"name":{},"text":{"3":{}},"component":{}}],["collect",{"_index":248,"title":{},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"13":{}},"component":{}}],["collection(",{"_index":2068,"title":{},"name":{},"text":{"10":{}},"component":{}}],["collector",{"_index":25,"title":{"1-10":{},"1-11":{},"1-12":{},"1-13":{},"1-14":{},"1-15":{},"1-16":{},"1-17":{},"1-18":{},"1-19":{}},"name":{},"text":{"1":{}},"component":{}}],["color",{"_index":844,"title":{},"name":{},"text":{"3":{}},"component":{}}],["column",{"_index":1890,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["column_list",{"_index":2062,"title":{},"name":{},"text":{"10":{}},"component":{}}],["combin",{"_index":709,"title":{"7-18":{},"7-26":{},"8-17":{},"10-21":{},"14-7":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["come",{"_index":2131,"title":{},"name":{},"text":{"10":{}},"component":{}}],["command",{"_index":2379,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{}}],["commerci",{"_index":2349,"title":{},"name":{},"text":{"11":{}},"component":{}}],["common",{"_index":827,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"10":{},"11":{}},"component":{}}],["commonli",{"_index":2651,"title":{},"name":{},"text":{"13":{}},"component":{}}],["commun",{"_index":2260,"title":{"11-11":{}},"name":{},"text":{"10":{}},"component":{}}],["compani",{"_index":2804,"title":{},"name":{},"text":{"14":{}},"component":{}}],["company_car_rang",{"_index":2010,"title":{},"name":{},"text":{"10":{}},"component":{}}],["compar",{"_index":392,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"13":{},"14":{}},"component":{}}],["compareto(self",{"_index":2810,"title":{},"name":{},"text":{"14":{}},"component":{}}],["comparison",{"_index":490,"title":{"7-36":{}},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"8":{},"14":{}},"component":{}}],["compat",{"_index":1955,"title":{"11-10":{}},"name":{},"text":{"10":{},"11":{},"14":{}},"component":{}}],["compens",{"_index":1789,"title":{},"name":{},"text":{"9":{}},"component":{}}],["competit",{"_index":1611,"title":{},"name":{},"text":{"8":{}},"component":{}}],["competitor",{"_index":1549,"title":{},"name":{},"text":{"7":{}},"component":{}}],["compil",{"_index":2846,"title":{},"name":{},"text":{"14":{}},"component":{}}],["complet",{"_index":1265,"title":{"11-3":{}},"name":{},"text":{"6":{},"8":{},"11":{},"13":{}},"component":{}}],["completablefuture[non",{"_index":2693,"title":{},"name":{},"text":{"13":{}},"component":{}}],["complete/np",{"_index":2321,"title":{},"name":{},"text":{"11":{}},"component":{}}],["complex",{"_index":525,"title":{},"name":{},"text":{"1":{},"3":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["complic",{"_index":2960,"title":{},"name":{},"text":{"14":{}},"component":{}}],["compon",{"_index":286,"title":{},"name":{},"text":{"1":{},"6":{},"10":{}},"component":{}}],["compos",{"_index":41,"title":{"1-19":{}},"name":{},"text":{"1":{},"7":{}},"component":{}}],["composit",{"_index":540,"title":{},"name":{},"text":{"1":{},"7":{}},"component":{}}],["compositemov",{"_index":1512,"title":{},"name":{},"text":{"7":{}},"component":{}}],["comput",{"_index":416,"title":{},"name":{},"text":{"1":{},"7":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["computer.cpu_pow",{"_index":431,"title":{},"name":{},"text":{"1":{}},"component":{}}],["computer_and_its_processes(constraint_factori",{"_index":497,"title":{},"name":{},"text":{"1":{}},"component":{}}],["computer_id",{"_index":1761,"title":{},"name":{},"text":{"8":{}},"component":{}}],["computer_list",{"_index":2714,"title":{},"name":{},"text":{"13":{}},"component":{}}],["computer_with_biggest_process(constraint_factori",{"_index":485,"title":{},"name":{},"text":{"1":{}},"component":{}}],["computer_with_long_running_processes(constraint_factori",{"_index":518,"title":{},"name":{},"text":{"1":{}},"component":{}}],["concept",{"_index":1157,"title":{"6-2":{}},"name":{},"text":{},"component":{}}],["concern",{"_index":1620,"title":{},"name":{},"text":{"8":{}},"component":{}}],["concurr",{"_index":1869,"title":{},"name":{},"text":{"10":{}},"component":{}}],["condit",{"_index":39,"title":{"1-18":{},"1-20":{},"13-14":{}},"name":{},"text":{"1":{},"13":{}},"component":{}}],["conduct",{"_index":2974,"title":{},"name":{},"text":{"14":{}},"component":{}}],["confer",{"_index":923,"title":{},"name":{},"text":{"3":{},"11":{},"14":{}},"component":{}}],["config",{"_index":1865,"title":{},"name":{},"text":{"10":{}},"component":{}}],["configur",{"_index":172,"title":{"10":{},"2-4":{},"2-7":{},"2-10":{},"2-13":{},"2-16":{},"2-19":{},"2-22":{},"2-27":{},"2-30":{},"2-33":{},"2-36":{},"5-4":{},"5-7":{},"6-12":{},"6-15":{},"6-18":{},"6-21":{},"6-24":{},"6-27":{},"6-29":{},"6-32":{},"10-2":{},"10-3":{},"10-4":{},"13-9":{}},"name":{"10":{}},"text":{"1":{},"2":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["conflict",{"_index":970,"title":{},"name":{},"text":{"3":{},"12":{},"14":{}},"component":{}}],["confront",{"_index":1409,"title":{},"name":{},"text":{"7":{}},"component":{}}],["confus",{"_index":1114,"title":{},"name":{},"text":{"5":{},"13":{}},"component":{}}],["congest",{"_index":1754,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["consecut",{"_index":1018,"title":{},"name":{},"text":{"3":{}},"component":{}}],["consequ",{"_index":263,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["consid",{"_index":267,"title":{"10-14":{}},"name":{},"text":{"1":{},"10":{},"13":{},"14":{}},"component":{}}],["consider",{"_index":760,"title":{},"name":{},"text":{"2":{},"10":{},"14":{}},"component":{}}],["consist",{"_index":176,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"10":{},"12":{},"14":{},"15":{}},"component":{}}],["constant",{"_index":299,"title":{},"name":{},"text":{"1":{},"6":{},"10":{}},"component":{}}],["constantli",{"_index":2615,"title":{},"name":{},"text":{"13":{}},"component":{}}],["constrain",{"_index":1905,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["constraint",{"_index":4,"title":{"1":{},"1-2":{},"1-3":{},"11-4":{},"12-7":{},"14-3":{},"14-4":{},"14-5":{},"14-6":{},"14-27":{},"14-28":{},"14-31":{},"14-32":{},"14-34":{}},"name":{"1":{}},"text":{"1":{},"2":{},"3":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["constraint_factory.for_each(cloudcomput",{"_index":546,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraint_factory.for_each(cloudprocess",{"_index":426,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraint_factory.for_each(lesson",{"_index":2462,"title":{},"name":{},"text":{"12":{}},"component":{}}],["constraint_factory.for_each(person",{"_index":604,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraint_factory.for_each(shift",{"_index":376,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraint_factory.foreach(processassignmentclass",{"_index":2673,"title":{},"name":{},"text":{"13":{}},"component":{}}],["constraint_match",{"_index":3032,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraint_match.getconstraintnam",{"_index":3043,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraint_match.getjustificationlist",{"_index":3035,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraint_match.getscor",{"_index":3036,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraint_match_en",{"_index":2938,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraint_match_tot",{"_index":3026,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraint_match_total.getconstraintmatchset",{"_index":3033,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraint_match_total.getconstraintnam",{"_index":3029,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraint_match_total.getscor",{"_index":3031,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraint_nam",{"_index":3028,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraint_provid",{"_index":160,"title":{},"name":{},"text":{"1":{},"10":{},"12":{}},"component":{}}],["constraintcollector",{"_index":424,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.averag",{"_index":470,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.average(lambda",{"_index":472,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.compos",{"_index":528,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.condition",{"_index":513,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.count",{"_index":440,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.count_distinct",{"_index":462,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.max",{"_index":479,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.max(lambda",{"_index":486,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.min",{"_index":478,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.sum",{"_index":419,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.sum(group_value_map",{"_index":531,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.sum(lambda",{"_index":428,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintcollectors.to_list",{"_index":496,"title":{},"name":{},"text":{"1":{}},"component":{}}],["constraintfactori",{"_index":116,"title":{},"name":{},"text":{"1":{},"12":{},"13":{}},"component":{}}],["constraintmatch",{"_index":3015,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraintmatchawareincrementalscorecalcul",{"_index":2763,"title":{"14-19":{}},"name":{},"text":{"14":{}},"component":{}}],["constraintmatchen",{"_index":2929,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraintmatchtot",{"_index":2934,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraintmatchtotal.getscor",{"_index":3037,"title":{},"name":{},"text":{"14":{}},"component":{}}],["constraintproviderclass",{"_index":1845,"title":{},"name":{},"text":{"10":{}},"component":{}}],["constraints.pi",{"_index":2457,"title":{},"name":{},"text":{"12":{}},"component":{}}],["constraintstream",{"_index":99,"title":{},"name":{},"text":{"1":{}},"component":{}}],["construct",{"_index":658,"title":{"2":{},"2-37":{},"2-39":{},"2-40":{}},"name":{"2":{}},"text":{"2":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{}},"component":{}}],["constructor",{"_index":1868,"title":{},"name":{},"text":{"10":{}},"component":{}}],["consum",{"_index":422,"title":{},"name":{},"text":{"1":{},"10":{},"13":{}},"component":{}}],["contain",{"_index":165,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["content",{"_index":588,"title":{},"name":{},"text":{"1":{}},"component":{}}],["context",{"_index":2103,"title":{},"name":{},"text":{"10":{}},"component":{}}],["contin",{"_index":1008,"title":{},"name":{},"text":{"3":{}},"component":{}}],["continu",{"_index":336,"title":{"13-6":{}},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"13":{},"14":{}},"component":{}}],["contribut",{"_index":831,"title":{},"name":{},"text":{"3":{}},"component":{}}],["conveni",{"_index":1714,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["convers",{"_index":552,"title":{},"name":{},"text":{"1":{}},"component":{}}],["convert",{"_index":1903,"title":{},"name":{},"text":{"10":{}},"component":{}}],["conway’",{"_index":2749,"title":{},"name":{},"text":{"13":{}},"component":{}}],["copi",{"_index":592,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["core",{"_index":1744,"title":{},"name":{},"text":{"8":{},"9":{},"11":{}},"component":{}}],["corner",{"_index":2648,"title":{},"name":{},"text":{"13":{}},"component":{}}],["correct",{"_index":1904,"title":{},"name":{},"text":{"10":{},"14":{},"15":{}},"component":{}}],["correctli",{"_index":1485,"title":{},"name":{},"text":{"7":{},"11":{},"13":{},"14":{}},"component":{}}],["correspond",{"_index":2509,"title":{},"name":{},"text":{"12":{}},"component":{}}],["corrupt",{"_index":2686,"title":{},"name":{},"text":{"13":{},"14":{},"15":{}},"component":{}}],["cost",{"_index":594,"title":{},"name":{},"text":{"1":{},"2":{},"8":{},"14":{},"15":{}},"component":{}}],["cost/profit",{"_index":2776,"title":{},"name":{},"text":{"14":{}},"component":{}}],["count",{"_index":29,"title":{"1-12":{},"6-7":{},"6-25":{}},"name":{},"text":{"1":{},"6":{},"8":{},"10":{},"14":{}},"component":{}}],["count_distinct",{"_index":30,"title":{"1-13":{}},"name":{},"text":{"1":{}},"component":{}}],["countabl",{"_index":1958,"title":{},"name":{},"text":{"10":{}},"component":{}}],["countablevaluerang",{"_index":1979,"title":{},"name":{},"text":{"10":{}},"component":{}}],["countbi",{"_index":453,"title":{},"name":{},"text":{"1":{}},"component":{}}],["counter",{"_index":1774,"title":{},"name":{},"text":{"8":{}},"component":{}}],["counterintuit",{"_index":2343,"title":{},"name":{},"text":{"11":{}},"component":{}}],["counterpart",{"_index":257,"title":{},"name":{},"text":{"1":{}},"component":{}}],["counterproduct",{"_index":1943,"title":{},"name":{},"text":{"10":{}},"component":{}}],["countquad",{"_index":455,"title":{},"name":{},"text":{"1":{}},"component":{}}],["countri",{"_index":192,"title":{},"name":{},"text":{"1":{}},"component":{}}],["counttri",{"_index":454,"title":{},"name":{},"text":{"1":{}},"component":{}}],["cours",{"_index":790,"title":{},"name":{},"text":{"2":{},"3":{},"7":{},"8":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["course_list",{"_index":2134,"title":{},"name":{},"text":{"10":{}},"component":{}}],["courseschedul",{"_index":2133,"title":{},"name":{},"text":{"10":{}},"component":{}}],["cp",{"_index":2389,"title":{},"name":{},"text":{"11":{}},"component":{}}],["cpu",{"_index":1606,"title":{},"name":{},"text":{"8":{},"9":{},"10":{},"13":{},"14":{}},"component":{}}],["cpython",{"_index":2356,"title":{},"name":{},"text":{"11":{}},"component":{}}],["craft",{"_index":1410,"title":{},"name":{},"text":{"7":{}},"component":{}}],["crash",{"_index":1614,"title":{},"name":{},"text":{"8":{}},"component":{}}],["creat",{"_index":3,"title":{"1-2":{},"7-24":{},"10-34":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"10":{},"12":{},"13":{},"14":{}},"component":{}}],["create/delet",{"_index":1407,"title":{},"name":{},"text":{"7":{}},"component":{}}],["create_column_list(n_queen",{"_index":2120,"title":{},"name":{},"text":{"10":{}},"component":{}}],["create_lecture_list(schedul",{"_index":2132,"title":{},"name":{},"text":{"10":{}},"component":{}}],["create_n_queens(n",{"_index":2116,"title":{},"name":{},"text":{"10":{}},"component":{}}],["create_queen_list(n_queen",{"_index":2124,"title":{},"name":{},"text":{"10":{}},"component":{}}],["create_row_list(n_queen",{"_index":2122,"title":{},"name":{},"text":{"10":{}},"component":{}}],["creation",{"_index":1995,"title":{},"name":{},"text":{"10":{}},"component":{}}],["criteria",{"_index":407,"title":{},"name":{},"text":{"1":{}},"component":{}}],["critic",{"_index":1533,"title":{},"name":{},"text":{"7":{}},"component":{}}],["cross",{"_index":1003,"title":{},"name":{},"text":{"3":{},"9":{}},"component":{}}],["cruz",{"_index":2554,"title":{},"name":{},"text":{"12":{}},"component":{}}],["curi",{"_index":2539,"title":{},"name":{},"text":{"12":{}},"component":{}}],["current",{"_index":198,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["curriculum",{"_index":1893,"title":{},"name":{},"text":{"10":{}},"component":{}}],["curriculum_list",{"_index":1896,"title":{},"name":{},"text":{"10":{}},"component":{}}],["curv",{"_index":2851,"title":{},"name":{},"text":{"14":{}},"component":{}}],["custom",{"_index":233,"title":{"6-33":{},"7-43":{},"8-20":{},"15-4":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["custom_shadow_vari",{"_index":3105,"title":{},"name":{},"text":{"15":{}},"component":{}}],["custom_shadow_variable(variable_listener_class",{"_index":3074,"title":{},"name":{},"text":{"15":{}},"component":{}}],["custom_shadow_variable(variable_listener_ref",{"_index":3101,"title":{},"name":{},"text":{"15":{}},"component":{}}],["customer_list",{"_index":2029,"title":{},"name":{},"text":{"10":{}},"component":{}}],["customer_list=non",{"_index":2025,"title":{},"name":{},"text":{"10":{}},"component":{}}],["customer_rang",{"_index":2032,"title":{},"name":{},"text":{"10":{}},"component":{}}],["cut",{"_index":1432,"title":{},"name":{},"text":{"7":{},"11":{}},"component":{}}],["cycl",{"_index":679,"title":{},"name":{},"text":{"2":{}},"component":{}}],["d",{"_index":213,"title":{},"name":{},"text":{"1":{},"7":{},"15":{}},"component":{}}],["d0",{"_index":1191,"title":{},"name":{},"text":{"6":{}},"component":{}}],["d2",{"_index":1192,"title":{},"name":{},"text":{"6":{}},"component":{}}],["daemon",{"_index":2603,"title":{"13-15":{}},"name":{},"text":{"13":{}},"component":{}}],["daili",{"_index":2624,"title":{},"name":{},"text":{"13":{}},"component":{}}],["damag",{"_index":2794,"title":{},"name":{},"text":{"14":{}},"component":{}}],["darwin",{"_index":2544,"title":{},"name":{},"text":{"12":{}},"component":{}}],["data",{"_index":585,"title":{},"name":{},"text":{"1":{},"3":{},"5":{},"8":{},"9":{},"10":{},"12":{},"13":{}},"component":{}}],["databas",{"_index":1760,"title":{},"name":{},"text":{"8":{},"10":{},"13":{}},"component":{}}],["dataclass",{"_index":1932,"title":{},"name":{},"text":{"10":{}},"component":{}}],["dataset",{"_index":1051,"title":{},"name":{},"text":{"3":{},"5":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["date",{"_index":858,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["datetim",{"_index":2511,"title":{},"name":{},"text":{"12":{}},"component":{}}],["datetime.d",{"_index":894,"title":{},"name":{},"text":{"3":{}},"component":{}}],["datetime.datetim",{"_index":895,"title":{},"name":{},"text":{"3":{}},"component":{}}],["day",{"_index":343,"title":{},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["day(",{"_index":1053,"title":{},"name":{},"text":{"3":{}},"component":{}}],["day_of_week",{"_index":2423,"title":{},"name":{},"text":{"12":{}},"component":{}}],["day_off",{"_index":345,"title":{},"name":{},"text":{"1":{}},"component":{}}],["day_off.d",{"_index":347,"title":{},"name":{},"text":{"1":{}},"component":{}}],["day_off.employe",{"_index":348,"title":{},"name":{},"text":{"1":{}},"component":{}}],["daylight",{"_index":899,"title":{},"name":{},"text":{"3":{}},"component":{}}],["dayoff",{"_index":189,"title":{},"name":{},"text":{"1":{}},"component":{}}],["deadlin",{"_index":2236,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["deal",{"_index":51,"title":{"1-23":{}},"name":{},"text":{"1":{},"2":{},"3":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["debug",{"_index":67,"title":{},"name":{},"text":{"1":{},"6":{},"8":{},"10":{}},"component":{}}],["decent",{"_index":1616,"title":{},"name":{},"text":{"8":{}},"component":{}}],["decid",{"_index":857,"title":{"6-4":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"13":{},"14":{}},"component":{}}],["decim",{"_index":2004,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["decis",{"_index":1231,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["declar",{"_index":1654,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["decor",{"_index":159,"title":{"10-9":{},"10-12":{}},"name":{},"text":{"1":{},"3":{},"10":{},"12":{},"14":{},"15":{}},"component":{}}],["decreas",{"_index":194,"title":{"2-5":{},"2-11":{},"2-17":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"13":{}},"component":{}}],["decreasing_difficulti",{"_index":722,"title":{},"name":{},"text":{"2":{},"5":{},"7":{}},"component":{}}],["decreasing_difficulty_if_avail",{"_index":719,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{}}],["decreasing_strength",{"_index":728,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{}}],["decreasing_strength_if_avail",{"_index":729,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{}}],["decrement",{"_index":1304,"title":{},"name":{},"text":{"6":{}},"component":{}}],["deduc",{"_index":1519,"title":{},"name":{},"text":{"7":{},"15":{}},"component":{}}],["deep",{"_index":2102,"title":{},"name":{},"text":{"10":{}},"component":{}}],["deep_planning_clon",{"_index":2109,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["deeper",{"_index":1125,"title":{},"name":{},"text":{"5":{}},"component":{}}],["deepest",{"_index":2955,"title":{},"name":{},"text":{"14":{}},"component":{}}],["deepli",{"_index":1782,"title":{},"name":{},"text":{"8":{}},"component":{}}],["def",{"_index":78,"title":{},"name":{},"text":{"1":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["default",{"_index":289,"title":{"7-27":{},"8-6":{},"10-42":{}},"name":{},"text":{"1":{},"2":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["defaultconstraintmatchtot",{"_index":2928,"title":{},"name":{},"text":{"14":{}},"component":{}}],["defaultconstraintmatchtotal('machinereassign",{"_index":2940,"title":{},"name":{},"text":{"14":{}},"component":{}}],["defin",{"_index":201,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["define_constraint",{"_index":173,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["define_constraints(constraint_factori",{"_index":2458,"title":{},"name":{},"text":{"12":{}},"component":{}}],["define_constraints(factori",{"_index":162,"title":{},"name":{},"text":{"1":{}},"component":{}}],["definit",{"_index":2849,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["degrad",{"_index":1233,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["degre",{"_index":2977,"title":{},"name":{},"text":{"14":{}},"component":{}}],["delay",{"_index":820,"title":{"3-8":{}},"name":{},"text":{"3":{},"13":{}},"component":{}}],["delay_rang",{"_index":1981,"title":{},"name":{},"text":{"10":{}},"component":{}}],["deleg",{"_index":514,"title":{},"name":{},"text":{"1":{},"14":{}},"component":{}}],["delet",{"_index":2617,"title":{},"name":{},"text":{"13":{}},"component":{}}],["delete_computer(comput",{"_index":2721,"title":{},"name":{},"text":{"13":{}},"component":{}}],["deletecomputerproblemchang",{"_index":2702,"title":{},"name":{},"text":{"13":{}},"component":{}}],["deleted_comput",{"_index":2703,"title":{},"name":{},"text":{"13":{}},"component":{}}],["deliv",{"_index":1022,"title":{},"name":{},"text":{"3":{},"10":{},"13":{}},"component":{}}],["deliveri",{"_index":938,"title":{},"name":{},"text":{"3":{}},"component":{}}],["delta",{"_index":1310,"title":{"14-25":{}},"name":{},"text":{"6":{},"8":{},"14":{}},"component":{}}],["delug",{"_index":1171,"title":{"6-22":{}},"name":{},"text":{"6":{},"8":{}},"component":{}}],["demand",{"_index":484,"title":{},"name":{},"text":{"1":{}},"component":{}}],["demonstr",{"_index":2605,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["denorm",{"_index":1900,"title":{},"name":{},"text":{"10":{}},"component":{}}],["depart",{"_index":936,"title":{},"name":{},"text":{"3":{},"10":{},"13":{}},"component":{}}],["department_room_rang",{"_index":1972,"title":{},"name":{},"text":{"10":{}},"component":{}}],["departur",{"_index":942,"title":{},"name":{},"text":{"3":{}},"component":{}}],["depend",{"_index":577,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["deplet",{"_index":1351,"title":{},"name":{},"text":{"6":{}},"component":{}}],["depot",{"_index":2024,"title":{},"name":{},"text":{"10":{}},"component":{}}],["deprec",{"_index":274,"title":{},"name":{},"text":{"1":{}},"component":{}}],["depth_first",{"_index":1123,"title":{},"name":{},"text":{"5":{}},"component":{}}],["descending_diagonal_index_list",{"_index":2914,"title":{},"name":{},"text":{"14":{}},"component":{}}],["descending_diagonal_index_list.append(queen",{"_index":2917,"title":{},"name":{},"text":{"14":{}},"component":{}}],["descending_diagonal_index_list.remove(queen",{"_index":2921,"title":{},"name":{},"text":{"14":{}},"component":{}}],["descending_diagonal_index_map",{"_index":2890,"title":{},"name":{},"text":{"14":{}},"component":{}}],["descent",{"_index":1173,"title":{"6-30":{}},"name":{},"text":{"6":{},"8":{}},"component":{}}],["describ",{"_index":767,"title":{},"name":{},"text":{"2":{},"3":{},"13":{}},"component":{}}],["descript",{"_index":294,"title":{"2-3":{},"2-6":{},"2-9":{},"2-12":{},"2-15":{},"2-18":{},"2-21":{},"2-26":{},"2-29":{},"2-32":{},"2-35":{},"5-3":{},"5-6":{},"6-10":{},"6-14":{},"6-17":{},"6-20":{},"6-23":{},"6-26":{},"6-28":{},"6-31":{},"9-1":{}},"name":{},"text":{"1":{},"7":{}},"component":{}}],["design",{"_index":48,"title":{"3":{},"1-22":{},"3-1":{}},"name":{"3":{}},"text":{"1":{},"3":{},"8":{},"10":{},"14":{}},"component":{}}],["desir",{"_index":1421,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["despit",{"_index":1353,"title":{},"name":{},"text":{"6":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["destin",{"_index":2286,"title":{},"name":{},"text":{"11":{}},"component":{}}],["detail",{"_index":2926,"title":{},"name":{},"text":{"14":{}},"component":{}}],["detect",{"_index":145,"title":{"14-21":{}},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"14":{},"15":{}},"component":{}}],["deterior",{"_index":746,"title":{},"name":{},"text":{"2":{},"6":{},"8":{}},"component":{}}],["determin",{"_index":816,"title":{"3-6":{}},"name":{},"text":{"3":{},"7":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["determinist",{"_index":940,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["develop",{"_index":2163,"title":{},"name":{},"text":{"10":{},"11":{},"14":{}},"component":{}}],["deviat",{"_index":2990,"title":{},"name":{},"text":{"14":{}},"component":{}}],["diagnost",{"_index":2997,"title":{},"name":{},"text":{"14":{}},"component":{}}],["diagram",{"_index":835,"title":{},"name":{},"text":{"3":{}},"component":{}}],["dict",{"_index":503,"title":{},"name":{},"text":{"1":{},"14":{},"15":{}},"component":{}}],["dictat",{"_index":2039,"title":{},"name":{},"text":{"10":{}},"component":{}}],["differ",{"_index":141,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["difficult",{"_index":696,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"10":{},"13":{},"14":{}},"component":{}}],["difficulti",{"_index":699,"title":{"10-10":{}},"name":{},"text":{"2":{},"5":{},"7":{},"10":{}},"component":{}}],["dire",{"_index":2331,"title":{},"name":{},"text":{"11":{}},"component":{}}],["direct",{"_index":331,"title":{"15-2":{}},"name":{},"text":{"1":{},"3":{},"15":{}},"component":{}}],["directli",{"_index":1675,"title":{},"name":{},"text":{"8":{},"10":{},"14":{}},"component":{}}],["disabl",{"_index":1242,"title":{},"name":{},"text":{"6":{},"10":{},"14":{}},"component":{}}],["disadvantag",{"_index":756,"title":{},"name":{},"text":{"2":{},"14":{}},"component":{}}],["discard",{"_index":1419,"title":{},"name":{},"text":{"7":{}},"component":{}}],["disciplin",{"_index":2274,"title":{},"name":{},"text":{"11":{}},"component":{}}],["discount",{"_index":1021,"title":{},"name":{},"text":{"3":{}},"component":{}}],["discov",{"_index":1060,"title":{},"name":{},"text":{"3":{},"8":{},"10":{}},"component":{}}],["dislik",{"_index":2412,"title":{},"name":{},"text":{"12":{}},"component":{}}],["display",{"_index":1656,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["disput",{"_index":852,"title":{},"name":{},"text":{"3":{}},"component":{}}],["disrupt",{"_index":954,"title":{"13-10":{}},"name":{},"text":{"3":{},"10":{},"13":{}},"component":{}}],["dist/optapi",{"_index":2390,"title":{},"name":{},"text":{"11":{}},"component":{}}],["distanc",{"_index":1487,"title":{},"name":{},"text":{"7":{}},"component":{}}],["distinct",{"_index":54,"title":{"1-23":{}},"name":{},"text":{"1":{},"14":{}},"component":{}}],["distinguish",{"_index":877,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["distract",{"_index":2993,"title":{},"name":{},"text":{"14":{}},"component":{}}],["distribut",{"_index":2198,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["divid",{"_index":1036,"title":{},"name":{},"text":{"3":{}},"component":{}}],["do",{"_index":365,"title":{"10-44":{}},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"14":{}},"component":{}}],["do_not_assign_ann(factori",{"_index":117,"title":{},"name":{},"text":{"1":{}},"component":{}}],["do_not_assign_ann(schedul",{"_index":79,"title":{},"name":{},"text":{"1":{}},"component":{}}],["doabl",{"_index":1232,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["doc",{"_index":615,"title":{},"name":{},"text":{},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}}}],["dochang",{"_index":2723,"title":{},"name":{},"text":{"13":{}},"component":{}}],["dochange(self",{"_index":2695,"title":{},"name":{},"text":{"13":{}},"component":{}}],["doctor",{"_index":2972,"title":{},"name":{},"text":{"14":{}},"component":{}}],["document",{"_index":1653,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"14":{}},"component":{}}],["doesn’t",{"_index":90,"title":{},"name":{},"text":{"1":{},"2":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{}},"component":{}}],["dogent",{"_index":741,"title":{},"name":{},"text":{"2":{}},"component":{}}],["domain",{"_index":811,"title":{"3-2":{},"12-4":{},"12-8":{}},"name":{},"text":{"3":{},"7":{},"8":{},"10":{},"12":{},"14":{}},"component":{}}],["domain.pi",{"_index":2414,"title":{},"name":{},"text":{"12":{}},"component":{}}],["domicil",{"_index":2042,"title":{},"name":{},"text":{"10":{}},"component":{}}],["domicile(standstil",{"_index":2047,"title":{},"name":{},"text":{"10":{}},"component":{}}],["domicile_list",{"_index":2058,"title":{},"name":{},"text":{"10":{}},"component":{}}],["donat",{"_index":1753,"title":{},"name":{},"text":{"8":{}},"component":{}}],["done",{"_index":601,"title":{},"name":{},"text":{"1":{},"2":{},"7":{},"13":{},"14":{}},"component":{}}],["don’t",{"_index":446,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"8":{}},"component":{}}],["doubl",{"_index":1999,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["down",{"_index":562,"title":{"13-8":{},"14-34":{}},"name":{},"text":{"1":{},"2":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["downcast",{"_index":1522,"title":{},"name":{},"text":{"7":{}},"component":{}}],["downcastentityclass",{"_index":1523,"title":{},"name":{},"text":{"7":{}},"component":{}}],["download",{"_index":2384,"title":{},"name":{},"text":{"11":{}},"component":{}}],["downstream",{"_index":597,"title":{},"name":{},"text":{"1":{}},"component":{}}],["dozen",{"_index":1141,"title":{},"name":{},"text":{"5":{}},"component":{}}],["draft",{"_index":2641,"title":{},"name":{},"text":{"13":{}},"component":{}}],["draw",{"_index":834,"title":{},"name":{},"text":{"3":{}},"component":{}}],["drive",{"_index":992,"title":{},"name":{},"text":{"3":{}},"component":{}}],["driver",{"_index":941,"title":{},"name":{},"text":{"3":{},"13":{},"14":{}},"component":{}}],["drool",{"_index":1626,"title":{},"name":{},"text":{"8":{}},"component":{}}],["drop",{"_index":1151,"title":{},"name":{},"text":{"5":{},"8":{}},"component":{}}],["dst",{"_index":898,"title":{},"name":{},"text":{"3":{}},"component":{}}],["due",{"_index":459,"title":{},"name":{},"text":{"1":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["duplic",{"_index":52,"title":{"1-23":{}},"name":{},"text":{"1":{},"3":{},"10":{}},"component":{}}],["durat",{"_index":892,"title":{},"name":{},"text":{"3":{},"8":{},"10":{},"12":{}},"component":{}}],["dure",{"_index":142,"title":{"14-26":{}},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["dynam",{"_index":324,"title":{},"name":{},"text":{"1":{},"10":{},"13":{},"14":{}},"component":{}}],["e",{"_index":1427,"title":{},"name":{},"text":{"7":{},"15":{}},"component":{}}],["ea",{"_index":1643,"title":{},"name":{},"text":{"8":{}},"component":{}}],["each",{"_index":152,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["earli",{"_index":640,"title":{"2-24":{},"6-8":{}},"name":{},"text":{"2":{},"6":{},"8":{}},"component":{}}],["earlier",{"_index":922,"title":{},"name":{},"text":{"3":{},"6":{},"13":{},"14":{}},"component":{}}],["earliest",{"_index":1713,"title":{},"name":{},"text":{"8":{}},"component":{}}],["easi",{"_index":64,"title":{"14-17":{}},"name":{},"text":{"1":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["easier",{"_index":1748,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["easiest",{"_index":740,"title":{},"name":{},"text":{"2":{},"14":{}},"component":{}}],["easili",{"_index":1078,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"8":{},"14":{},"15":{}},"component":{}}],["easy_score_calcul",{"_index":2852,"title":{},"name":{},"text":{"14":{}},"component":{}}],["easyscorecalcul",{"_index":2923,"title":{},"name":{},"text":{"14":{}},"component":{}}],["ecolog",{"_index":2309,"title":{},"name":{},"text":{"11":{}},"component":{}}],["edit",{"_index":2395,"title":{},"name":{},"text":{"11":{}},"component":{}}],["edmund",{"_index":1314,"title":{},"name":{},"text":{"6":{}},"component":{}}],["educ",{"_index":2280,"title":{},"name":{},"text":{"11":{}},"component":{}}],["effect",{"_index":214,"title":{},"name":{},"text":{"1":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["effici",{"_index":871,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["effort",{"_index":2644,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["eight",{"_index":1587,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["element",{"_index":229,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"10":{},"15":{}},"component":{}}],["elev",{"_index":950,"title":{},"name":{},"text":{"3":{}},"component":{}}],["elimin",{"_index":593,"title":{},"name":{},"text":{"1":{}},"component":{}}],["employ",{"_index":1343,"title":{},"name":{},"text":{"6":{},"12":{}},"component":{}}],["employe",{"_index":130,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["employee/asset",{"_index":2986,"title":{},"name":{},"text":{"14":{}},"component":{}}],["empti",{"_index":1514,"title":{},"name":{},"text":{"7":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["enabl",{"_index":100,"title":{},"name":{},"text":{"1":{},"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["encount",{"_index":1235,"title":{},"name":{},"text":{"6":{},"8":{},"10":{},"14":{}},"component":{}}],["end",{"_index":396,"title":{"10-49":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{}},"component":{}}],["end_tim",{"_index":2425,"title":{},"name":{},"text":{"12":{}},"component":{}}],["enforc",{"_index":1249,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"10":{}},"component":{}}],["engin",{"_index":1067,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["english",{"_index":2549,"title":{},"name":{},"text":{"12":{}},"component":{}}],["enough",{"_index":971,"title":{},"name":{},"text":{"3":{},"7":{},"11":{},"13":{},"14":{}},"component":{}}],["enrich",{"_index":1910,"title":{},"name":{},"text":{"10":{}},"component":{}}],["ensur",{"_index":737,"title":{},"name":{},"text":{"2":{},"8":{}},"component":{}}],["enterpris",{"_index":2212,"title":{},"name":{},"text":{"10":{}},"component":{}}],["entir",{"_index":97,"title":{},"name":{},"text":{"1":{},"5":{},"6":{},"8":{},"14":{},"15":{}},"component":{}}],["entiti",{"_index":128,"title":{"2-20":{},"2-23":{},"3-3":{},"7-4":{},"7-32":{},"10-6":{},"10-8":{},"10-9":{},"10-10":{},"10-19":{},"10-28":{},"12-6":{},"13-7":{},"13-8":{},"13-10":{},"14-35":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["entity_class",{"_index":3080,"title":{},"name":{},"text":{"15":{}},"component":{}}],["entity_typ",{"_index":2507,"title":{},"name":{},"text":{"12":{}},"component":{}}],["entityclass",{"_index":1518,"title":{},"name":{},"text":{"7":{},"10":{}},"component":{}}],["entityselector",{"_index":733,"title":{"6-33":{},"7-21":{}},"name":{},"text":{"2":{},"6":{},"7":{}},"component":{}}],["entitysortermann",{"_index":721,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{}}],["entity’",{"_index":996,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"13":{}},"component":{}}],["entrap",{"_index":955,"title":{},"name":{},"text":{"3":{}},"component":{}}],["enumer",{"_index":333,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["env",{"_index":2409,"title":{},"name":{},"text":{"12":{}},"component":{}}],["env/bin/activ",{"_index":2410,"title":{},"name":{},"text":{"12":{}},"component":{}}],["envi",{"_index":2983,"title":{},"name":{},"text":{"14":{}},"component":{}}],["environ",{"_index":1200,"title":{"10-38":{}},"name":{},"text":{"6":{},"10":{},"11":{},"12":{},"14":{}},"component":{}}],["environment",{"_index":2310,"title":{},"name":{},"text":{"11":{}},"component":{}}],["environmentmod",{"_index":1677,"title":{},"name":{},"text":{"8":{},"14":{}},"component":{}}],["epoch",{"_index":909,"title":{},"name":{},"text":{"3":{}},"component":{}}],["equal",{"_index":382,"title":{},"name":{},"text":{"1":{},"5":{},"6":{},"14":{}},"component":{}}],["equip",{"_index":2316,"title":{},"name":{},"text":{"11":{}},"component":{}}],["equival",{"_index":1038,"title":{},"name":{},"text":{"3":{},"14":{}},"component":{}}],["erasur",{"_index":461,"title":{},"name":{},"text":{"1":{}},"component":{}}],["errat",{"_index":1358,"title":{},"name":{},"text":{"6":{}},"component":{}}],["error",{"_index":1283,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["es",{"_index":1634,"title":{},"name":{},"text":{"8":{}},"component":{}}],["escap",{"_index":1324,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["especi",{"_index":798,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["essenti",{"_index":1444,"title":{},"name":{},"text":{"7":{},"8":{}},"component":{}}],["estim",{"_index":1668,"title":{},"name":{},"text":{"8":{},"14":{}},"component":{}}],["etc",{"_index":494,"title":{},"name":{},"text":{"1":{},"2":{},"7":{},"10":{},"11":{}},"component":{}}],["ev",{"_index":2790,"title":{},"name":{},"text":{"14":{}},"component":{}}],["evalu",{"_index":727,"title":{},"name":{},"text":{"2":{},"5":{},"6":{},"7":{},"11":{},"14":{}},"component":{}}],["even",{"_index":268,"title":{},"name":{},"text":{"1":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["evenli",{"_index":2984,"title":{},"name":{},"text":{"14":{}},"component":{}}],["event",{"_index":1723,"title":{},"name":{},"text":{"8":{},"10":{},"13":{},"15":{}},"component":{}}],["event.getnewbestscore().isfeas",{"_index":2746,"title":{},"name":{},"text":{"13":{}},"component":{}}],["event.getnewbestsolution().getscore().isfeas",{"_index":1732,"title":{},"name":{},"text":{"8":{}},"component":{}}],["event.iseveryproblemchangeprocess",{"_index":2745,"title":{},"name":{},"text":{"13":{}},"component":{}}],["event_listen",{"_index":1725,"title":{},"name":{},"text":{"8":{}},"component":{}}],["eventu",{"_index":2975,"title":{},"name":{},"text":{"14":{}},"component":{}}],["everyth",{"_index":2252,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["evil",{"_index":2969,"title":{},"name":{},"text":{"14":{}},"component":{}}],["evolutionari",{"_index":1061,"title":{"4":{},"4-2":{}},"name":{"4":{}},"text":{"4":{},"8":{}},"component":{}}],["evolv",{"_index":1065,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["exactli",{"_index":1259,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["exam",{"_index":966,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"14":{}},"component":{}}],["examin",{"_index":2088,"title":{},"name":{},"text":{"10":{}},"component":{}}],["exampl",{"_index":110,"title":{"13-13":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["example’",{"_index":883,"title":{},"name":{},"text":{"3":{}},"component":{}}],["except",{"_index":560,"title":{},"name":{},"text":{"1":{},"4":{},"6":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["exclud",{"_index":517,"title":{},"name":{},"text":{"1":{}},"component":{}}],["execut",{"_index":96,"title":{},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"12":{},"13":{},"14":{}},"component":{}}],["executor",{"_index":935,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["exhaust",{"_index":1082,"title":{"5":{},"5-8":{}},"name":{"5":{}},"text":{"5":{},"8":{}},"component":{}}],["exist",{"_index":1349,"title":{},"name":{},"text":{"6":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["exot",{"_index":1521,"title":{},"name":{},"text":{"7":{}},"component":{}}],["expect",{"_index":489,"title":{},"name":{},"text":{"1":{},"2":{},"13":{},"14":{}},"component":{}}],["expens",{"_index":1690,"title":{},"name":{},"text":{"8":{},"14":{}},"component":{}}],["experi",{"_index":1490,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["explain",{"_index":150,"title":{"14-32":{}},"name":{},"text":{"1":{},"7":{},"10":{},"12":{},"14":{}},"component":{}}],["explainscor",{"_index":2996,"title":{},"name":{},"text":{"14":{}},"component":{}}],["explan",{"_index":2350,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["explicit",{"_index":1543,"title":{},"name":{},"text":{"7":{}},"component":{}}],["explicitli",{"_index":1243,"title":{},"name":{},"text":{"6":{},"7":{},"10":{}},"component":{}}],["explod",{"_index":1090,"title":{},"name":{},"text":{"5":{}},"component":{}}],["explor",{"_index":1097,"title":{},"name":{},"text":{"5":{}},"component":{}}],["exponenti",{"_index":1091,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["export",{"_index":2195,"title":{},"name":{},"text":{"10":{}},"component":{}}],["expos",{"_index":3014,"title":{},"name":{},"text":{"14":{}},"component":{}}],["express",{"_index":3048,"title":{},"name":{},"text":{"15":{}},"component":{}}],["extend",{"_index":2809,"title":{},"name":{},"text":{"14":{}},"component":{}}],["extra",{"_index":849,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"13":{}},"component":{}}],["extract",{"_index":476,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["extrem",{"_index":2847,"title":{},"name":{},"text":{"14":{}},"component":{}}],["f",{"_index":1428,"title":{},"name":{},"text":{"7":{},"12":{},"13":{},"15":{}},"component":{}}],["f\"day_of_week={self.day_of_week",{"_index":2431,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"end_time={self.end_tim",{"_index":2433,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"id={self.id",{"_index":2430,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"lesson",{"_index":2450,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"lesson_list={format_list(self.lesson_list)},\\n",{"_index":2499,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"room(id={self.id",{"_index":2418,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"room={self.room",{"_index":2452,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"room_list={format_list(self.room_list)},\\n",{"_index":2498,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"score={str(self.score.tostr",{"_index":2500,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"start_time={self.start_tim",{"_index":2432,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"student_group={self.student_group",{"_index":2455,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"subject={self.subject",{"_index":2454,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"teacher={self.teach",{"_index":2453,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"timeslot",{"_index":2429,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"timeslot={self.timeslot",{"_index":2451,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"timeslot_list={format_list(self.timeslot_list)},\\n",{"_index":2497,"title":{},"name":{},"text":{"12":{}},"component":{}}],["f\"timet",{"_index":2496,"title":{},"name":{},"text":{"12":{}},"component":{}}],["facad",{"_index":2211,"title":{},"name":{},"text":{"10":{}},"component":{}}],["face",{"_index":2270,"title":{},"name":{},"text":{"11":{}},"component":{}}],["facebook",{"_index":2364,"title":{},"name":{},"text":{"11":{}},"component":{}}],["fact",{"_index":127,"title":{"10-6":{},"10-7":{},"10-30":{},"10-31":{},"12-5":{}},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["fact_typ",{"_index":2502,"title":{},"name":{},"text":{"12":{}},"component":{}}],["factor",{"_index":2153,"title":{},"name":{},"text":{"10":{}},"component":{}}],["factori",{"_index":1553,"title":{},"name":{},"text":{"7":{}},"component":{}}],["factory.for_each(shift",{"_index":118,"title":{},"name":{},"text":{"1":{}},"component":{}}],["factory.for_each(talk",{"_index":448,"title":{},"name":{},"text":{"1":{}},"component":{}}],["factory.for_each_including_null_vars(shift",{"_index":254,"title":{},"name":{},"text":{"1":{}},"component":{}}],["fail",{"_index":1416,"title":{},"name":{},"text":{"7":{},"10":{},"14":{}},"component":{}}],["failur",{"_index":1295,"title":{},"name":{},"text":{"6":{}},"component":{}}],["fair",{"_index":2768,"title":{"14-31":{}},"name":{},"text":{"14":{}},"component":{}}],["fairer",{"_index":2987,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fairli",{"_index":2165,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["fairselectorprobabilityweightfactori",{"_index":1510,"title":{},"name":{},"text":{"7":{}},"component":{}}],["fall",{"_index":1772,"title":{},"name":{},"text":{"8":{}},"component":{}}],["fals",{"_index":1245,"title":{},"name":{},"text":{"6":{},"7":{},"13":{},"14":{}},"component":{}}],["famili",{"_index":1629,"title":{},"name":{},"text":{"8":{}},"component":{}}],["familiar",{"_index":70,"title":{},"name":{},"text":{"1":{},"8":{}},"component":{}}],["far",{"_index":1406,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"11":{},"14":{}},"component":{}}],["fast",{"_index":672,"title":{},"name":{},"text":{"2":{},"6":{},"7":{},"8":{},"10":{},"14":{}},"component":{}}],["fast_assert",{"_index":1821,"title":{"10-41":{}},"name":{},"text":{"10":{},"14":{}},"component":{}}],["faster",{"_index":755,"title":{},"name":{},"text":{"2":{},"3":{},"9":{},"10":{},"14":{}},"component":{}}],["fastest",{"_index":2874,"title":{},"name":{},"text":{"14":{}},"component":{}}],["favorit",{"_index":2396,"title":{},"name":{},"text":{"11":{}},"component":{}}],["feasibl",{"_index":671,"title":{},"name":{},"text":{"2":{},"6":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["featur",{"_index":1379,"title":{"7-23":{}},"name":{},"text":{"7":{},"11":{},"14":{}},"component":{}}],["feel",{"_index":69,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["few",{"_index":1140,"title":{},"name":{},"text":{"5":{},"6":{},"8":{},"10":{},"11":{},"13":{}},"component":{}}],["field",{"_index":843,"title":{},"name":{},"text":{"3":{},"8":{},"10":{},"13":{}},"component":{}}],["fieldaccessingsolutionclon",{"_index":1814,"title":{"10-33":{}},"name":{},"text":{"10":{}},"component":{}}],["figur",{"_index":138,"title":{},"name":{},"text":{"1":{},"6":{},"10":{}},"component":{}}],["file",{"_index":1833,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["fill",{"_index":865,"title":{},"name":{},"text":{"3":{},"11":{},"13":{}},"component":{}}],["filter",{"_index":20,"title":{"1-8":{},"7-30":{},"7-31":{},"7-32":{},"7-33":{}},"name":{},"text":{"1":{},"2":{},"6":{},"7":{},"10":{},"14":{}},"component":{}}],["filter(lambda",{"_index":119,"title":{},"name":{},"text":{"1":{},"13":{}},"component":{}}],["final",{"_index":420,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"12":{},"13":{}},"component":{}}],["finalistpodiumtyp",{"_index":1344,"title":{},"name":{},"text":{"6":{}},"component":{}}],["financi",{"_index":2302,"title":{},"name":{},"text":{"11":{}},"component":{}}],["find",{"_index":129,"title":{"8-2":{}},"name":{},"text":{"1":{},"2":{},"5":{},"6":{},"7":{},"8":{},"9":{},"11":{},"14":{}},"component":{}}],["find_by_id(self",{"_index":2248,"title":{},"name":{},"text":{"10":{}},"component":{}}],["fine",{"_index":1331,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["finer",{"_index":986,"title":{},"name":{},"text":{"3":{}},"component":{}}],["finest",{"_index":1441,"title":{},"name":{},"text":{"7":{}},"component":{}}],["finish",{"_index":674,"title":{},"name":{},"text":{"2":{},"3":{},"13":{}},"component":{}}],["finit",{"_index":668,"title":{},"name":{},"text":{"2":{}},"component":{}}],["fire",{"_index":1722,"title":{},"name":{},"text":{"8":{}},"component":{}}],["first",{"_index":155,"title":{"2-2":{},"2-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["first_best_score_improv",{"_index":1258,"title":{},"name":{},"text":{"6":{}},"component":{}}],["first_feasible_scor",{"_index":753,"title":{},"name":{},"text":{"2":{}},"component":{}}],["first_feasible_score_or_non_deteriorating_hard",{"_index":754,"title":{},"name":{},"text":{"2":{}},"component":{}}],["first_fit",{"_index":693,"title":{},"name":{},"text":{"2":{}},"component":{}}],["first_fit_decreas",{"_index":702,"title":{},"name":{},"text":{"2":{},"7":{}},"component":{}}],["first_last_step_score_improv",{"_index":1261,"title":{},"name":{},"text":{"6":{}},"component":{}}],["first_non_deteriorating_scor",{"_index":745,"title":{},"name":{},"text":{"2":{}},"component":{}}],["fit",{"_index":617,"title":{"2-2":{},"2-5":{},"2-8":{},"2-11":{},"2-14":{},"2-17":{}},"name":{},"text":{"2":{},"3":{},"8":{},"10":{},"11":{},"12":{},"14":{}},"component":{}}],["five",{"_index":979,"title":{},"name":{},"text":{"3":{},"8":{},"13":{},"14":{}},"component":{}}],["fix",{"_index":813,"title":{"3-4":{}},"name":{},"text":{"3":{},"6":{},"10":{},"13":{}},"component":{}}],["fixedprobabilityweight",{"_index":1506,"title":{},"name":{},"text":{"7":{}},"component":{}}],["flatlin",{"_index":2971,"title":{},"name":{},"text":{"14":{}},"component":{}}],["flatmap",{"_index":600,"title":{},"name":{},"text":{"1":{}},"component":{}}],["flatten",{"_index":56,"title":{"1-24":{}},"name":{},"text":{"1":{}},"component":{}}],["flatten_last(lambda",{"_index":608,"title":{},"name":{},"text":{"1":{}},"component":{}}],["flexibl",{"_index":2341,"title":{},"name":{},"text":{"11":{},"13":{},"14":{}},"component":{}}],["float",{"_index":475,"title":{"14-9":{}},"name":{},"text":{"1":{},"10":{},"14":{}},"component":{}}],["focu",{"_index":856,"title":{},"name":{},"text":{"3":{},"7":{},"14":{}},"component":{}}],["focus",{"_index":1491,"title":{},"name":{},"text":{"7":{},"8":{},"10":{}},"component":{}}],["fold",{"_index":2802,"title":{},"name":{},"text":{"14":{}},"component":{}}],["follow",{"_index":137,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["food",{"_index":1024,"title":{},"name":{},"text":{"3":{}},"component":{}}],["footbal",{"_index":2299,"title":{},"name":{},"text":{"11":{}},"component":{}}],["footprint",{"_index":1527,"title":{},"name":{},"text":{"7":{},"11":{}},"component":{}}],["for_each",{"_index":238,"title":{},"name":{},"text":{"1":{}},"component":{}}],["for_each(t",{"_index":245,"title":{},"name":{},"text":{"1":{}},"component":{}}],["for_each_including_null_var",{"_index":252,"title":{},"name":{},"text":{"1":{}},"component":{}}],["forag",{"_index":1161,"title":{"6-6":{}},"name":{},"text":{"6":{},"8":{}},"component":{}}],["forc",{"_index":582,"title":{"5-2":{}},"name":{},"text":{"1":{},"5":{},"8":{},"11":{},"13":{},"14":{}},"component":{}}],["foreach",{"_index":15,"title":{"1-6":{}},"name":{},"text":{},"component":{}}],["foreachincludingnullvar",{"_index":1950,"title":{},"name":{},"text":{"10":{}},"component":{}}],["forev",{"_index":1666,"title":{},"name":{},"text":{"8":{}},"component":{}}],["forget",{"_index":2739,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["form",{"_index":60,"title":{},"name":{},"text":{"1":{},"2":{},"7":{},"8":{},"10":{},"15":{}},"component":{}}],["formal",{"_index":2755,"title":{"14-3":{}},"name":{},"text":{"14":{}},"component":{}}],["format",{"_index":1672,"title":{},"name":{},"text":{"8":{},"10":{},"12":{}},"component":{}}],["format_list(a_list",{"_index":2478,"title":{},"name":{},"text":{"12":{}},"component":{}}],["formula",{"_index":1605,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["forth",{"_index":3112,"title":{},"name":{},"text":{"15":{}},"component":{}}],["found",{"_index":881,"title":{},"name":{},"text":{"3":{},"8":{},"10":{},"11":{},"12":{},"13":{}},"component":{}}],["four",{"_index":975,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"13":{}},"component":{}}],["fraction",{"_index":1217,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["framework",{"_index":510,"title":{},"name":{},"text":{"1":{},"8":{}},"component":{}}],["fred",{"_index":1285,"title":{},"name":{},"text":{"6":{}},"component":{}}],["free",{"_index":1927,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"14":{}},"component":{}}],["freedom",{"_index":1977,"title":{},"name":{},"text":{"10":{},"13":{},"14":{}},"component":{}}],["freeli",{"_index":2642,"title":{},"name":{},"text":{"13":{}},"component":{}}],["freight",{"_index":1918,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["french",{"_index":2563,"title":{},"name":{},"text":{"12":{}},"component":{}}],["frequenc",{"_index":2643,"title":{},"name":{},"text":{"13":{}},"component":{}}],["frequent",{"_index":1678,"title":{},"name":{},"text":{"8":{},"10":{},"13":{}},"component":{}}],["friday",{"_index":2334,"title":{},"name":{},"text":{"11":{}},"component":{}}],["from_",{"_index":258,"title":{},"name":{},"text":{"1":{}},"component":{}}],["from_unfilt",{"_index":271,"title":{},"name":{},"text":{"1":{}},"component":{}}],["from_unique_pair",{"_index":272,"title":{},"name":{},"text":{"1":{}},"component":{}}],["front",{"_index":1660,"title":{},"name":{},"text":{"8":{}},"component":{}}],["fte",{"_index":1037,"title":{},"name":{},"text":{"3":{}},"component":{}}],["fuel",{"_index":2785,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fuel_cost",{"_index":2826,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fuel_cost_milli",{"_index":2828,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fulfil",{"_index":2104,"title":{},"name":{},"text":{"10":{},"11":{},"13":{},"14":{}},"component":{}}],["full",{"_index":316,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["full_assert",{"_index":1817,"title":{"10-39":{}},"name":{},"text":{"10":{},"14":{}},"component":{}}],["fulli",{"_index":2156,"title":{},"name":{},"text":{"10":{}},"component":{}}],["fun(solut",{"_index":2853,"title":{},"name":{},"text":{"14":{}},"component":{}}],["function",{"_index":49,"title":{"1-22":{},"7-36":{}},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["furnitur",{"_index":1033,"title":{},"name":{},"text":{"3":{}},"component":{}}],["further",{"_index":561,"title":{},"name":{},"text":{"1":{},"2":{},"6":{},"10":{},"13":{}},"component":{}}],["furthermor",{"_index":1497,"title":{},"name":{},"text":{"7":{},"10":{},"12":{},"14":{},"15":{}},"component":{}}],["futur",{"_index":276,"title":{},"name":{},"text":{"1":{},"4":{},"7":{},"8":{},"9":{},"10":{},"13":{}},"component":{}}],["g",{"_index":2636,"title":{},"name":{},"text":{"13":{}},"component":{}}],["gain",{"_index":1531,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["game",{"_index":2298,"title":{},"name":{},"text":{"11":{}},"component":{}}],["gap",{"_index":939,"title":{},"name":{},"text":{"3":{},"7":{},"12":{},"13":{}},"component":{}}],["garbag",{"_index":1651,"title":{},"name":{},"text":{"8":{}},"component":{}}],["gather",{"_index":1225,"title":{"12-8":{}},"name":{},"text":{"6":{}},"component":{}}],["gener",{"_index":151,"title":{"7-5":{},"7-6":{},"7-23":{},"10-46":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"12":{}},"component":{}}],["generate_problem",{"_index":2512,"title":{},"name":{},"text":{"12":{}},"component":{}}],["genet",{"_index":1063,"title":{"4-3":{}},"name":{},"text":{"4":{},"8":{}},"component":{}}],["genuin",{"_index":250,"title":{"10-11":{}},"name":{},"text":{"1":{},"3":{},"10":{},"15":{}},"component":{}}],["geoffrey’",{"_index":2363,"title":{},"name":{},"text":{"11":{}},"component":{}}],["geographi",{"_index":2565,"title":{},"name":{},"text":{"12":{}},"component":{}}],["get",{"_index":953,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["get_capacity(self",{"_index":3103,"title":{},"name":{},"text":{"15":{}},"component":{}}],["get_car(self",{"_index":2012,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_city(self",{"_index":2045,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_class",{"_index":2669,"title":{},"name":{},"text":{"13":{}},"component":{}}],["get_class(processassign",{"_index":2671,"title":{},"name":{},"text":{"13":{}},"component":{}}],["get_column_list(self",{"_index":2082,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_company_car_list(self",{"_index":2015,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_computer(self",{"_index":3050,"title":{},"name":{},"text":{"15":{}},"component":{}}],["get_computer_id(self",{"_index":1762,"title":{},"name":{},"text":{"8":{}},"component":{}}],["get_customer_list(self",{"_index":2033,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_delay_range(self",{"_index":1983,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_id(self",{"_index":2416,"title":{},"name":{},"text":{"12":{}},"component":{}}],["get_lesson_list(self",{"_index":2495,"title":{},"name":{},"text":{"12":{}},"component":{}}],["get_machine(self",{"_index":2664,"title":{},"name":{},"text":{"13":{}},"component":{}}],["get_next_customer(self",{"_index":3064,"title":{},"name":{},"text":{"15":{}},"component":{}}],["get_personal_car_list(self",{"_index":2017,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_possible_room_list(self",{"_index":1975,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_previous_standstill(self",{"_index":2054,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["get_process_list(self",{"_index":3055,"title":{},"name":{},"text":{"15":{}},"component":{}}],["get_queen_list(self",{"_index":2070,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_room(self",{"_index":1973,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["get_room_list(self",{"_index":2493,"title":{},"name":{},"text":{"12":{}},"component":{}}],["get_row(self",{"_index":1939,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_row_list(self",{"_index":1967,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_score(self",{"_index":2076,"title":{},"name":{},"text":{"10":{},"12":{},"14":{}},"component":{}}],["get_stock_amount_range(self",{"_index":1989,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_timeslot(self",{"_index":2443,"title":{},"name":{},"text":{"12":{}},"component":{}}],["get_timeslot_list(self",{"_index":2490,"title":{},"name":{},"text":{"12":{}},"component":{}}],["get_transport_time(self",{"_index":3099,"title":{},"name":{},"text":{"15":{}},"component":{}}],["get_used_man_hours_per_day_map(self",{"_index":3106,"title":{},"name":{},"text":{"15":{}},"component":{}}],["get_user_name(self",{"_index":1766,"title":{},"name":{},"text":{"8":{}},"component":{}}],["get_vehicle(self",{"_index":3070,"title":{},"name":{},"text":{"15":{}},"component":{}}],["get_worker(self",{"_index":1948,"title":{},"name":{},"text":{"10":{}},"component":{}}],["getbestsolut",{"_index":2155,"title":{},"name":{},"text":{"10":{}},"component":{}}],["getconstraintmatchtot",{"_index":2933,"title":{},"name":{},"text":{"14":{}},"component":{}}],["getconstraintmatchtotals(self",{"_index":2930,"title":{},"name":{},"text":{"14":{}},"component":{}}],["getid",{"_index":2421,"title":{},"name":{},"text":{"12":{}},"component":{}}],["getindictmentmap(self",{"_index":2932,"title":{},"name":{},"text":{"14":{}},"component":{}}],["getnewbestsolut",{"_index":1729,"title":{},"name":{},"text":{"8":{}},"component":{}}],["getpreviousstandstil",{"_index":3072,"title":{},"name":{},"text":{"15":{}},"component":{}}],["getsolverstatus(problemid",{"_index":2221,"title":{},"name":{},"text":{"10":{}},"component":{}}],["getter",{"_index":1759,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"13":{},"15":{}},"component":{}}],["gil",{"_index":1743,"title":{},"name":{},"text":{"8":{}},"component":{}}],["git",{"_index":2381,"title":{},"name":{},"text":{"11":{}},"component":{}}],["github",{"_index":2373,"title":{},"name":{},"text":{"11":{}},"component":{}}],["give",{"_index":441,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"14":{}},"component":{}}],["given",{"_index":516,"title":{},"name":{},"text":{"1":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["global",{"_index":907,"title":{},"name":{},"text":{"3":{},"5":{},"8":{},"14":{}},"component":{}}],["glover",{"_index":1286,"title":{},"name":{},"text":{"6":{}},"component":{}}],["go",{"_index":1269,"title":{},"name":{},"text":{"6":{},"10":{},"13":{},"14":{}},"component":{}}],["goal",{"_index":2306,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["goe",{"_index":2738,"title":{},"name":{},"text":{"13":{}},"component":{}}],["good",{"_index":667,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["govern",{"_index":2266,"title":{"11-7":{}},"name":{},"text":{},"component":{}}],["grace",{"_index":1718,"title":{},"name":{},"text":{"8":{}},"component":{}}],["gracefulli",{"_index":2737,"title":{},"name":{},"text":{"13":{}},"component":{}}],["grade",{"_index":2338,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{}}],["gradient",{"_index":1307,"title":{},"name":{},"text":{"6":{},"8":{},"10":{}},"component":{}}],["gradual",{"_index":1308,"title":{},"name":{},"text":{"6":{}},"component":{}}],["grain",{"_index":904,"title":{},"name":{},"text":{"3":{},"7":{},"14":{}},"component":{}}],["grand",{"_index":1539,"title":{},"name":{},"text":{"7":{}},"component":{}}],["granular",{"_index":926,"title":{},"name":{},"text":{"3":{}},"component":{}}],["graph",{"_index":1139,"title":{},"name":{},"text":{"5":{},"15":{}},"component":{}}],["graph_typ",{"_index":3060,"title":{},"name":{},"text":{"15":{}},"component":{}}],["graph_type=planningvariablegraphtype.chain",{"_index":2053,"title":{},"name":{},"text":{"10":{}},"component":{}}],["great",{"_index":1170,"title":{"6-22":{}},"name":{},"text":{"6":{},"7":{},"8":{},"10":{}},"component":{}}],["great_delug",{"_index":1326,"title":{},"name":{},"text":{"6":{}},"component":{}}],["greatdelugewaterlevelincrementratio",{"_index":1330,"title":{},"name":{},"text":{"6":{}},"component":{}}],["greatdelugewaterlevelincrementscor",{"_index":1329,"title":{},"name":{},"text":{"6":{}},"component":{}}],["greaterthan",{"_index":388,"title":{},"name":{},"text":{"1":{}},"component":{}}],["greaterthanorequ",{"_index":389,"title":{},"name":{},"text":{"1":{}},"component":{}}],["green",{"_index":1189,"title":{},"name":{},"text":{"6":{}},"component":{}}],["group",{"_index":24,"title":{"1-10":{}},"name":{},"text":{"1":{},"12":{},"13":{},"14":{}},"component":{}}],["group_bi",{"_index":183,"title":{},"name":{},"text":{"1":{}},"component":{}}],["group_by(lambda",{"_index":196,"title":{},"name":{},"text":{"1":{}},"component":{}}],["group_sum",{"_index":534,"title":{},"name":{},"text":{"1":{}},"component":{}}],["grow",{"_index":2638,"title":{},"name":{},"text":{"13":{}},"component":{}}],["guarante",{"_index":506,"title":{},"name":{},"text":{"1":{},"2":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["gui",{"_index":2729,"title":{},"name":{},"text":{"13":{}},"component":{}}],["gui_solut",{"_index":2715,"title":{},"name":{},"text":{"13":{}},"component":{}}],["guid",{"_index":1886,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["guidelin",{"_index":235,"title":{"3-2":{}},"name":{},"text":{"1":{},"3":{}},"component":{}}],["h",{"_index":2633,"title":{},"name":{},"text":{"13":{}},"component":{}}],["hack",{"_index":2801,"title":{},"name":{},"text":{"14":{}},"component":{}}],["half",{"_index":983,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hand",{"_index":796,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"8":{}},"component":{}}],["handl",{"_index":994,"title":{},"name":{},"text":{"3":{},"5":{},"10":{},"13":{},"14":{}},"component":{}}],["happen",{"_index":1268,"title":{},"name":{},"text":{"6":{},"7":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["happi",{"_index":2365,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["hard",{"_index":802,"title":{"11-3":{},"11-4":{},"14-6":{},"14-28":{}},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["harder",{"_index":1043,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"11":{}},"component":{}}],["hardmediumsoftscor",{"_index":2762,"title":{"14-13":{}},"name":{},"text":{"14":{}},"component":{}}],["hardmediumsoftscore.of(1",{"_index":306,"title":{},"name":{},"text":{"1":{}},"component":{}}],["hardsoftscor",{"_index":114,"title":{"14-12":{}},"name":{},"text":{"1":{},"8":{},"10":{},"12":{},"14":{}},"component":{}}],["hardsoftscore.ofsoft(1000",{"_index":2677,"title":{},"name":{},"text":{"13":{}},"component":{}}],["hardsoftscore.one_hard",{"_index":305,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["hardsoftscore.one_soft",{"_index":122,"title":{},"name":{},"text":{"1":{}},"component":{}}],["hardsoftscore.zero",{"_index":2942,"title":{},"name":{},"text":{"14":{}},"component":{}}],["hardwar",{"_index":1149,"title":{},"name":{},"text":{"5":{},"8":{}},"component":{}}],["harm",{"_index":2176,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["harvest",{"_index":2780,"title":{},"name":{},"text":{"14":{}},"component":{}}],["has_unavailable_speak",{"_index":451,"title":{},"name":{},"text":{"1":{}},"component":{}}],["hasn’t",{"_index":2074,"title":{},"name":{},"text":{"10":{}},"component":{}}],["have",{"_index":107,"title":{},"name":{},"text":{"1":{},"2":{},"10":{},"15":{}},"component":{}}],["heat",{"_index":2771,"title":{"14-35":{}},"name":{},"text":{"14":{}},"component":{}}],["heavili",{"_index":1602,"title":{},"name":{},"text":{"8":{},"10":{},"14":{}},"component":{}}],["help",{"_index":2317,"title":{},"name":{},"text":{"11":{},"13":{},"14":{}},"component":{}}],["henc",{"_index":1745,"title":{},"name":{},"text":{"8":{}},"component":{}}],["here",{"_index":318,"title":{},"name":{},"text":{"1":{},"8":{},"10":{},"11":{}},"component":{}}],["here’",{"_index":1281,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["heurist",{"_index":659,"title":{"2":{},"2-37":{},"2-39":{},"2-40":{}},"name":{"2":{}},"text":{"2":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["high",{"_index":988,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"13":{},"14":{}},"component":{}}],["higher",{"_index":10,"title":{"1-4":{}},"name":{},"text":{"1":{},"5":{},"6":{},"7":{},"8":{},"9":{},"12":{},"13":{},"14":{}},"component":{}}],["highest",{"_index":1182,"title":{},"name":{},"text":{"6":{},"11":{},"12":{},"14":{}},"component":{}}],["highest_scor",{"_index":1346,"title":{},"name":{},"text":{"6":{}},"component":{}}],["highli",{"_index":2157,"title":{},"name":{},"text":{"10":{}},"component":{}}],["highlight",{"_index":1188,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["hill",{"_index":1075,"title":{"6-9":{},"6-25":{}},"name":{},"text":{"4":{},"6":{},"8":{}},"component":{}}],["hill_climb",{"_index":1275,"title":{},"name":{},"text":{"6":{}},"component":{}}],["histor",{"_index":1929,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["histori",{"_index":2546,"title":{},"name":{},"text":{"12":{},"13":{}},"component":{}}],["hit",{"_index":1092,"title":{},"name":{},"text":{"5":{}},"component":{}}],["hog",{"_index":2145,"title":{},"name":{},"text":{"10":{}},"component":{}}],["hold",{"_index":1277,"title":{},"name":{},"text":{"6":{},"10":{},"12":{},"14":{}},"component":{}}],["holiday",{"_index":1039,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hood",{"_index":2320,"title":{},"name":{},"text":{"11":{}},"component":{}}],["horribl",{"_index":1137,"title":{},"name":{},"text":{"5":{},"10":{}},"component":{}}],["hospit",{"_index":2613,"title":{},"name":{},"text":{"13":{}},"component":{}}],["hot",{"_index":2772,"title":{"14-35":{}},"name":{},"text":{},"component":{}}],["hour",{"_index":328,"title":{},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"11":{}},"component":{}}],["hourli",{"_index":2625,"title":{},"name":{},"text":{"13":{}},"component":{}}],["http",{"_index":2146,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["https://github.com/optapy/optapy.git",{"_index":2386,"title":{},"name":{},"text":{"11":{}},"component":{}}],["huge",{"_index":800,"title":{"11-5":{}},"name":{},"text":{"2":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["human",{"_index":292,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"8":{},"13":{}},"component":{}}],["id",{"_index":315,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["id'",{"_index":1942,"title":{},"name":{},"text":{"10":{}},"component":{}}],["idea",{"_index":1246,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["ideal",{"_index":775,"title":{},"name":{},"text":{"2":{},"13":{}},"component":{}}],["identif",{"_index":1758,"title":{},"name":{},"text":{"8":{}},"component":{}}],["identifi",{"_index":587,"title":{},"name":{},"text":{"1":{}},"component":{}}],["if_exist",{"_index":550,"title":{},"name":{},"text":{"1":{}},"component":{}}],["if_exists(cloudprocess",{"_index":547,"title":{},"name":{},"text":{"1":{}},"component":{}}],["if_exists_oth",{"_index":551,"title":{},"name":{},"text":{"1":{}},"component":{}}],["if_not_exist",{"_index":553,"title":{},"name":{},"text":{"1":{}},"component":{}}],["if_not_exists(cloudprocess",{"_index":557,"title":{},"name":{},"text":{"1":{}},"component":{}}],["if_not_exists_oth",{"_index":555,"title":{},"name":{},"text":{"1":{}},"component":{}}],["ifexist",{"_index":402,"title":{},"name":{},"text":{"1":{}},"component":{}}],["ignor",{"_index":747,"title":{},"name":{},"text":{"2":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["ignoreemptychilditer",{"_index":1513,"title":{},"name":{},"text":{"7":{}},"component":{}}],["illumin",{"_index":2171,"title":{},"name":{},"text":{"10":{}},"component":{}}],["illustr",{"_index":139,"title":{},"name":{},"text":{"1":{},"14":{}},"component":{}}],["imag",{"_index":2781,"title":{},"name":{},"text":{"14":{}},"component":{}}],["immedi",{"_index":370,"title":{},"name":{},"text":{"1":{},"3":{},"10":{},"13":{}},"component":{}}],["immut",{"_index":584,"title":{},"name":{},"text":{"1":{},"3":{},"10":{},"13":{}},"component":{}}],["impact",{"_index":311,"title":{},"name":{},"text":{"1":{},"3":{},"5":{},"7":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["implement",{"_index":76,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["impli",{"_index":1552,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"13":{}},"component":{}}],["implic",{"_index":2330,"title":{},"name":{},"text":{"11":{}},"component":{}}],["import",{"_index":113,"title":{},"name":{},"text":{"1":{},"2":{},"6":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["importantli",{"_index":2621,"title":{},"name":{},"text":{"13":{}},"component":{}}],["imposs",{"_index":689,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"8":{},"11":{},"13":{}},"component":{}}],["improv",{"_index":284,"title":{},"name":{},"text":{"1":{},"2":{},"5":{},"6":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["incent",{"_index":2973,"title":{},"name":{},"text":{"14":{}},"component":{}}],["includ",{"_index":168,"title":{},"name":{},"text":{"1":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["incomplet",{"_index":2604,"title":{},"name":{},"text":{"13":{}},"component":{}}],["inconsist",{"_index":2166,"title":{},"name":{},"text":{"10":{}},"component":{}}],["incorpor",{"_index":1604,"title":{},"name":{},"text":{"8":{}},"component":{}}],["incorrect",{"_index":1488,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["increas",{"_index":182,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"14":{}},"component":{}}],["increasing_strength",{"_index":726,"title":{},"name":{},"text":{"2":{},"5":{},"7":{}},"component":{}}],["increasing_strength_if_avail",{"_index":720,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{}}],["incred",{"_index":1595,"title":{},"name":{},"text":{"8":{},"11":{}},"component":{}}],["increment",{"_index":61,"title":{"8-24":{},"14-18":{},"14-25":{}},"name":{},"text":{"1":{},"6":{},"8":{},"10":{},"14":{}},"component":{}}],["incremental_score_calcul",{"_index":2886,"title":{},"name":{},"text":{"14":{}},"component":{}}],["incrementalscorecalcul",{"_index":2876,"title":{},"name":{},"text":{"14":{}},"component":{}}],["incrementunit",{"_index":1985,"title":{},"name":{},"text":{"10":{}},"component":{}}],["independ",{"_index":1704,"title":{},"name":{},"text":{"8":{},"14":{}},"component":{}}],["index",{"_index":1115,"title":{},"name":{},"text":{"5":{},"6":{},"10":{},"11":{},"14":{}},"component":{}}],["index_in_shift",{"_index":878,"title":{},"name":{},"text":{"3":{}},"component":{}}],["indic",{"_index":300,"title":{},"name":{},"text":{"1":{},"8":{},"13":{}},"component":{}}],["indict",{"_index":2770,"title":{"14-35":{}},"name":{},"text":{"14":{}},"component":{}}],["indictment.getconstraintmatchset",{"_index":3042,"title":{},"name":{},"text":{"14":{}},"component":{}}],["indictment.getscor",{"_index":3041,"title":{},"name":{},"text":{"14":{}},"component":{}}],["indictment.getscoretot",{"_index":3044,"title":{},"name":{},"text":{"14":{}},"component":{}}],["indictment_map",{"_index":3038,"title":{},"name":{},"text":{"14":{}},"component":{}}],["indictment_map.get(process",{"_index":3040,"title":{},"name":{},"text":{"14":{}},"component":{}}],["indirect",{"_index":3110,"title":{},"name":{},"text":{"15":{}},"component":{}}],["individu",{"_index":542,"title":{},"name":{},"text":{"1":{},"7":{},"14":{}},"component":{}}],["ineffici",{"_index":366,"title":{},"name":{},"text":{"1":{},"6":{},"15":{}},"component":{}}],["infeas",{"_index":1603,"title":{},"name":{},"text":{"8":{},"12":{},"13":{},"14":{}},"component":{}}],["inferior",{"_index":1074,"title":{},"name":{},"text":{"4":{}},"component":{}}],["infin",{"_index":1468,"title":{},"name":{},"text":{"7":{}},"component":{}}],["infinit",{"_index":215,"title":{},"name":{},"text":{"1":{},"3":{},"13":{}},"component":{}}],["inflat",{"_index":957,"title":{},"name":{},"text":{"3":{}},"component":{}}],["inflict",{"_index":974,"title":{},"name":{},"text":{"3":{}},"component":{}}],["influenc",{"_index":1679,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["info",{"_index":1199,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["inform",{"_index":433,"title":{},"name":{},"text":{"1":{},"11":{},"12":{}},"component":{}}],["initi",{"_index":244,"title":{"10-14":{}},"name":{},"text":{"1":{},"2":{},"5":{},"6":{},"8":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["initializingscoretrend",{"_index":661,"title":{"2-38":{},"14-20":{}},"name":{},"text":{"2":{},"5":{}},"component":{}}],["initscor",{"_index":2811,"title":{},"name":{},"text":{"14":{}},"component":{}}],["inject",{"_index":1424,"title":{},"name":{},"text":{"7":{}},"component":{}}],["inner",{"_index":361,"title":{},"name":{},"text":{"1":{},"8":{}},"component":{}}],["input",{"_index":578,"title":{},"name":{},"text":{"1":{},"12":{},"15":{}},"component":{}}],["insert",{"_index":646,"title":{"2-28":{},"2-31":{}},"name":{},"text":{"2":{},"8":{},"10":{}},"component":{}}],["insert(self",{"_index":2903,"title":{},"name":{},"text":{"14":{}},"component":{}}],["insid",{"_index":2021,"title":{},"name":{},"text":{"10":{}},"component":{}}],["instal",{"_index":2353,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{}}],["instanc",{"_index":124,"title":{"10-26":{}},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["instead",{"_index":371,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["instruct",{"_index":1661,"title":{},"name":{},"text":{"8":{}},"component":{}}],["int",{"_index":452,"title":{},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"14":{}},"component":{}}],["integ",{"_index":1252,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["integer.min_valu",{"_index":1696,"title":{},"name":{},"text":{"8":{}},"component":{}}],["intellig",{"_index":2151,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["intend",{"_index":2812,"title":{},"name":{},"text":{"14":{}},"component":{}}],["interest",{"_index":374,"title":{},"name":{},"text":{"1":{}},"component":{}}],["interfac",{"_index":202,"title":{"10-36":{},"14-8":{}},"name":{},"text":{"1":{},"7":{},"8":{},"10":{},"14":{},"15":{}},"component":{}}],["interfer",{"_index":1978,"title":{},"name":{},"text":{"10":{}},"component":{}}],["intermedi",{"_index":860,"title":{},"name":{},"text":{"3":{},"7":{},"10":{}},"component":{}}],["intern",{"_index":1612,"title":{},"name":{},"text":{"8":{},"10":{},"14":{}},"component":{}}],["interpret",{"_index":1741,"title":{},"name":{},"text":{"8":{}},"component":{}}],["interrupt",{"_index":1716,"title":{},"name":{},"text":{"8":{}},"component":{}}],["interv",{"_index":398,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["intrepret",{"_index":1775,"title":{},"name":{},"text":{"8":{}},"component":{}}],["introduc",{"_index":1909,"title":{},"name":{},"text":{"10":{}},"component":{}}],["introduct",{"_index":1,"title":{"11":{},"1-1":{},"3-1":{},"7-1":{},"13-1":{},"15-1":{}},"name":{"11":{}},"text":{},"component":{}}],["intrus",{"_index":2160,"title":{},"name":{},"text":{"10":{}},"component":{}}],["invalid",{"_index":2036,"title":{"14-21":{}},"name":{},"text":{"10":{},"13":{}},"component":{}}],["invalu",{"_index":2180,"title":{},"name":{},"text":{"10":{}},"component":{}}],["invers",{"_index":854,"title":{"15-2":{}},"name":{},"text":{"3":{}},"component":{}}],["inverse_relation_shadow_vari",{"_index":3053,"title":{},"name":{},"text":{"15":{}},"component":{}}],["inverse_relation_shadow_variable(custom",{"_index":3063,"title":{},"name":{},"text":{"15":{}},"component":{}}],["inverse_relation_shadow_variable(source_variable_nam",{"_index":3054,"title":{},"name":{},"text":{"15":{}},"component":{}}],["invest",{"_index":1649,"title":{},"name":{},"text":{"8":{},"11":{}},"component":{}}],["investig",{"_index":1099,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["involv",{"_index":803,"title":{},"name":{},"text":{"2":{},"6":{},"8":{},"14":{}},"component":{}}],["irrespect",{"_index":2836,"title":{},"name":{},"text":{"14":{}},"component":{}}],["is_moved(self",{"_index":2665,"title":{},"name":{},"text":{"13":{}},"component":{}}],["is_pinned(self",{"_index":2652,"title":{},"name":{},"text":{"13":{}},"component":{}}],["iseveryproblemchangeprocessed(self",{"_index":2691,"title":{},"name":{},"text":{"13":{}},"component":{}}],["isfeas",{"_index":1730,"title":{},"name":{},"text":{"8":{}},"component":{}}],["isn’t",{"_index":670,"title":{},"name":{},"text":{"2":{},"11":{},"15":{}},"component":{}}],["iso",{"_index":1670,"title":{},"name":{},"text":{"8":{}},"component":{}}],["isol",{"_index":1750,"title":{},"name":{},"text":{"8":{}},"component":{}}],["issu",{"_index":1135,"title":{},"name":{},"text":{"5":{},"8":{},"10":{},"11":{}},"component":{}}],["isterminateearly(self",{"_index":1712,"title":{},"name":{},"text":{"8":{}},"component":{}}],["item",{"_index":404,"title":{},"name":{},"text":{"1":{},"11":{},"14":{}},"component":{}}],["iter",{"_index":74,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"8":{}},"component":{}}],["iterator[mov",{"_index":1414,"title":{},"name":{},"text":{"7":{}},"component":{}}],["itself",{"_index":1465,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"13":{}},"component":{}}],["it’",{"_index":231,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["j",{"_index":2634,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["jan",{"_index":910,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jar",{"_index":2388,"title":{},"name":{},"text":{"11":{}},"component":{}}],["java",{"_index":598,"title":{},"name":{},"text":{"1":{},"11":{},"14":{}},"component":{}}],["java.util.random",{"_index":2203,"title":{},"name":{},"text":{"10":{}},"component":{}}],["java_hom",{"_index":2966,"title":{},"name":{},"text":{"14":{}},"component":{}}],["javadoc",{"_index":2144,"title":{},"name":{},"text":{"10":{}},"component":{}}],["java’",{"_index":460,"title":{},"name":{},"text":{"1":{}},"component":{}}],["jdk",{"_index":1204,"title":{},"name":{},"text":{"6":{},"10":{},"11":{},"14":{}},"component":{}}],["jit",{"_index":1471,"title":{},"name":{},"text":{"7":{}},"component":{}}],["job",{"_index":606,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"11":{}},"component":{}}],["job.assigne",{"_index":607,"title":{},"name":{},"text":{"1":{}},"component":{}}],["job.required_rol",{"_index":609,"title":{},"name":{},"text":{"1":{}},"component":{}}],["join",{"_index":22,"title":{"1-9":{}},"name":{},"text":{"1":{}},"component":{}}],["join(countri",{"_index":190,"title":{},"name":{},"text":{"1":{}},"component":{}}],["join(dayoff",{"_index":187,"title":{},"name":{},"text":{"1":{}},"component":{}}],["join(employe",{"_index":185,"title":{},"name":{},"text":{"1":{}},"component":{}}],["join(job",{"_index":605,"title":{},"name":{},"text":{"1":{}},"component":{}}],["join(lesson",{"_index":2463,"title":{},"name":{},"text":{"12":{}},"component":{}}],["join(shift",{"_index":219,"title":{},"name":{},"text":{"1":{}},"component":{}}],["joiner",{"_index":353,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["joiners.equal(lambda",{"_index":377,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["joiners.less_than(lambda",{"_index":2466,"title":{},"name":{},"text":{"12":{}},"component":{}}],["jone",{"_index":2547,"title":{},"name":{},"text":{"12":{}},"component":{}}],["journey",{"_index":1923,"title":{},"name":{},"text":{"10":{}},"component":{}}],["jupyt",{"_index":2405,"title":{},"name":{},"text":{"12":{}},"component":{}}],["just_in_tim",{"_index":1526,"title":{},"name":{},"text":{"7":{}},"component":{}}],["justif",{"_index":109,"title":{},"name":{},"text":{"1":{},"14":{}},"component":{}}],["justification_list",{"_index":3034,"title":{},"name":{},"text":{"14":{}},"component":{}}],["jvm",{"_index":1652,"title":{},"name":{},"text":{"8":{}},"component":{}}],["k",{"_index":1315,"title":{},"name":{},"text":{"6":{},"13":{}},"component":{}}],["keep",{"_index":576,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"13":{}},"component":{}}],["kept",{"_index":1928,"title":{},"name":{},"text":{"10":{}},"component":{}}],["key",{"_index":408,"title":{},"name":{},"text":{"1":{}},"component":{}}],["keyword",{"_index":329,"title":{},"name":{},"text":{"1":{}},"component":{}}],["kill",{"_index":2740,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["kit",{"_index":2355,"title":{},"name":{},"text":{"11":{}},"component":{}}],["know",{"_index":880,"title":{},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["known",{"_index":243,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"8":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["lab",{"_index":925,"title":{},"name":{},"text":{"3":{}},"component":{}}],["lack",{"_index":2620,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["lambda",{"_index":325,"title":{},"name":{},"text":{"1":{},"10":{},"13":{}},"component":{}}],["landscap",{"_index":1359,"title":{},"name":{},"text":{"6":{}},"component":{}}],["languag",{"_index":2340,"title":{},"name":{},"text":{"11":{}},"component":{}}],["larg",{"_index":1298,"title":{},"name":{},"text":{"6":{},"8":{},"9":{},"10":{},"11":{}},"component":{}}],["larger",{"_index":1687,"title":{},"name":{},"text":{"8":{}},"component":{}}],["largest",{"_index":762,"title":{},"name":{},"text":{"2":{},"11":{}},"component":{}}],["last",{"_index":782,"title":{"3-8":{}},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["late",{"_index":1169,"title":{"6-19":{}},"name":{},"text":{"6":{},"8":{},"10":{}},"component":{}}],["late_accept",{"_index":1320,"title":{},"name":{},"text":{"6":{}},"component":{}}],["lateacceptances",{"_index":1321,"title":{},"name":{},"text":{"6":{}},"component":{}}],["latenc",{"_index":2963,"title":{},"name":{},"text":{"14":{}},"component":{}}],["later",{"_index":583,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{},"13":{}},"component":{}}],["latest",{"_index":2967,"title":{},"name":{},"text":{"14":{}},"component":{}}],["latter",{"_index":193,"title":{},"name":{},"text":{"1":{},"13":{},"14":{}},"component":{}}],["law",{"_index":1154,"title":{},"name":{},"text":{"5":{},"13":{}},"component":{}}],["layer",{"_index":1128,"title":{},"name":{},"text":{"5":{},"10":{}},"component":{}}],["layman’",{"_index":2322,"title":{},"name":{},"text":{"11":{}},"component":{}}],["lead",{"_index":1104,"title":{},"name":{},"text":{"5":{},"6":{},"9":{},"10":{},"13":{},"14":{}},"component":{}}],["leadingexam",{"_index":1524,"title":{},"name":{},"text":{"7":{}},"component":{}}],["leaf",{"_index":1126,"title":{},"name":{},"text":{"5":{}},"component":{}}],["leagu",{"_index":2300,"title":{},"name":{},"text":{"11":{}},"component":{}}],["learn",{"_index":1644,"title":{},"name":{},"text":{"8":{},"14":{}},"component":{}}],["leav",{"_index":1445,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["lectur",{"_index":806,"title":{},"name":{},"text":{"2":{},"3":{},"7":{},"10":{},"13":{},"14":{}},"component":{}}],["lecture.cours",{"_index":2140,"title":{},"name":{},"text":{"10":{}},"component":{}}],["lecture.lecture_id",{"_index":2139,"title":{},"name":{},"text":{"10":{}},"component":{}}],["lecture.lecture_index_in_cours",{"_index":2141,"title":{},"name":{},"text":{"10":{}},"component":{}}],["lecture_id",{"_index":2137,"title":{},"name":{},"text":{"10":{}},"component":{}}],["lecture_list",{"_index":2136,"title":{},"name":{},"text":{"10":{}},"component":{}}],["lecture_list.append(lectur",{"_index":2142,"title":{},"name":{},"text":{"10":{}},"component":{}}],["lecture_s",{"_index":1894,"title":{},"name":{},"text":{"10":{}},"component":{}}],["lectureindexincours",{"_index":1917,"title":{},"name":{},"text":{"10":{}},"component":{}}],["left",{"_index":771,"title":{},"name":{},"text":{"2":{},"3":{},"13":{}},"component":{}}],["left_queen",{"_index":2860,"title":{},"name":{},"text":{"14":{}},"component":{}}],["left_queen.get_ascending_diagonal_index",{"_index":2868,"title":{},"name":{},"text":{"14":{}},"component":{}}],["left_queen.get_descending_diagonal_index",{"_index":2870,"title":{},"name":{},"text":{"14":{}},"component":{}}],["left_queen.row",{"_index":2864,"title":{},"name":{},"text":{"14":{}},"component":{}}],["left_queen.row_index",{"_index":2866,"title":{},"name":{},"text":{"14":{}},"component":{}}],["left_seat_design",{"_index":2111,"title":{},"name":{},"text":{"10":{}},"component":{}}],["left_top",{"_index":2095,"title":{},"name":{},"text":{"10":{}},"component":{}}],["left_topic.topic_id",{"_index":2098,"title":{},"name":{},"text":{"10":{}},"component":{}}],["leftov",{"_index":698,"title":{},"name":{},"text":{"2":{}},"component":{}}],["legaci",{"_index":256,"title":{},"name":{},"text":{"1":{},"10":{},"14":{}},"component":{}}],["len(ascending_diagonal_index_list",{"_index":2912,"title":{},"name":{},"text":{"14":{}},"component":{}}],["len(descending_diagonal_index_list",{"_index":2916,"title":{},"name":{},"text":{"14":{}},"component":{}}],["len(row_index_list",{"_index":2908,"title":{},"name":{},"text":{"14":{}},"component":{}}],["length",{"_index":669,"title":{"3-4":{}},"name":{},"text":{"2":{},"7":{},"13":{}},"component":{}}],["less",{"_index":697,"title":{},"name":{},"text":{"2":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["lesson",{"_index":2281,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{}}],["lesson(1",{"_index":2534,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(10",{"_index":2555,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(11",{"_index":2556,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(12",{"_index":2558,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(13",{"_index":2559,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(14",{"_index":2560,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(15",{"_index":2561,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(16",{"_index":2562,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(17",{"_index":2564,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(18",{"_index":2566,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(19",{"_index":2567,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(2",{"_index":2537,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(20",{"_index":2568,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(3",{"_index":2538,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(4",{"_index":2540,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(5",{"_index":2542,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(6",{"_index":2545,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(7",{"_index":2548,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(8",{"_index":2550,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson(9",{"_index":2551,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson.id",{"_index":2467,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson.room",{"_index":2465,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson.set_room(room_list[0",{"_index":2571,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson.set_timeslot(timeslot_list[0",{"_index":2570,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson.student_group",{"_index":2471,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson.teach",{"_index":2469,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson.timeslot",{"_index":2464,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson_list",{"_index":2483,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lesson_list[0",{"_index":2569,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lessthan",{"_index":390,"title":{},"name":{},"text":{"1":{}},"component":{}}],["lessthanorequ",{"_index":391,"title":{},"name":{},"text":{"1":{}},"component":{}}],["let’",{"_index":2422,"title":{},"name":{},"text":{"12":{}},"component":{}}],["level",{"_index":1122,"title":{"10-44":{},"14-6":{}},"name":{},"text":{"5":{},"6":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["lexicograph",{"_index":2798,"title":{},"name":{},"text":{"14":{}},"component":{}}],["liber",{"_index":2348,"title":{},"name":{},"text":{"11":{}},"component":{}}],["licens",{"_index":2347,"title":{},"name":{},"text":{"11":{}},"component":{}}],["life",{"_index":1594,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["like",{"_index":2336,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["likewis",{"_index":590,"title":{},"name":{},"text":{"1":{}},"component":{}}],["limit",{"_index":538,"title":{"6-7":{},"7-40":{}},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["line",{"_index":1229,"title":{},"name":{},"text":{"6":{},"10":{},"11":{},"12":{}},"component":{}}],["link",{"_index":2504,"title":{},"name":{},"text":{"12":{}},"component":{}}],["list",{"_index":158,"title":{"10-23":{}},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["list[column",{"_index":2063,"title":{},"name":{},"text":{"10":{}},"component":{}}],["list[curriculum",{"_index":1897,"title":{},"name":{},"text":{"10":{}},"component":{}}],["list[defaultconstraintmatchtot",{"_index":2931,"title":{},"name":{},"text":{"14":{}},"component":{}}],["list[queen",{"_index":2067,"title":{},"name":{},"text":{"10":{}},"component":{}}],["list[row",{"_index":2065,"title":{},"name":{},"text":{"10":{}},"component":{}}],["list[topicconflict",{"_index":2093,"title":{},"name":{},"text":{"10":{}},"component":{}}],["listen",{"_index":1031,"title":{"10-49":{}},"name":{},"text":{"3":{},"8":{},"15":{}},"component":{}}],["littl",{"_index":770,"title":{},"name":{},"text":{"2":{},"5":{},"8":{},"13":{},"14":{}},"component":{}}],["live",{"_index":1028,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"13":{}},"component":{}}],["load",{"_index":1011,"title":{},"name":{},"text":{"3":{},"10":{},"13":{},"14":{}},"component":{}}],["local",{"_index":772,"title":{"6":{},"6-2":{},"6-9":{},"6-11":{}},"name":{"6":{}},"text":{"2":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"14":{}},"component":{}}],["locald",{"_index":2008,"title":{},"name":{},"text":{"10":{}},"component":{}}],["localdatetim",{"_index":2009,"title":{},"name":{},"text":{"10":{}},"component":{}}],["locat",{"_index":1013,"title":{},"name":{},"text":{"3":{},"7":{},"10":{},"15":{}},"component":{}}],["lock",{"_index":1742,"title":{},"name":{},"text":{"8":{}},"component":{}}],["locomot",{"_index":2747,"title":{},"name":{},"text":{"13":{}},"component":{}}],["log",{"_index":1196,"title":{"10-44":{}},"name":{},"text":{"6":{},"8":{},"10":{},"14":{}},"component":{}}],["logger",{"_index":1197,"title":{},"name":{},"text":{"6":{}},"component":{}}],["logging.getlogger('optapy').setlevel(logging.debug",{"_index":1198,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["logging.getlogger('optapy').setlevel(logging.level",{"_index":2193,"title":{},"name":{},"text":{"10":{}},"component":{}}],["logic",{"_index":1007,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["long",{"_index":515,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["long_running_process_count",{"_index":521,"title":{},"name":{},"text":{"1":{}},"component":{}}],["longer",{"_index":437,"title":{},"name":{},"text":{"1":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["look",{"_index":1226,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"10":{},"12":{},"15":{}},"component":{}}],["loop",{"_index":1035,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"14":{}},"component":{}}],["loss",{"_index":763,"title":{},"name":{},"text":{"2":{},"9":{}},"component":{}}],["lost",{"_index":434,"title":{},"name":{},"text":{"1":{}},"component":{}}],["lot",{"_index":368,"title":{},"name":{},"text":{"1":{},"5":{},"6":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["low",{"_index":1255,"title":{},"name":{},"text":{"6":{},"8":{},"10":{},"14":{}},"component":{}}],["lower",{"_index":711,"title":{},"name":{},"text":{"2":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["lowest",{"_index":2005,"title":{},"name":{},"text":{"10":{}},"component":{}}],["ls",{"_index":1206,"title":{},"name":{},"text":{"6":{},"8":{},"10":{}},"component":{}}],["luckili",{"_index":2775,"title":{},"name":{},"text":{"14":{}},"component":{}}],["lump",{"_index":2970,"title":{},"name":{},"text":{"14":{}},"component":{}}],["lunch",{"_index":944,"title":{},"name":{},"text":{"3":{}},"component":{}}],["m",{"_index":1474,"title":{},"name":{},"text":{"7":{},"11":{},"12":{}},"component":{}}],["machin",{"_index":990,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"11":{},"13":{},"14":{}},"component":{}}],["machine_capacity_score_part",{"_index":2945,"title":{},"name":{},"text":{"14":{}},"component":{}}],["machine_capacity_score_part.maximum_avail",{"_index":2947,"title":{},"name":{},"text":{"14":{}},"component":{}}],["machine_score_part",{"_index":2943,"title":{},"name":{},"text":{"14":{}},"component":{}}],["machine_score_part.machine_capacity_score_part_list",{"_index":2946,"title":{},"name":{},"text":{"14":{}},"component":{}}],["machinereassign",{"_index":2937,"title":{},"name":{},"text":{"14":{}},"component":{}}],["machinereassignmentincrementalscorecalcul",{"_index":2936,"title":{},"name":{},"text":{"14":{}},"component":{}}],["machineri",{"_index":2315,"title":{},"name":{},"text":{"11":{}},"component":{}}],["made",{"_index":1956,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["magic",{"_index":491,"title":{},"name":{},"text":{"1":{}},"component":{}}],["main",{"_index":1413,"title":{},"name":{},"text":{"7":{},"10":{},"12":{}},"component":{}}],["main.pi",{"_index":2573,"title":{},"name":{},"text":{"12":{}},"component":{}}],["mainli",{"_index":2965,"title":{},"name":{},"text":{"14":{}},"component":{}}],["maintain",{"_index":1276,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["mainten",{"_index":951,"title":{},"name":{},"text":{"3":{},"11":{},"13":{},"14":{}},"component":{}}],["major",{"_index":277,"title":{},"name":{},"text":{"1":{},"7":{}},"component":{}}],["make",{"_index":282,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["manag",{"_index":2215,"title":{},"name":{},"text":{"10":{}},"component":{}}],["mani",{"_index":169,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["manual",{"_index":1856,"title":{},"name":{},"text":{"10":{}},"component":{}}],["map",{"_index":45,"title":{"1-21":{},"1-22":{},"14-35":{}},"name":{},"text":{"1":{},"8":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["map(lambda",{"_index":567,"title":{},"name":{},"text":{"1":{}},"component":{}}],["map(tupl",{"_index":223,"title":{},"name":{},"text":{"1":{}},"component":{}}],["margin",{"_index":1751,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["mark",{"_index":2108,"title":{},"name":{},"text":{"10":{}},"component":{}}],["match",{"_index":133,"title":{"14-34":{}},"name":{},"text":{"1":{},"8":{},"14":{}},"component":{}}],["math",{"_index":2204,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["mathemat",{"_index":1913,"title":{},"name":{},"text":{"10":{}},"component":{}}],["matter",{"_index":787,"title":{},"name":{},"text":{"2":{},"10":{},"14":{}},"component":{}}],["max",{"_index":34,"title":{"1-16":{}},"name":{},"text":{"1":{}},"component":{}}],["maxim",{"_index":1111,"title":{},"name":{},"text":{"5":{},"11":{},"14":{}},"component":{}}],["maxima",{"_index":1325,"title":{},"name":{},"text":{"6":{}},"component":{}}],["maximum",{"_index":477,"title":{},"name":{},"text":{"1":{},"6":{}},"component":{}}],["maximum_capacity_match_tot",{"_index":2939,"title":{},"name":{},"text":{"14":{}},"component":{}}],["maximumcapac",{"_index":2941,"title":{},"name":{},"text":{"14":{}},"component":{}}],["maximumsubchains",{"_index":1495,"title":{},"name":{},"text":{"7":{}},"component":{}}],["maximumsubpillars",{"_index":1467,"title":{},"name":{},"text":{"7":{}},"component":{}}],["mayb",{"_index":2709,"title":{},"name":{},"text":{"13":{}},"component":{}}],["mean",{"_index":178,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["meantim",{"_index":2635,"title":{},"name":{},"text":{"13":{}},"component":{}}],["meanwhil",{"_index":2175,"title":{},"name":{},"text":{"10":{}},"component":{}}],["measur",{"_index":174,"title":{},"name":{},"text":{"1":{},"14":{}},"component":{}}],["mechan",{"_index":952,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["mediocr",{"_index":2795,"title":{},"name":{},"text":{"14":{}},"component":{}}],["medium",{"_index":1550,"title":{},"name":{},"text":{"7":{},"11":{},"13":{},"14":{}},"component":{}}],["meet",{"_index":927,"title":{},"name":{},"text":{"3":{},"8":{},"11":{},"14":{}},"component":{}}],["member",{"_index":323,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["memori",{"_index":1130,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"13":{}},"component":{}}],["mention",{"_index":2807,"title":{},"name":{},"text":{"14":{}},"component":{}}],["merg",{"_index":529,"title":{},"name":{},"text":{"1":{},"4":{}},"component":{}}],["mersenne_twist",{"_index":2201,"title":{},"name":{},"text":{"10":{}},"component":{}}],["messag",{"_index":1213,"title":{},"name":{},"text":{"6":{},"8":{},"10":{}},"component":{}}],["messi",{"_index":1899,"title":{},"name":{},"text":{"10":{}},"component":{}}],["met",{"_index":1689,"title":{},"name":{},"text":{"8":{}},"component":{}}],["metaheurist",{"_index":673,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"10":{},"11":{},"13":{}},"component":{}}],["method",{"_index":269,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["metric",{"_index":2194,"title":{},"name":{},"text":{"10":{}},"component":{}}],["mh",{"_index":1641,"title":{},"name":{},"text":{"8":{}},"component":{}}],["middl",{"_index":2234,"title":{},"name":{},"text":{"10":{}},"component":{}}],["midnight",{"_index":2237,"title":{},"name":{},"text":{"10":{}},"component":{}}],["million",{"_index":2848,"title":{},"name":{},"text":{"14":{}},"component":{}}],["millisecond",{"_index":778,"title":{},"name":{},"text":{"2":{},"3":{},"8":{},"10":{}},"component":{}}],["mimic",{"_index":736,"title":{"7-41":{}},"name":{},"text":{"2":{},"7":{}},"component":{}}],["mimicselectorref",{"_index":1561,"title":{},"name":{},"text":{"7":{}},"component":{}}],["min",{"_index":33,"title":{"1-16":{}},"name":{},"text":{"1":{}},"component":{}}],["min_working_day_s",{"_index":1895,"title":{},"name":{},"text":{"10":{}},"component":{}}],["mind",{"_index":1582,"title":{},"name":{},"text":{"8":{}},"component":{}}],["minim",{"_index":1044,"title":{"13-10":{}},"name":{},"text":{"3":{},"5":{},"7":{},"8":{},"11":{},"13":{},"14":{}},"component":{}}],["minimum",{"_index":146,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["minimumsubchains",{"_index":1494,"title":{},"name":{},"text":{"7":{}},"component":{}}],["minimumsubpillars",{"_index":1466,"title":{},"name":{},"text":{"7":{}},"component":{}}],["minor",{"_index":1655,"title":{},"name":{},"text":{"8":{}},"component":{}}],["minut",{"_index":906,"title":{},"name":{},"text":{"3":{},"8":{},"10":{}},"component":{}}],["minute=30",{"_index":2515,"title":{},"name":{},"text":{"12":{}},"component":{}}],["miss",{"_index":2978,"title":{},"name":{},"text":{"14":{}},"component":{}}],["mistak",{"_index":2154,"title":{},"name":{},"text":{"10":{}},"component":{}}],["mitig",{"_index":1621,"title":{},"name":{},"text":{"8":{}},"component":{}}],["mix",{"_index":973,"title":{},"name":{},"text":{"3":{},"8":{},"10":{}},"component":{}}],["mode",{"_index":1201,"title":{"10-38":{}},"name":{},"text":{"6":{},"10":{},"13":{}},"component":{}}],["model",{"_index":700,"title":{"3-2":{},"10-5":{},"12-4":{}},"name":{},"text":{"2":{},"3":{},"5":{},"7":{},"8":{},"10":{},"12":{},"14":{}},"component":{}}],["modul",{"_index":288,"title":{},"name":{},"text":{"1":{},"10":{},"11":{},"12":{}},"component":{}}],["module}.{nam",{"_index":1846,"title":{},"name":{},"text":{"10":{}},"component":{}}],["mon",{"_index":2582,"title":{},"name":{},"text":{"12":{}},"component":{}}],["monday",{"_index":1473,"title":{},"name":{},"text":{"7":{},"10":{},"11":{},"12":{}},"component":{}}],["money",{"_index":2272,"title":{},"name":{},"text":{"11":{}},"component":{}}],["monitor",{"_index":1825,"title":{"10-45":{}},"name":{},"text":{},"component":{}}],["month",{"_index":2358,"title":{},"name":{},"text":{"11":{},"13":{}},"component":{}}],["monthli",{"_index":2622,"title":{},"name":{},"text":{"13":{}},"component":{}}],["moore’",{"_index":1153,"title":{},"name":{},"text":{"5":{}},"component":{}}],["more",{"_index":412,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["morn",{"_index":1914,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["mostli",{"_index":1087,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"14":{},"15":{}},"component":{}}],["movabl",{"_index":2598,"title":{"13-10":{}},"name":{},"text":{"13":{}},"component":{}}],["move",{"_index":688,"title":{"7":{},"7-1":{},"7-2":{},"7-4":{},"7-9":{},"7-14":{},"7-24":{},"7-31":{},"7-43":{}},"name":{"7":{}},"text":{"2":{},"6":{},"7":{},"8":{},"10":{},"11":{},"14":{},"15":{}},"component":{}}],["moveselector",{"_index":735,"title":{"6-33":{},"7-3":{},"7-5":{},"7-6":{},"7-18":{}},"name":{},"text":{"2":{},"6":{},"7":{}},"component":{}}],["moveselector'",{"_index":1412,"title":{},"name":{},"text":{"7":{}},"component":{}}],["movethreadbuffers",{"_index":1780,"title":{},"name":{},"text":{"8":{}},"component":{}}],["movethreadcount",{"_index":1769,"title":{},"name":{},"text":{"8":{}},"component":{}}],["mrprocess",{"_index":2663,"title":{},"name":{},"text":{"13":{}},"component":{}}],["much",{"_index":301,"title":{},"name":{},"text":{"1":{},"5":{},"10":{},"13":{},"14":{}},"component":{}}],["multi",{"_index":920,"title":{"13-16":{}},"name":{},"text":{"3":{},"8":{},"9":{},"13":{}},"component":{}}],["multipl",{"_index":399,"title":{"2-23":{},"2-39":{},"7-18":{},"8-17":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["multipli",{"_index":312,"title":{},"name":{},"text":{"1":{},"8":{},"14":{}},"component":{}}],["multiten",{"_index":1746,"title":{},"name":{},"text":{"8":{}},"component":{}}],["multithread",{"_index":1580,"title":{"8-22":{},"8-24":{}},"name":{},"text":{"8":{},"9":{},"10":{}},"component":{}}],["mutabl",{"_index":3058,"title":{},"name":{},"text":{"15":{}},"component":{}}],["my.domain",{"_index":1849,"title":{},"name":{},"text":{"10":{}},"component":{}}],["my.domain.myent",{"_index":1853,"title":{},"name":{},"text":{"10":{}},"component":{}}],["my_constraint",{"_index":1854,"title":{},"name":{},"text":{"10":{}},"component":{}}],["my_constraints(constraint_factori",{"_index":1852,"title":{},"name":{},"text":{"10":{}},"component":{}}],["myappserverthreadfactori",{"_index":1771,"title":{},"name":{},"text":{"8":{}},"component":{}}],["myentiti",{"_index":1850,"title":{},"name":{},"text":{"10":{}},"component":{}}],["mysolut",{"_index":1851,"title":{},"name":{},"text":{"10":{}},"component":{}}],["n",{"_index":884,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"14":{}},"component":{}}],["n'.join(map(str",{"_index":2479,"title":{},"name":{},"text":{"12":{}},"component":{}}],["n_queen",{"_index":2117,"title":{},"name":{},"text":{"10":{}},"component":{}}],["n_queens.column_list",{"_index":2119,"title":{},"name":{},"text":{"10":{}},"component":{}}],["n_queens.get_n",{"_index":2856,"title":{},"name":{},"text":{"14":{}},"component":{}}],["n_queens.get_queen_list",{"_index":2857,"title":{},"name":{},"text":{"14":{}},"component":{}}],["n_queens.n",{"_index":2118,"title":{},"name":{},"text":{"10":{}},"component":{}}],["n_queens.queen_list",{"_index":2123,"title":{},"name":{},"text":{"10":{}},"component":{}}],["n_queens.row_list",{"_index":2121,"title":{},"name":{},"text":{"10":{}},"component":{}}],["n_queens_constraint_provid",{"_index":2953,"title":{},"name":{},"text":{"14":{}},"component":{}}],["n_queens_easy_score_calcul",{"_index":2873,"title":{},"name":{},"text":{"14":{}},"component":{}}],["n_queens_easy_score_calculator(n_queen",{"_index":2855,"title":{},"name":{},"text":{"14":{}},"component":{}}],["naiv",{"_index":1215,"title":{},"name":{},"text":{"6":{}},"component":{}}],["name",{"_index":291,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"10":{},"12":{},"15":{}},"component":{}}],["name={self.nam",{"_index":2419,"title":{},"name":{},"text":{"12":{}},"component":{}}],["natur",{"_index":1179,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"14":{},"15":{}},"component":{}}],["near",{"_index":774,"title":{},"name":{},"text":{"2":{},"11":{}},"component":{}}],["nearbi",{"_index":1404,"title":{"7-42":{}},"name":{},"text":{"7":{}},"component":{}}],["nearest",{"_index":2816,"title":{},"name":{},"text":{"14":{}},"component":{}}],["necessari",{"_index":147,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["necessarili",{"_index":1627,"title":{},"name":{},"text":{"8":{}},"component":{}}],["need",{"_index":369,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["neg",{"_index":749,"title":{"14-4":{}},"name":{},"text":{"2":{},"5":{},"11":{},"14":{}},"component":{}}],["neighbor",{"_index":1405,"title":{},"name":{},"text":{"7":{}},"component":{}}],["neighborhood",{"_index":1172,"title":{"7":{},"6-30":{},"7-1":{}},"name":{"7":{}},"text":{"6":{},"8":{}},"component":{}}],["nest",{"_index":1532,"title":{},"name":{},"text":{"7":{},"8":{}},"component":{}}],["network",{"_index":1921,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["never",{"_index":683,"title":{},"name":{},"text":{"2":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["nevertheless",{"_index":1077,"title":{},"name":{},"text":{"4":{},"13":{}},"component":{}}],["new",{"_index":859,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["new_best_solution_listener(ev",{"_index":1731,"title":{},"name":{},"text":{"8":{}},"component":{}}],["new_room",{"_index":2449,"title":{},"name":{},"text":{"12":{}},"component":{}}],["new_timeslot",{"_index":2445,"title":{},"name":{},"text":{"12":{}},"component":{}}],["newer",{"_index":1150,"title":{},"name":{},"text":{"5":{}},"component":{}}],["newli",{"_index":2618,"title":{},"name":{},"text":{"13":{}},"component":{}}],["next",{"_index":937,"title":{"6-4":{}},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"12":{},"13":{}},"component":{}}],["nextcustom",{"_index":3067,"title":{},"name":{},"text":{"15":{}},"component":{}}],["night",{"_index":1049,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["nine",{"_index":2611,"title":{},"name":{},"text":{"13":{}},"component":{}}],["nobody’",{"_index":2238,"title":{},"name":{},"text":{"10":{}},"component":{}}],["nochangephas",{"_index":1740,"title":{},"name":{},"text":{"8":{}},"component":{}}],["node",{"_index":1098,"title":{},"name":{},"text":{"5":{},"10":{}},"component":{}}],["nodeexplorationtyp",{"_index":1124,"title":{},"name":{},"text":{"5":{}},"component":{}}],["node’",{"_index":1118,"title":{},"name":{},"text":{"5":{}},"component":{}}],["non",{"_index":1306,"title":{},"name":{},"text":{"6":{},"7":{},"9":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["non_intrusive_full_assert",{"_index":1819,"title":{"10-40":{}},"name":{},"text":{"10":{}},"component":{}}],["non_reproduc",{"_index":1824,"title":{"10-43":{}},"name":{},"text":{},"component":{}}],["none",{"_index":249,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["nonvolatil",{"_index":2595,"title":{"13-10":{}},"name":{},"text":{"13":{}},"component":{}}],["noon",{"_index":943,"title":{},"name":{},"text":{"3":{}},"component":{}}],["normal",{"_index":1239,"title":{},"name":{},"text":{"6":{},"7":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["nosql",{"_index":1889,"title":{},"name":{},"text":{"10":{}},"component":{}}],["notabl",{"_index":2167,"title":{},"name":{},"text":{"10":{}},"component":{}}],["note",{"_index":549,"title":{"11-9":{}},"name":{},"text":{"1":{},"6":{},"10":{},"11":{}},"component":{}}],["notebook",{"_index":2406,"title":{},"name":{},"text":{"12":{}},"component":{}}],["noth",{"_index":589,"title":{},"name":{},"text":{"1":{},"7":{}},"component":{}}],["notic",{"_index":684,"title":{},"name":{},"text":{"2":{},"5":{},"6":{},"7":{},"10":{},"13":{},"14":{}},"component":{}}],["notimplementederror",{"_index":2046,"title":{},"name":{},"text":{"10":{}},"component":{}}],["novel",{"_index":1336,"title":{},"name":{},"text":{"6":{}},"component":{}}],["novemb",{"_index":2630,"title":{},"name":{},"text":{"13":{}},"component":{}}],["now",{"_index":273,"title":{},"name":{},"text":{"1":{},"6":{},"12":{},"13":{}},"component":{}}],["np",{"_index":1264,"title":{"11-3":{}},"name":{},"text":{"6":{},"8":{},"11":{}},"component":{}}],["nqueen",{"_index":1828,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["nqueensincrementalscorecalcul",{"_index":2887,"title":{},"name":{},"text":{"14":{}},"component":{}}],["null",{"_index":1969,"title":{},"name":{},"text":{"10":{}},"component":{}}],["nullabl",{"_index":266,"title":{"10-13":{},"13-4":{}},"name":{},"text":{"1":{},"10":{},"13":{}},"component":{}}],["nullifi",{"_index":2995,"title":{},"name":{},"text":{"14":{}},"component":{}}],["number",{"_index":327,"title":{"10-46":{},"14-9":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["nurs",{"_index":1472,"title":{},"name":{},"text":{"7":{},"11":{},"13":{},"14":{}},"component":{}}],["obfusc",{"_index":2177,"title":{},"name":{},"text":{"10":{}},"component":{}}],["object",{"_index":175,"title":{"12-8":{}},"name":{},"text":{"1":{},"3":{},"6":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["observ",{"_index":1705,"title":{},"name":{},"text":{"8":{}},"component":{}}],["obsolet",{"_index":1544,"title":{},"name":{},"text":{"7":{},"10":{}},"component":{}}],["obviou",{"_index":1707,"title":{},"name":{},"text":{"8":{}},"component":{}}],["occupi",{"_index":969,"title":{},"name":{},"text":{"3":{},"14":{}},"component":{}}],["occur",{"_index":464,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"13":{}},"component":{}}],["ocean",{"_index":1152,"title":{},"name":{},"text":{"5":{}},"component":{}}],["off",{"_index":2792,"title":{},"name":{},"text":{"14":{}},"component":{}}],["offer",{"_index":1628,"title":{},"name":{},"text":{"8":{}},"component":{}}],["old",{"_index":1887,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["on",{"_index":166,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["onc",{"_index":400,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["only_down",{"_index":744,"title":{},"name":{},"text":{"2":{},"5":{},"14":{}},"component":{}}],["only_down/only_down",{"_index":2949,"title":{},"name":{},"text":{"14":{}},"component":{}}],["onslaught",{"_index":1156,"title":{},"name":{},"text":{"5":{}},"component":{}}],["open",{"_index":2037,"title":{},"name":{},"text":{"10":{},"11":{},"13":{}},"component":{}}],["oper",{"_index":75,"title":{},"name":{},"text":{"1":{},"7":{},"11":{},"13":{}},"component":{}}],["opportun",{"_index":2087,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["oppos",{"_index":1509,"title":{},"name":{},"text":{"7":{}},"component":{}}],["opposit",{"_index":330,"title":{},"name":{},"text":{"1":{},"6":{}},"component":{}}],["opt",{"_index":1372,"title":{"7-15":{}},"name":{},"text":{"7":{}},"component":{}}],["optapi",{"_index":161,"title":{"10":{},"11":{},"8-2":{},"11-1":{},"11-8":{},"11-12":{},"11-13":{}},"name":{},"text":{"1":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["optaplann",{"_index":848,"title":{},"name":{},"text":{"3":{},"4":{},"8":{},"10":{},"11":{},"13":{}},"component":{}}],["optapy.config",{"_index":1858,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["optapy.config.solver.solverconfig",{"_index":2574,"title":{},"name":{},"text":{"12":{}},"component":{}}],["optapy.config.solver.solverconfig(templ",{"_index":1872,"title":{},"name":{},"text":{"10":{}},"component":{}}],["optapy.config.solver.terminationconfig",{"_index":1862,"title":{},"name":{},"text":{"10":{}},"component":{}}],["optapy.constraint",{"_index":115,"title":{},"name":{},"text":{"1":{},"12":{},"13":{},"14":{}},"component":{}}],["optapy.examples.cloudbalancing.score.cloudbalancingconstraintprovid",{"_index":2948,"title":{},"name":{},"text":{"14":{}},"component":{}}],["optapy.examples.constraints.n_queens_constraint",{"_index":1843,"title":{},"name":{},"text":{"10":{}},"component":{}}],["optapy.examples.curriculumcourse.domain.lectur",{"_index":1517,"title":{},"name":{},"text":{"7":{}},"component":{}}],["optapy.examples.domain.nqueen",{"_index":1841,"title":{},"name":{},"text":{"10":{}},"component":{}}],["optapy.examples.domain.queen",{"_index":1842,"title":{},"name":{},"text":{"10":{}},"component":{}}],["optapy.examples.nqueens.score.n_queens_constraint_provid",{"_index":2951,"title":{},"name":{},"text":{"14":{}},"component":{}}],["optapy.examples.nqueens.score.n_queens_easy_score_calcul",{"_index":2952,"title":{},"name":{},"text":{"14":{}},"component":{}}],["optapy.scor",{"_index":112,"title":{},"name":{},"text":{"1":{},"10":{},"12":{},"14":{}},"component":{}}],["optapy.typ",{"_index":1980,"title":{},"name":{},"text":{"10":{},"12":{},"15":{}},"component":{}}],["optapy’",{"_index":2401,"title":{},"name":{},"text":{"12":{}},"component":{}}],["optim",{"_index":575,"title":{"8":{},"8-2":{},"8-4":{},"8-5":{}},"name":{"8":{}},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["optima",{"_index":1165,"title":{"6-11":{}},"name":{},"text":{"6":{},"14":{}},"component":{}}],["optimist",{"_index":1103,"title":{},"name":{},"text":{"5":{}},"component":{}}],["optimistic_bound_first",{"_index":1132,"title":{},"name":{},"text":{"5":{}},"component":{}}],["optimum",{"_index":1083,"title":{},"name":{},"text":{"5":{},"6":{},"10":{}},"component":{}}],["option",{"_index":308,"title":{},"name":{},"text":{"1":{},"2":{},"5":{},"6":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["orang",{"_index":845,"title":{},"name":{},"text":{"3":{},"14":{}},"component":{}}],["order",{"_index":394,"title":{"15-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"15":{}},"component":{}}],["org.optaplanner.core.impl.heuristic.selector.common.decorator.fairselectorprobabilityweightfactori",{"_index":1511,"title":{},"name":{},"text":{"7":{}},"component":{}}],["organ",{"_index":2235,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["organiz",{"_index":2748,"title":{},"name":{},"text":{"13":{}},"component":{}}],["orient",{"_index":2339,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["origin",{"_index":401,"title":{"7-25":{}},"name":{},"text":{"1":{},"2":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"15":{}},"component":{}}],["original_machin",{"_index":2661,"title":{},"name":{},"text":{"13":{}},"component":{}}],["originalmachin",{"_index":2668,"title":{},"name":{},"text":{"13":{}},"component":{}}],["original’",{"_index":2958,"title":{},"name":{},"text":{"14":{}},"component":{}}],["os",{"_index":1857,"title":{},"name":{},"text":{"10":{}},"component":{}}],["os.environ['solve_time_in_minut",{"_index":1860,"title":{},"name":{},"text":{"10":{}},"component":{}}],["oscil",{"_index":1342,"title":{},"name":{},"text":{"6":{}},"component":{}}],["other",{"_index":967,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"14":{}},"component":{}}],["otherwis",{"_index":1547,"title":{},"name":{},"text":{"7":{},"13":{},"15":{}},"component":{}}],["ourselv",{"_index":2647,"title":{},"name":{},"text":{"13":{}},"component":{}}],["out",{"_index":27,"title":{"1-11":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["outag",{"_index":956,"title":{},"name":{},"text":{"3":{}},"component":{}}],["outcom",{"_index":1665,"title":{},"name":{},"text":{"8":{}},"component":{}}],["output",{"_index":580,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["outrank",{"_index":2796,"title":{},"name":{},"text":{"14":{}},"component":{}}],["outsid",{"_index":2684,"title":{"14-33":{}},"name":{},"text":{"13":{}},"component":{}}],["outweigh",{"_index":2456,"title":{},"name":{},"text":{"12":{},"14":{}},"component":{}}],["over",{"_index":123,"title":{},"name":{},"text":{"1":{},"6":{},"10":{},"14":{}},"component":{}}],["overal",{"_index":136,"title":{},"name":{},"text":{"1":{},"14":{}},"component":{}}],["overboard",{"_index":2964,"title":{},"name":{},"text":{"14":{}},"component":{}}],["overconstrain",{"_index":2590,"title":{"13-3":{},"13-4":{},"13-5":{}},"name":{},"text":{"13":{},"14":{}},"component":{}}],["overhead",{"_index":1017,"title":{},"name":{},"text":{"3":{}},"component":{}}],["overlap",{"_index":395,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["overload",{"_index":317,"title":{},"name":{},"text":{"1":{},"10":{},"13":{},"14":{}},"component":{}}],["overview",{"_index":616,"title":{"2-1":{},"4-1":{},"5-1":{},"6-1":{},"7-6":{},"8-3":{},"8-4":{},"8-8":{},"10-1":{},"10-17":{},"14-23":{}},"name":{},"text":{"8":{},"10":{}},"component":{}}],["overwrit",{"_index":1540,"title":{},"name":{},"text":{"7":{},"15":{}},"component":{}}],["ownership",{"_index":2753,"title":{},"name":{},"text":{"13":{}},"component":{}}],["o’clock",{"_index":976,"title":{},"name":{},"text":{"3":{}},"component":{}}],["p",{"_index":2553,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pack",{"_index":2289,"title":{},"name":{},"text":{"11":{}},"component":{}}],["packag",{"_index":287,"title":{},"name":{},"text":{"1":{},"10":{},"11":{},"14":{}},"component":{}}],["pain",{"_index":2169,"title":{},"name":{},"text":{"10":{}},"component":{}}],["paint",{"_index":2646,"title":{},"name":{},"text":{"13":{}},"component":{}}],["pair",{"_index":380,"title":{},"name":{},"text":{"1":{},"12":{},"14":{}},"component":{}}],["paper",{"_index":1108,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"11":{}},"component":{}}],["parallel",{"_index":809,"title":{},"name":{},"text":{"2":{},"8":{},"10":{}},"component":{}}],["parallelsolvercount",{"_index":2240,"title":{},"name":{},"text":{"10":{}},"component":{}}],["paramet",{"_index":1562,"title":{"8-6":{}},"name":{},"text":{"8":{},"13":{},"15":{}},"component":{}}],["parent",{"_index":1963,"title":{},"name":{},"text":{"10":{}},"component":{}}],["pars",{"_index":3013,"title":{},"name":{},"text":{"14":{}},"component":{}}],["part",{"_index":1029,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["partial",{"_index":1425,"title":{},"name":{},"text":{"7":{},"10":{},"13":{}},"component":{}}],["particular",{"_index":469,"title":{},"name":{},"text":{"1":{},"8":{}},"component":{}}],["partit",{"_index":807,"title":{"9":{}},"name":{"9":{}},"text":{"2":{},"3":{},"8":{},"9":{},"13":{}},"component":{}}],["pass",{"_index":1302,"title":{},"name":{},"text":{"6":{},"10":{},"12":{},"13":{},"14":{}},"component":{}}],["passeng",{"_index":2285,"title":{},"name":{},"text":{"11":{}},"component":{}}],["past",{"_index":1434,"title":{},"name":{},"text":{"7":{},"13":{},"14":{}},"component":{}}],["path",{"_index":1175,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["path/to/my/appl",{"_index":2393,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pathlib",{"_index":1835,"title":{},"name":{},"text":{"10":{}},"component":{}}],["patient",{"_index":919,"title":{},"name":{},"text":{"3":{}},"component":{}}],["pattern",{"_index":810,"title":{"3":{},"3-1":{},"3-4":{},"3-5":{},"3-6":{},"3-9":{},"3-10":{}},"name":{"3":{}},"text":{"3":{},"14":{}},"component":{}}],["pay",{"_index":1930,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["peer",{"_index":2376,"title":{},"name":{},"text":{"11":{}},"component":{}}],["penal",{"_index":153,"title":{},"name":{},"text":{"1":{},"13":{},"14":{}},"component":{}}],["penalize(\"a",{"_index":255,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"ann'",{"_index":340,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"average_cpu_pow",{"_index":473,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"computer_and_its_process",{"_index":498,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"computer_with_biggest_process",{"_index":487,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"constraint",{"_index":320,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"don't",{"_index":120,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"initi",{"_index":242,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"long_running_process",{"_index":520,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"pen",{"_index":164,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"process_mov",{"_index":2676,"title":{},"name":{},"text":{"13":{}},"component":{}}],["penalize(\"required_cpu_power_tot",{"_index":432,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"room",{"_index":2468,"title":{},"name":{},"text":{"12":{}},"component":{}}],["penalize(\"room_count",{"_index":468,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"running_comput",{"_index":548,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"shift",{"_index":349,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"speak",{"_index":450,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize(\"stud",{"_index":2472,"title":{},"name":{},"text":{"12":{}},"component":{}}],["penalize(\"teach",{"_index":2470,"title":{},"name":{},"text":{"12":{}},"component":{}}],["penalize(\"unused_comput",{"_index":558,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize_all_shifts(factori",{"_index":253,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize_ann_shifts(factori",{"_index":338,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize_every_shift",{"_index":167,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize_every_shift(factori",{"_index":163,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize_initialized_shifts(factori",{"_index":241,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalize_shifts_on_off_days(factori",{"_index":344,"title":{},"name":{},"text":{"1":{}},"component":{}}],["penalti",{"_index":17,"title":{"1-7":{}},"name":{},"text":{"1":{},"3":{},"13":{},"14":{},"15":{}},"component":{}}],["penta_stream_example(factori",{"_index":217,"title":{},"name":{},"text":{"1":{}},"component":{}}],["peopl",{"_index":873,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["per",{"_index":321,"title":{"3-9":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"10":{},"13":{},"14":{}},"component":{}}],["percentu",{"_index":1323,"title":{},"name":{},"text":{"6":{}},"component":{}}],["perfect",{"_index":1663,"title":{},"name":{},"text":{"8":{},"14":{}},"component":{}}],["perfectli",{"_index":2992,"title":{},"name":{},"text":{"14":{}},"component":{}}],["perform",{"_index":105,"title":{"14-22":{},"14-29":{}},"name":{},"text":{"1":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["period",{"_index":794,"title":{"3-9":{}},"name":{},"text":{"2":{},"3":{},"7":{},"10":{},"13":{}},"component":{}}],["persist",{"_index":2041,"title":{},"name":{},"text":{"10":{}},"component":{}}],["person",{"_index":610,"title":{},"name":{},"text":{"1":{},"3":{},"10":{},"11":{},"13":{}},"component":{}}],["personal_car_rang",{"_index":2011,"title":{},"name":{},"text":{"10":{}},"component":{}}],["perspect",{"_index":2814,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["pessimist",{"_index":1105,"title":{},"name":{},"text":{"5":{}},"component":{}}],["petrov",{"_index":1338,"title":{},"name":{},"text":{"6":{}},"component":{}}],["phase",{"_index":677,"title":{"8-7":{},"8-20":{},"8-21":{}},"name":{},"text":{"2":{},"6":{},"7":{},"8":{},"9":{},"10":{},"13":{}},"component":{}}],["physic",{"_index":2314,"title":{},"name":{},"text":{"11":{},"12":{},"14":{}},"component":{}}],["pick",{"_index":639,"title":{"2-24":{},"6-8":{}},"name":{},"text":{"2":{},"6":{},"10":{},"14":{}},"component":{}}],["pickearlytyp",{"_index":1260,"title":{},"name":{},"text":{"6":{}},"component":{}}],["piec",{"_index":1784,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"14":{}},"component":{}}],["pillar",{"_index":1365,"title":{"7-9":{},"7-12":{},"7-13":{}},"name":{},"text":{"7":{}},"component":{}}],["pillarchangemov",{"_index":1453,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pillarchangemoveselector",{"_index":1366,"title":{"7-10":{}},"name":{},"text":{"7":{}},"component":{}}],["pillarselector",{"_index":1464,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pillarswapmov",{"_index":1462,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pillarswapmoveselector",{"_index":1367,"title":{"7-11":{}},"name":{},"text":{},"component":{}}],["pin",{"_index":1516,"title":{"13-7":{},"13-8":{}},"name":{},"text":{"7":{},"13":{}},"component":{}}],["pinning_filt",{"_index":2656,"title":{},"name":{},"text":{"13":{}},"component":{}}],["pinningfilt",{"_index":2594,"title":{"13-9":{}},"name":{},"text":{},"component":{}}],["pip",{"_index":2269,"title":{"11-12":{}},"name":{},"text":{"11":{},"12":{}},"component":{}}],["pitfal",{"_index":1692,"title":{},"name":{},"text":{"8":{}},"component":{}}],["pizza",{"_index":1023,"title":{},"name":{},"text":{"3":{}},"component":{}}],["place",{"_index":1492,"title":{},"name":{},"text":{"7":{}},"component":{}}],["placer",{"_index":1957,"title":{},"name":{},"text":{"10":{}},"component":{}}],["plain",{"_index":62,"title":{},"name":{},"text":{"1":{},"10":{},"14":{}},"component":{}}],["plan",{"_index":91,"title":{"13":{},"2-39":{},"3-3":{},"10-5":{},"10-6":{},"10-8":{},"10-9":{},"10-10":{},"10-11":{},"10-12":{},"10-13":{},"10-14":{},"10-15":{},"10-16":{},"10-19":{},"10-22":{},"10-23":{},"10-24":{},"10-25":{},"10-26":{},"10-28":{},"11-2":{},"11-3":{},"11-4":{},"11-5":{},"12-6":{},"12-8":{},"13-1":{},"13-2":{},"13-3":{},"13-4":{},"13-5":{},"13-6":{},"13-7":{},"13-8":{},"13-10":{},"13-11":{},"13-14":{},"13-16":{},"14-35":{}},"name":{"13":{}},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["planner",{"_index":1178,"title":{},"name":{"10":{},"11":{}},"text":{"6":{},"8":{}},"component":{}}],["planning.adoc#realtimeplanning[r",{"_index":1884,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planning/rep",{"_index":1883,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planning_ent",{"_index":867,"title":{},"name":{},"text":{"3":{},"8":{},"10":{},"12":{},"13":{},"15":{}},"component":{}}],["planning_entity(pinning_filter=shift_pinning_filt",{"_index":2657,"title":{},"name":{},"text":{"13":{}},"component":{}}],["planning_entity_collection_properti",{"_index":1808,"title":{"10-28":{}},"name":{},"text":{"10":{},"12":{}},"component":{}}],["planning_entity_collection_property(entity_typ",{"_index":2506,"title":{},"name":{},"text":{"12":{}},"component":{}}],["planning_entity_collection_property(lesson",{"_index":2494,"title":{},"name":{},"text":{"12":{}},"component":{}}],["planning_entity_collection_property(queen",{"_index":2069,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planning_entity_properti",{"_index":2073,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planning_id",{"_index":1581,"title":{"8-23":{}},"name":{},"text":{"8":{},"12":{},"13":{}},"component":{}}],["planning_list_vari",{"_index":2022,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planning_list_variable(custom",{"_index":2031,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planning_pin",{"_index":2592,"title":{"13-8":{}},"name":{},"text":{"13":{}},"component":{}}],["planning_scor",{"_index":322,"title":{},"name":{},"text":{"1":{},"10":{},"12":{}},"component":{}}],["planning_score(bendablescor",{"_index":2843,"title":{},"name":{},"text":{"14":{}},"component":{}}],["planning_score(hardmediumsoftscor",{"_index":2837,"title":{},"name":{},"text":{"14":{}},"component":{}}],["planning_score(hardsoftscor",{"_index":2080,"title":{},"name":{},"text":{"10":{},"12":{},"14":{}},"component":{}}],["planning_score(score_typ",{"_index":2508,"title":{},"name":{},"text":{"12":{}},"component":{}}],["planning_score(simplescor",{"_index":2075,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["planning_solut",{"_index":1827,"title":{},"name":{},"text":{"10":{},"12":{},"14":{}},"component":{}}],["planning_vari",{"_index":861,"title":{},"name":{},"text":{"3":{},"10":{},"12":{},"13":{},"15":{}},"component":{}}],["planning_variable'",{"_index":1962,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planning_variable(object",{"_index":3059,"title":{},"name":{},"text":{"15":{}},"component":{}}],["planning_variable(room",{"_index":2446,"title":{},"name":{},"text":{"12":{}},"component":{}}],["planning_variable(row",{"_index":1936,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planning_variable(standstil",{"_index":2050,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planning_variable(timeslot",{"_index":2441,"title":{},"name":{},"text":{"12":{}},"component":{}}],["planning_variable(value_range_provider_ref",{"_index":1971,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planning_variable(variable_typ",{"_index":1938,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["planning_variable_refer",{"_index":3081,"title":{},"name":{},"text":{"15":{}},"component":{}}],["planning_variable_reference(variable_nam",{"_index":3076,"title":{},"name":{},"text":{"15":{}},"component":{}}],["planningscor",{"_index":1810,"title":{"10-29":{}},"name":{},"text":{},"component":{}}],["planningsolut",{"_index":2061,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planningvari",{"_index":2128,"title":{},"name":{},"text":{"10":{}},"component":{}}],["planningvariablegraphtyp",{"_index":2043,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["planningvariablegraphtype.chain",{"_index":3061,"title":{},"name":{},"text":{"15":{}},"component":{}}],["play",{"_index":2173,"title":{},"name":{},"text":{"10":{}},"component":{}}],["pleas",{"_index":1458,"title":{},"name":{},"text":{"7":{}},"component":{}}],["plenti",{"_index":780,"title":{},"name":{},"text":{"2":{}},"component":{}}],["plural",{"_index":2824,"title":{},"name":{},"text":{"14":{}},"component":{}}],["point",{"_index":886,"title":{"14-9":{}},"name":{},"text":{"3":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["pointless",{"_index":977,"title":{"14-27":{}},"name":{},"text":{"3":{},"7":{},"14":{}},"component":{}}],["poll",{"_index":2262,"title":{},"name":{},"text":{"10":{}},"component":{}}],["pool",{"_index":654,"title":{"2-34":{}},"name":{},"text":{"2":{},"3":{},"8":{},"10":{}},"component":{}}],["pooledentityplac",{"_index":768,"title":{},"name":{},"text":{"2":{}},"component":{}}],["poorli",{"_index":89,"title":{},"name":{},"text":{"1":{},"2":{}},"component":{}}],["popul",{"_index":1064,"title":{},"name":{},"text":{"4":{}},"component":{}}],["portfolio",{"_index":2303,"title":{},"name":{},"text":{"11":{}},"component":{}}],["portion",{"_index":148,"title":{},"name":{},"text":{"1":{},"8":{}},"component":{}}],["posit",{"_index":1112,"title":{"14-4":{}},"name":{},"text":{"5":{},"11":{},"14":{}},"component":{}}],["possibl",{"_index":216,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["post",{"_index":2366,"title":{},"name":{},"text":{"11":{}},"component":{}}],["power",{"_index":418,"title":{"8-6":{}},"name":{},"text":{"1":{},"8":{},"13":{}},"component":{}}],["practic",{"_index":1072,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"14":{},"15":{}},"component":{}}],["preced",{"_index":2835,"title":{},"name":{},"text":{"14":{}},"component":{}}],["precis",{"_index":2002,"title":{},"name":{},"text":{"10":{}},"component":{}}],["predic",{"_index":334,"title":{},"name":{},"text":{"1":{},"13":{}},"component":{}}],["predict",{"_index":1266,"title":{},"name":{},"text":{"6":{},"8":{},"14":{}},"component":{}}],["prefer",{"_index":524,"title":{},"name":{},"text":{"1":{},"6":{},"8":{},"12":{},"13":{}},"component":{}}],["preferr",{"_index":354,"title":{},"name":{},"text":{"1":{}},"component":{}}],["prefix",{"_index":200,"title":{},"name":{},"text":{"1":{}},"component":{}}],["prematur",{"_index":2968,"title":{},"name":{},"text":{"14":{}},"component":{}}],["prerequisit",{"_index":2380,"title":{},"name":{},"text":{"11":{}},"component":{}}],["prescrib",{"_index":393,"title":{},"name":{},"text":{"1":{}},"component":{}}],["presenc",{"_index":543,"title":{},"name":{},"text":{"1":{}},"component":{}}],["present",{"_index":2282,"title":{},"name":{},"text":{"11":{}},"component":{}}],["presum",{"_index":707,"title":{},"name":{},"text":{"2":{},"14":{}},"component":{}}],["pretti",{"_index":666,"title":{},"name":{},"text":{"2":{},"6":{},"11":{}},"component":{}}],["prevent",{"_index":1498,"title":{},"name":{},"text":{"7":{},"8":{}},"component":{}}],["previou",{"_index":435,"title":{},"name":{},"text":{"1":{},"3":{},"13":{},"14":{}},"component":{}}],["previous",{"_index":3049,"title":{},"name":{},"text":{"15":{}},"component":{}}],["previous_standstil",{"_index":2057,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["previous_standstill.vehicl",{"_index":3090,"title":{},"name":{},"text":{"15":{}},"component":{}}],["previousstandstil",{"_index":3073,"title":{},"name":{},"text":{"15":{}},"component":{}}],["price",{"_index":2787,"title":{},"name":{},"text":{"14":{}},"component":{}}],["prime",{"_index":1619,"title":{},"name":{},"text":{"8":{}},"component":{}}],["principl",{"_index":3047,"title":{},"name":{},"text":{"15":{}},"component":{}}],["print",{"_index":2819,"title":{},"name":{},"text":{"14":{}},"component":{}}],["print(f'{((0.01",{"_index":2820,"title":{},"name":{},"text":{"14":{}},"component":{}}],["print(score_manager.explainscore(solut",{"_index":2998,"title":{},"name":{},"text":{"14":{}},"component":{}}],["print(solut",{"_index":2581,"title":{},"name":{},"text":{"12":{}},"component":{}}],["priorit",{"_index":2311,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["prioriti",{"_index":1945,"title":{},"name":{},"text":{"10":{},"11":{},"14":{}},"component":{}}],["probabilist",{"_index":1382,"title":{"7-25":{},"7-39":{}},"name":{},"text":{"7":{}},"component":{}}],["probabilityweightfactori",{"_index":1503,"title":{},"name":{},"text":{"7":{}},"component":{}}],["probabl",{"_index":1489,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["problem",{"_index":126,"title":{"10-5":{},"10-6":{},"10-7":{},"10-25":{},"10-26":{},"10-30":{},"10-31":{},"10-37":{},"10-48":{},"11-2":{},"11-3":{},"11-4":{},"11-5":{},"12-5":{}},"name":{},"text":{"1":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["problem1",{"_index":2224,"title":{},"name":{},"text":{"10":{}},"component":{}}],["problem_chang",{"_index":2688,"title":{},"name":{},"text":{"13":{}},"component":{}}],["problem_change_director",{"_index":2697,"title":{},"name":{},"text":{"13":{}},"component":{}}],["problem_change_director.changevariable(process",{"_index":2711,"title":{},"name":{},"text":{"13":{}},"component":{}}],["problem_change_director.lookupworkingobject(self.deleted_comput",{"_index":2707,"title":{},"name":{},"text":{"13":{}},"component":{}}],["problem_change_director.removeproblemfact(working_comput",{"_index":2718,"title":{},"name":{},"text":{"13":{}},"component":{}}],["problem_fact",{"_index":1764,"title":{},"name":{},"text":{"8":{},"10":{},"12":{}},"component":{}}],["problem_fact_collection_properti",{"_index":1812,"title":{"10-30":{}},"name":{},"text":{"10":{},"12":{}},"component":{}}],["problem_fact_collection_property(column",{"_index":2081,"title":{},"name":{},"text":{"10":{}},"component":{}}],["problem_fact_collection_property(fact_typ",{"_index":2501,"title":{},"name":{},"text":{"12":{}},"component":{}}],["problem_fact_collection_property(room",{"_index":2491,"title":{},"name":{},"text":{"12":{}},"component":{}}],["problem_fact_collection_property(row",{"_index":2084,"title":{},"name":{},"text":{"10":{}},"component":{}}],["problem_fact_collection_property(timeslot",{"_index":2488,"title":{},"name":{},"text":{"12":{}},"component":{}}],["problem_fact_collection_property(topicconflict",{"_index":2091,"title":{},"name":{},"text":{"10":{}},"component":{}}],["problem_fact_properti",{"_index":2086,"title":{},"name":{},"text":{"10":{}},"component":{}}],["problem_id",{"_index":2225,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["problemat",{"_index":889,"title":{},"name":{},"text":{"3":{}},"component":{}}],["problemchang",{"_index":2599,"title":{"13-12":{},"13-13":{}},"name":{},"text":{"13":{}},"component":{}}],["problemchange.dochange(working_solut",{"_index":2724,"title":{},"name":{},"text":{"13":{}},"component":{}}],["problemchangedirector",{"_index":2690,"title":{},"name":{},"text":{"13":{}},"component":{}}],["problemchangedirector.lookupworkingobject",{"_index":2725,"title":{},"name":{},"text":{"13":{}},"component":{}}],["problemid",{"_index":2692,"title":{},"name":{},"text":{"13":{}},"component":{}}],["problem’",{"_index":2115,"title":{},"name":{},"text":{"10":{}},"component":{}}],["procedur",{"_index":1646,"title":{},"name":{},"text":{"8":{}},"component":{}}],["process",{"_index":140,"title":{},"name":{},"text":{"1":{},"7":{},"12":{},"13":{},"14":{}},"component":{}}],["process.comput",{"_index":427,"title":{},"name":{},"text":{"1":{},"13":{}},"component":{}}],["process.is_long_run",{"_index":519,"title":{},"name":{},"text":{"1":{}},"component":{}}],["process.required_cpu_pow",{"_index":429,"title":{},"name":{},"text":{"1":{}},"component":{}}],["process_assign",{"_index":2674,"title":{},"name":{},"text":{"13":{}},"component":{}}],["process_assignment.is_mov",{"_index":2675,"title":{},"name":{},"text":{"13":{}},"component":{}}],["process_list",{"_index":499,"title":{},"name":{},"text":{"1":{}},"component":{}}],["process_moved(constraint_factori",{"_index":2672,"title":{},"name":{},"text":{"13":{}},"component":{}}],["processassign",{"_index":2662,"title":{},"name":{},"text":{"13":{}},"component":{}}],["processassignmentclass",{"_index":2670,"title":{},"name":{},"text":{"13":{}},"component":{}}],["produc",{"_index":570,"title":{},"name":{},"text":{"1":{},"8":{}},"component":{}}],["product",{"_index":363,"title":{},"name":{},"text":{"1":{},"2":{},"5":{},"7":{},"8":{},"10":{},"11":{}},"component":{}}],["profit",{"_index":2308,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["program",{"_index":59,"title":{},"name":{},"text":{"1":{},"11":{}},"component":{}}],["programm",{"_index":2319,"title":{},"name":{},"text":{"11":{}},"component":{}}],["progress",{"_index":1826,"title":{"10-49":{}},"name":{},"text":{"10":{}},"component":{}}],["project",{"_index":154,"title":{},"name":{},"text":{"1":{},"3":{},"11":{},"13":{}},"component":{}}],["promis",{"_index":1100,"title":{},"name":{},"text":{"5":{},"7":{},"8":{}},"component":{}}],["propag",{"_index":43,"title":{"1-20":{}},"name":{},"text":{"1":{}},"component":{}}],["properli",{"_index":3016,"title":{},"name":{},"text":{"14":{}},"component":{}}],["properti",{"_index":383,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"8":{},"10":{},"12":{},"13":{},"15":{}},"component":{}}],["prototyp",{"_index":1066,"title":{},"name":{},"text":{"4":{},"8":{}},"component":{}}],["prove",{"_index":2329,"title":{},"name":{},"text":{"11":{},"15":{}},"component":{}}],["provid",{"_index":230,"title":{"10-16":{}},"name":{},"text":{"1":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["prune",{"_index":723,"title":{},"name":{},"text":{"2":{},"5":{},"8":{}},"component":{}}],["pseudorandom",{"_index":2196,"title":{},"name":{},"text":{"10":{}},"component":{}}],["pt2m30",{"_index":1669,"title":{},"name":{},"text":{"8":{}},"component":{}}],["public",{"_index":2368,"title":{},"name":{},"text":{"11":{},"13":{},"15":{}},"component":{}}],["publish",{"_index":2627,"title":{},"name":{},"text":{"13":{}},"component":{}}],["pull",{"_index":2372,"title":{},"name":{},"text":{"11":{}},"component":{}}],["punish",{"_index":1954,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["purchas",{"_index":1622,"title":{},"name":{},"text":{"8":{}},"component":{}}],["pure",{"_index":103,"title":{},"name":{},"text":{"1":{},"6":{}},"component":{}}],["purpl",{"_index":853,"title":{},"name":{},"text":{"3":{}},"component":{}}],["purpos",{"_index":279,"title":{},"name":{},"text":{"1":{},"11":{},"14":{}},"component":{}}],["push",{"_index":2263,"title":{},"name":{},"text":{"10":{}},"component":{}}],["put",{"_index":685,"title":{},"name":{},"text":{"2":{},"6":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["puzzl",{"_index":2130,"title":{},"name":{},"text":{"10":{}},"component":{}}],["py3",{"_index":2391,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pypi",{"_index":2378,"title":{},"name":{},"text":{"11":{}},"component":{}}],["python",{"_index":63,"title":{"10-4":{},"14-17":{},"14-18":{}},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"11":{},"12":{},"14":{}},"component":{}}],["python3",{"_index":2407,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pythontm",{"_index":2318,"title":{},"name":{},"text":{"11":{}},"component":{}}],["python’",{"_index":73,"title":{},"name":{},"text":{"1":{}},"component":{}}],["quad",{"_index":211,"title":{},"name":{},"text":{"1":{}},"component":{}}],["quad[shift",{"_index":191,"title":{},"name":{},"text":{"1":{}},"component":{}}],["quadconstraintstream[a",{"_index":212,"title":{},"name":{},"text":{"1":{}},"component":{}}],["quadconstraintstream[shift",{"_index":222,"title":{},"name":{},"text":{"1":{}},"component":{}}],["qualiti",{"_index":783,"title":{},"name":{},"text":{"2":{},"8":{},"9":{},"10":{},"12":{}},"component":{}}],["queen",{"_index":686,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["queen'",{"_index":1933,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["queen.column",{"_index":2127,"title":{},"name":{},"text":{"10":{}},"component":{}}],["queen.queen_id",{"_index":2126,"title":{},"name":{},"text":{"10":{}},"component":{}}],["queen.row",{"_index":2904,"title":{},"name":{},"text":{"14":{}},"component":{}}],["queen_id",{"_index":2125,"title":{},"name":{},"text":{"10":{}},"component":{}}],["queen_list",{"_index":2066,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["queen_list.append(queen",{"_index":2129,"title":{},"name":{},"text":{"10":{}},"component":{}}],["queen_list[i",{"_index":2861,"title":{},"name":{},"text":{"14":{}},"component":{}}],["queen_list[j",{"_index":2863,"title":{},"name":{},"text":{"14":{}},"component":{}}],["queens/comput",{"_index":1147,"title":{},"name":{},"text":{"5":{}},"component":{}}],["queen’",{"_index":1911,"title":{},"name":{},"text":{"10":{}},"component":{}}],["question",{"_index":2369,"title":{},"name":{},"text":{"11":{}},"component":{}}],["queue",{"_index":634,"title":{"2-20":{},"2-25":{}},"name":{},"text":{"2":{},"10":{},"11":{}},"component":{}}],["queuedentityplac",{"_index":731,"title":{},"name":{},"text":{"2":{}},"component":{}}],["quick",{"_index":1647,"title":{},"name":{},"text":{"8":{},"11":{}},"component":{}}],["quicker",{"_index":2731,"title":{},"name":{},"text":{"13":{}},"component":{}}],["quickli",{"_index":1300,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["quickstart",{"_index":2399,"title":{"12":{}},"name":{"12":{}},"text":{"12":{}},"component":{}}],["quit",{"_index":2148,"title":{},"name":{},"text":{"10":{}},"component":{}}],["race",{"_index":2602,"title":{"13-14":{}},"name":{},"text":{"13":{}},"component":{}}],["radic",{"_index":1681,"title":{},"name":{},"text":{"8":{}},"component":{}}],["railway",{"_index":1920,"title":{},"name":{},"text":{"10":{}},"component":{}}],["rain",{"_index":1327,"title":{},"name":{},"text":{"6":{}},"component":{}}],["rais",{"_index":1924,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["random",{"_index":1203,"title":{"7-25":{},"7-27":{},"7-29":{},"10-46":{}},"name":{},"text":{"6":{},"7":{},"10":{}},"component":{}}],["randomli",{"_index":1183,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["randomse",{"_index":2199,"title":{},"name":{},"text":{"10":{}},"component":{}}],["randomtyp",{"_index":2200,"title":{},"name":{},"text":{"10":{}},"component":{}}],["rang",{"_index":987,"title":{"10-16":{}},"name":{},"text":{"3":{},"8":{},"9":{},"10":{},"12":{}},"component":{}}],["range(course.lecture_s",{"_index":2138,"title":{},"name":{},"text":{"10":{}},"component":{}}],["range(i",{"_index":2859,"title":{},"name":{},"text":{"14":{}},"component":{}}],["range(n",{"_index":2858,"title":{},"name":{},"text":{"14":{}},"component":{}}],["range_id",{"_index":1961,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["rare",{"_index":1450,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["ratio",{"_index":1290,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["re",{"_index":2626,"title":{},"name":{},"text":{"13":{}},"component":{}}],["reach",{"_index":690,"title":{},"name":{},"text":{"2":{},"6":{},"7":{},"8":{}},"component":{}}],["reachabl",{"_index":1116,"title":{},"name":{},"text":{"5":{}},"component":{}}],["react",{"_index":2251,"title":{},"name":{},"text":{"10":{}},"component":{}}],["read",{"_index":65,"title":{},"name":{},"text":{"1":{},"10":{},"11":{},"14":{}},"component":{}}],["readabl",{"_index":293,"title":{},"name":{},"text":{"1":{}},"component":{}}],["real",{"_index":779,"title":{"8-1":{},"13-11":{},"13-14":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["realiti",{"_index":2797,"title":{},"name":{},"text":{"14":{}},"component":{}}],["realli",{"_index":1601,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["reap",{"_index":104,"title":{},"name":{},"text":{"1":{}},"component":{}}],["reason",{"_index":351,"title":{},"name":{},"text":{"1":{},"6":{},"8":{},"11":{},"13":{}},"component":{}}],["reassign",{"_index":2660,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["rebas",{"_index":1755,"title":{},"name":{},"text":{"8":{}},"component":{}}],["recal",{"_index":2100,"title":{},"name":{},"text":{"10":{}},"component":{}}],["recalcul",{"_index":95,"title":{},"name":{},"text":{"1":{},"14":{}},"component":{}}],["receiv",{"_index":1020,"title":{},"name":{},"text":{"3":{},"10":{},"14":{},"15":{}},"component":{}}],["recent",{"_index":1278,"title":{},"name":{},"text":{"6":{},"8":{},"13":{}},"component":{}}],["recogn",{"_index":1084,"title":{},"name":{},"text":{"5":{},"10":{}},"component":{}}],["recommend",{"_index":232,"title":{"7-26":{},"14-12":{}},"name":{},"text":{"1":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["record",{"_index":1557,"title":{},"name":{},"text":{"7":{}},"component":{}}],["record/replay",{"_index":1402,"title":{"7-41":{}},"name":{},"text":{},"component":{}}],["recorder’",{"_index":1560,"title":{},"name":{},"text":{"7":{}},"component":{}}],["recurs",{"_index":2035,"title":{},"name":{},"text":{"10":{}},"component":{}}],["reduc",{"_index":332,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"8":{},"10":{},"13":{}},"component":{}}],["refactor",{"_index":2164,"title":{},"name":{},"text":{"10":{}},"component":{}}],["refer",{"_index":1459,"title":{},"name":{},"text":{"7":{},"10":{},"13":{},"15":{}},"component":{}}],["referenc",{"_index":1237,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["regardless",{"_index":463,"title":{},"name":{},"text":{"1":{},"12":{},"14":{},"15":{}},"component":{}}],["regist",{"_index":2420,"title":{},"name":{},"text":{"12":{},"15":{}},"component":{}}],["regret",{"_index":650,"title":{"2-31":{}},"name":{},"text":{"2":{},"8":{}},"component":{}}],["regular",{"_index":2875,"title":{},"name":{},"text":{"14":{}},"component":{}}],["rel",{"_index":1291,"title":{},"name":{},"text":{"6":{},"10":{},"11":{},"14":{}},"component":{}}],["relat",{"_index":855,"title":{"15-2":{}},"name":{},"text":{"3":{},"6":{},"7":{},"11":{}},"component":{}}],["relationship",{"_index":837,"title":{},"name":{},"text":{"3":{},"15":{}},"component":{}}],["releas",{"_index":2267,"title":{"11-9":{}},"name":{},"text":{"11":{},"14":{}},"component":{}}],["reli",{"_index":385,"title":{},"name":{},"text":{"1":{},"6":{},"8":{},"10":{},"11":{},"14":{}},"component":{}}],["reliabl",{"_index":1615,"title":{},"name":{},"text":{"8":{},"13":{},"14":{}},"component":{}}],["remain",{"_index":748,"title":{},"name":{},"text":{"2":{},"3":{},"10":{},"14":{}},"component":{}}],["remaind",{"_index":1529,"title":{},"name":{},"text":{"7":{}},"component":{}}],["remedi",{"_index":692,"title":{},"name":{},"text":{"2":{}},"component":{}}],["rememb",{"_index":1234,"title":{},"name":{},"text":{"6":{},"10":{},"14":{}},"component":{}}],["remot",{"_index":2765,"title":{"14-26":{}},"name":{},"text":{"14":{}},"component":{}}],["remov",{"_index":275,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"13":{},"14":{},"15":{}},"component":{}}],["removeeventlistener(self",{"_index":1727,"title":{},"name":{},"text":{"8":{}},"component":{}}],["repairmen",{"_index":2276,"title":{},"name":{},"text":{"11":{}},"component":{}}],["repeat",{"_index":715,"title":{"13":{},"13-1":{}},"name":{"13":{}},"text":{"2":{},"10":{},"13":{}},"component":{}}],["replac",{"_index":251,"title":{},"name":{},"text":{"1":{},"3":{},"10":{}},"component":{}}],["replan",{"_index":2596,"title":{"13-10":{}},"name":{},"text":{"13":{}},"component":{}}],["replay",{"_index":1559,"title":{},"name":{},"text":{"7":{}},"component":{}}],["repositori",{"_index":1888,"title":{},"name":{},"text":{"10":{}},"component":{}}],["repres",{"_index":397,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"8":{},"10":{},"12":{},"13":{},"14":{}},"component":{}}],["represent",{"_index":890,"title":{},"name":{},"text":{"3":{},"10":{},"14":{}},"component":{}}],["reproduc",{"_index":1202,"title":{"10-42":{}},"name":{},"text":{"6":{},"8":{},"10":{}},"component":{}}],["request",{"_index":1866,"title":{},"name":{},"text":{"10":{},"11":{},"14":{}},"component":{}}],["requir",{"_index":170,"title":{"11-6":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{}},"component":{}}],["required_cpu_pow",{"_index":430,"title":{},"name":{},"text":{"1":{}},"component":{}}],["required_cpu_power_total(constraint_factori",{"_index":425,"title":{},"name":{},"text":{"1":{}},"component":{}}],["required_job_roles(constraint_factori",{"_index":603,"title":{},"name":{},"text":{"1":{}},"component":{}}],["required_rol",{"_index":611,"title":{},"name":{},"text":{"1":{}},"component":{}}],["requiresuniqueentityev",{"_index":3114,"title":{},"name":{},"text":{"15":{}},"component":{}}],["rerout",{"_index":2728,"title":{},"name":{},"text":{"13":{}},"component":{}}],["research",{"_index":1355,"title":{},"name":{},"text":{"6":{},"11":{}},"component":{}}],["reset",{"_index":1352,"title":{},"name":{},"text":{"6":{},"8":{},"13":{},"14":{}},"component":{}}],["resetworkingsolution(self",{"_index":2877,"title":{},"name":{},"text":{"14":{}},"component":{}}],["resolv",{"_index":1778,"title":{},"name":{},"text":{"8":{},"10":{},"14":{}},"component":{}}],["resourc",{"_index":1001,"title":{},"name":{},"text":{"3":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["respect",{"_index":456,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["respons",{"_index":1953,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["rest",{"_index":1010,"title":{},"name":{},"text":{"3":{},"10":{},"13":{}},"component":{}}],["restart",{"_index":1709,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["restaur",{"_index":1027,"title":{},"name":{},"text":{"3":{}},"component":{}}],["restrict",{"_index":372,"title":{},"name":{},"text":{"1":{},"13":{}},"component":{}}],["result",{"_index":367,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["resum",{"_index":2735,"title":{},"name":{},"text":{"13":{}},"component":{}}],["retract(self",{"_index":2918,"title":{},"name":{},"text":{"14":{}},"component":{}}],["retriev",{"_index":341,"title":{},"name":{},"text":{"1":{},"10":{},"13":{}},"component":{}}],["return",{"_index":87,"title":{"13-15":{}},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["reus",{"_index":2105,"title":{},"name":{},"text":{"10":{},"11":{},"13":{},"14":{}},"component":{}}],["reusabl",{"_index":826,"title":{},"name":{},"text":{"3":{}},"component":{}}],["revenu",{"_index":2789,"title":{},"name":{},"text":{"14":{}},"component":{}}],["revers",{"_index":1483,"title":{},"name":{},"text":{"7":{},"12":{}},"component":{}}],["review",{"_index":2377,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["reward",{"_index":18,"title":{"1-7":{}},"name":{},"text":{"1":{},"10":{},"11":{}},"component":{}}],["right",{"_index":893,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["right_queen",{"_index":2862,"title":{},"name":{},"text":{"14":{}},"component":{}}],["right_queen.get_ascending_diagonal_index",{"_index":2869,"title":{},"name":{},"text":{"14":{}},"component":{}}],["right_queen.get_descending_diagonal_index",{"_index":2871,"title":{},"name":{},"text":{"14":{}},"component":{}}],["right_queen.row",{"_index":2865,"title":{},"name":{},"text":{"14":{}},"component":{}}],["right_queen.row_index",{"_index":2867,"title":{},"name":{},"text":{"14":{}},"component":{}}],["right_seat_design",{"_index":2113,"title":{},"name":{},"text":{"10":{}},"component":{}}],["right_top",{"_index":2097,"title":{},"name":{},"text":{"10":{}},"component":{}}],["risk",{"_index":2304,"title":{},"name":{},"text":{"11":{},"13":{},"14":{}},"component":{}}],["robin",{"_index":758,"title":{},"name":{},"text":{"2":{}},"component":{}}],["room",{"_index":465,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"10":{},"12":{},"13":{},"14":{}},"component":{}}],["room(1",{"_index":2531,"title":{},"name":{},"text":{"12":{}},"component":{}}],["room(2",{"_index":2532,"title":{},"name":{},"text":{"12":{}},"component":{}}],["room(3",{"_index":2533,"title":{},"name":{},"text":{"12":{}},"component":{}}],["room=non",{"_index":2436,"title":{},"name":{},"text":{"12":{}},"component":{}}],["room_conflict(constraint_factori",{"_index":2459,"title":{},"name":{},"text":{"12":{}},"component":{}}],["room_count(factori",{"_index":466,"title":{},"name":{},"text":{"1":{}},"component":{}}],["room_list",{"_index":2482,"title":{},"name":{},"text":{"12":{}},"component":{}}],["roomrang",{"_index":2447,"title":{},"name":{},"text":{"12":{}},"component":{}}],["root",{"_index":1423,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["roster",{"_index":840,"title":{},"name":{},"text":{"3":{},"11":{},"13":{},"14":{}},"component":{}}],["round",{"_index":757,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["rout",{"_index":888,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["row",{"_index":687,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"10":{},"13":{},"14":{}},"component":{}}],["row_index",{"_index":2905,"title":{},"name":{},"text":{"14":{}},"component":{}}],["row_index_list",{"_index":2906,"title":{},"name":{},"text":{"14":{}},"component":{}}],["row_index_list.append(queen",{"_index":2909,"title":{},"name":{},"text":{"14":{}},"component":{}}],["row_index_list.remove(queen",{"_index":2919,"title":{},"name":{},"text":{"14":{}},"component":{}}],["row_index_map",{"_index":2888,"title":{},"name":{},"text":{"14":{}},"component":{}}],["row_list",{"_index":2064,"title":{},"name":{},"text":{"10":{}},"component":{}}],["row_rang",{"_index":1937,"title":{},"name":{},"text":{"10":{}},"component":{}}],["rule",{"_index":591,"title":{},"name":{},"text":{"1":{},"8":{},"14":{}},"component":{}}],["run",{"_index":417,"title":{"12-10":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["running_computer(constraint_factori",{"_index":545,"title":{},"name":{},"text":{"1":{}},"component":{}}],["runtim",{"_index":1296,"title":{},"name":{},"text":{"6":{},"10":{},"14":{}},"component":{}}],["runtimeexcept",{"_index":2174,"title":{},"name":{},"text":{"10":{}},"component":{}}],["runway",{"_index":2685,"title":{},"name":{},"text":{"13":{}},"component":{}}],["s44",{"_index":3008,"title":{},"name":{},"text":{"14":{}},"component":{}}],["s51",{"_index":2999,"title":{},"name":{},"text":{"14":{}},"component":{}}],["s61",{"_index":3007,"title":{},"name":{},"text":{"14":{}},"component":{}}],["s66",{"_index":3006,"title":{},"name":{},"text":{"14":{}},"component":{}}],["s68",{"_index":3005,"title":{},"name":{},"text":{"14":{}},"component":{}}],["sacrif",{"_index":1752,"title":{},"name":{},"text":{"8":{}},"component":{}}],["sacrific",{"_index":1676,"title":{},"name":{},"text":{"8":{}},"component":{}}],["safe",{"_index":1710,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["safeti",{"_index":2639,"title":{},"name":{},"text":{"13":{}},"component":{}}],["salesmen",{"_index":1617,"title":{},"name":{},"text":{"8":{}},"component":{}}],["salt",{"_index":1313,"title":{},"name":{},"text":{"6":{}},"component":{}}],["same",{"_index":111,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["samevariablelisten",{"_index":3113,"title":{},"name":{},"text":{"15":{}},"component":{}}],["sampl",{"_index":839,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sanja",{"_index":1337,"title":{},"name":{},"text":{"6":{}},"component":{}}],["satisfact",{"_index":2273,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["satisfi",{"_index":2264,"title":{},"name":{},"text":{"10":{}},"component":{}}],["save",{"_index":900,"title":{},"name":{},"text":{"3":{}},"component":{}}],["save(self",{"_index":2249,"title":{},"name":{},"text":{"10":{}},"component":{}}],["scalabl",{"_index":724,"title":{"5-8":{}},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"11":{},"14":{}},"component":{}}],["scale",{"_index":88,"title":{"2-37":{},"2-39":{},"2-40":{}},"name":{},"text":{"1":{},"2":{},"5":{},"6":{},"7":{},"8":{},"10":{},"14":{}},"component":{}}],["scenario",{"_index":2683,"title":{},"name":{},"text":{"13":{}},"component":{}}],["schedul",{"_index":791,"title":{},"name":{},"text":{"2":{},"3":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["schedule.course_list",{"_index":2135,"title":{},"name":{},"text":{"10":{}},"component":{}}],["schedule.lecture_list",{"_index":2143,"title":{},"name":{},"text":{"10":{}},"component":{}}],["schedule.shift_list",{"_index":84,"title":{},"name":{},"text":{"1":{}},"component":{}}],["school",{"_index":2398,"title":{"12-3":{}},"name":{},"text":{"12":{}},"component":{}}],["scientif",{"_index":1284,"title":{},"name":{},"text":{"6":{}},"component":{}}],["scientist",{"_index":2327,"title":{},"name":{},"text":{"11":{}},"component":{}}],["scope",{"_index":1563,"title":{"8-8":{}},"name":{},"text":{"8":{},"10":{},"13":{}},"component":{}}],["score",{"_index":57,"title":{"1":{},"14":{},"10-29":{},"14-1":{},"14-2":{},"14-4":{},"14-5":{},"14-6":{},"14-7":{},"14-8":{},"14-9":{},"14-10":{},"14-15":{},"14-16":{},"14-17":{},"14-18":{},"14-21":{},"14-22":{},"14-24":{},"14-25":{},"14-26":{},"14-29":{},"14-30":{},"14-31":{},"14-32":{},"14-33":{},"14-34":{}},"name":{"14":{}},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["score.isfeas",{"_index":1735,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["score.issolutioniniti",{"_index":1734,"title":{},"name":{},"text":{"8":{},"13":{},"14":{}},"component":{}}],["score=non",{"_index":2484,"title":{},"name":{},"text":{"12":{}},"component":{}}],["score_director",{"_index":3084,"title":{},"name":{},"text":{"15":{}},"component":{}}],["score_explan",{"_index":3022,"title":{},"name":{},"text":{"14":{}},"component":{}}],["score_explanation.getconstraintmatchtotalmap().valu",{"_index":3027,"title":{},"name":{},"text":{"14":{}},"component":{}}],["score_explanation.getindictmentmap",{"_index":3039,"title":{},"name":{},"text":{"14":{}},"component":{}}],["score_explanation.getscor",{"_index":3024,"title":{},"name":{},"text":{"14":{}},"component":{}}],["score_first",{"_index":1131,"title":{},"name":{},"text":{"5":{}},"component":{}}],["score_manag",{"_index":3020,"title":{},"name":{},"text":{"14":{}},"component":{}}],["score_manager.explain(cloud_bal",{"_index":3023,"title":{},"name":{},"text":{"14":{}},"component":{}}],["score_manager_cr",{"_index":3019,"title":{},"name":{},"text":{"14":{}},"component":{}}],["score_manager_create(solver_factori",{"_index":3021,"title":{},"name":{},"text":{"14":{}},"component":{}}],["score_typ",{"_index":2510,"title":{},"name":{},"text":{"12":{}},"component":{}}],["scorebound",{"_index":1121,"title":{},"name":{},"text":{"5":{}},"component":{}}],["scorecalculationcounttermin",{"_index":1574,"title":{"8-16":{}},"name":{},"text":{"8":{}},"component":{}}],["scoredirector",{"_index":2698,"title":{},"name":{},"text":{"13":{},"15":{}},"component":{}}],["scoredirector.aftervariablechanged(shadow_custom",{"_index":3094,"title":{},"name":{},"text":{"15":{}},"component":{}}],["scoredirector.beforevariablechanged(shadow_custom",{"_index":3093,"title":{},"name":{},"text":{"15":{}},"component":{}}],["scoredirector[vehicleroutingsolut",{"_index":3085,"title":{},"name":{},"text":{"15":{}},"component":{}}],["scoreexplan",{"_index":3025,"title":{},"name":{},"text":{"14":{}},"component":{}}],["scoreexplanation.getconstraintmatchtotalmap",{"_index":2924,"title":{},"name":{},"text":{"14":{}},"component":{}}],["scoreexplanation.getindictmentmap",{"_index":2925,"title":{},"name":{},"text":{"14":{}},"component":{}}],["scoremanag",{"_index":3018,"title":{},"name":{},"text":{"14":{}},"component":{}}],["scratch",{"_index":98,"title":{},"name":{},"text":{"1":{},"2":{}},"component":{}}],["scrum",{"_index":947,"title":{},"name":{},"text":{"3":{}},"component":{}}],["seamlessli",{"_index":2808,"title":{},"name":{},"text":{"14":{}},"component":{}}],["search",{"_index":773,"title":{"5":{},"6":{},"9":{},"5-8":{},"6-2":{},"6-9":{},"6-13":{},"8-1":{},"11-5":{}},"name":{"5":{},"6":{},"9":{}},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"13":{}},"component":{}}],["seat",{"_index":968,"title":{},"name":{},"text":{"3":{}},"component":{}}],["seatdesign",{"_index":2112,"title":{},"name":{},"text":{"10":{}},"component":{}}],["seatdesignationdepend",{"_index":2110,"title":{},"name":{},"text":{"10":{}},"component":{}}],["second",{"_index":765,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"8":{},"12":{},"14":{},"15":{}},"component":{}}],["secondaryentityselector",{"_index":1449,"title":{},"name":{},"text":{"7":{}},"component":{}}],["secondarypillarselector",{"_index":1463,"title":{},"name":{},"text":{"7":{}},"component":{}}],["secondarysubchainselector",{"_index":1500,"title":{},"name":{},"text":{"7":{}},"component":{}}],["section",{"_index":829,"title":{},"name":{},"text":{"3":{},"6":{},"13":{}},"component":{}}],["see",{"_index":234,"title":{},"name":{},"text":{"1":{},"2":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"14":{}},"component":{}}],["seed",{"_index":1205,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["seem",{"_index":1267,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["seen",{"_index":2823,"title":{},"name":{},"text":{"14":{}},"component":{}}],["select",{"_index":246,"title":{"7":{},"7-27":{},"7-28":{},"7-29":{},"7-30":{},"7-31":{},"7-32":{},"7-33":{},"7-34":{},"7-35":{},"7-36":{},"7-37":{},"7-38":{},"7-39":{},"7-40":{},"7-41":{},"7-42":{}},"name":{"7":{}},"text":{"1":{},"2":{},"6":{},"7":{},"8":{},"10":{},"14":{}},"component":{}}],["selectedcountlimit",{"_index":1555,"title":{},"name":{},"text":{"7":{}},"component":{}}],["selectionord",{"_index":1256,"title":{"7-25":{},"7-26":{}},"name":{},"text":{"6":{},"7":{}},"component":{}}],["selectionsort",{"_index":1398,"title":{"7-38":{}},"name":{},"text":{},"component":{}}],["selectionsorterweightfactori",{"_index":1396,"title":{"7-37":{}},"name":{},"text":{},"component":{}}],["selector",{"_index":769,"title":{"7-9":{},"7-14":{},"7-23":{}},"name":{},"text":{"2":{},"6":{},"7":{},"10":{}},"component":{}}],["selector'",{"_index":1525,"title":{},"name":{},"text":{"7":{}},"component":{}}],["selectorprobabilityweightfactori",{"_index":1504,"title":{},"name":{},"text":{"7":{}},"component":{}}],["selectreversingmovetoo",{"_index":1499,"title":{},"name":{},"text":{"7":{}},"component":{}}],["self.ascending_diagonal_index_map",{"_index":2893,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.ascending_diagonal_index_map[i",{"_index":2896,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.ascending_diagonal_index_map[n",{"_index":2898,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.ascending_diagonal_index_map[queen.getascendingdiagonalindex",{"_index":2911,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.capac",{"_index":2027,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["self.car",{"_index":2013,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.citi",{"_index":2048,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.column_list",{"_index":2083,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.company_car_list",{"_index":2016,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.comput",{"_index":3051,"title":{},"name":{},"text":{"15":{}},"component":{}}],["self.computer_id",{"_index":1763,"title":{},"name":{},"text":{"8":{}},"component":{}}],["self.course.teacher.department.room_list",{"_index":1976,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.customer_list",{"_index":2030,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.day_of_week",{"_index":2426,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.deleted_comput",{"_index":2704,"title":{},"name":{},"text":{"13":{}},"component":{}}],["self.depot",{"_index":2028,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.descending_diagonal_index_map",{"_index":2894,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.descending_diagonal_index_map[i",{"_index":2897,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.descending_diagonal_index_map[queen.getdescendingdiagonalindex",{"_index":2915,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.end_tim",{"_index":2428,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.find_by_id(the_id",{"_index":2246,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.find_by_id(time_table_id",{"_index":2257,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.id",{"_index":2026,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["self.index",{"_index":1892,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.insert(ent",{"_index":2901,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.insert(queen",{"_index":2900,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.lesson_list",{"_index":2487,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.machin",{"_index":2667,"title":{},"name":{},"text":{"13":{}},"component":{}}],["self.machine_score_part_map.item",{"_index":2944,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.nam",{"_index":2415,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.next_custom",{"_index":3065,"title":{},"name":{},"text":{"15":{}},"component":{}}],["self.original_machin",{"_index":2666,"title":{},"name":{},"text":{"13":{}},"component":{}}],["self.personal_car_list",{"_index":2018,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.pin",{"_index":2653,"title":{},"name":{},"text":{"13":{}},"component":{}}],["self.previous_standstil",{"_index":2055,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["self.process_list",{"_index":3056,"title":{},"name":{},"text":{"15":{}},"component":{}}],["self.queen_list",{"_index":2071,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.retract(ent",{"_index":2902,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.room",{"_index":1974,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["self.room_list",{"_index":2486,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.row",{"_index":1940,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.row_index_map",{"_index":2892,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.row_index_map[i",{"_index":2895,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.row_index_map[row_index",{"_index":2907,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.row_list",{"_index":1968,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.save(solut",{"_index":2247,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.scor",{"_index":2077,"title":{},"name":{},"text":{"10":{},"12":{},"14":{}},"component":{}}],["self.start_tim",{"_index":2427,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.student_group",{"_index":2439,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.subject",{"_index":2437,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.teach",{"_index":2438,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.timeslot",{"_index":2440,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.timeslot_list",{"_index":2485,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.topic_list",{"_index":2096,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.transport_tim",{"_index":3100,"title":{},"name":{},"text":{"15":{}},"component":{}}],["self.update_vehicle(scoredirector",{"_index":3086,"title":{},"name":{},"text":{"15":{}},"component":{}}],["self.user_nam",{"_index":1767,"title":{},"name":{},"text":{"8":{}},"component":{}}],["self.vehicl",{"_index":3077,"title":{},"name":{},"text":{"15":{}},"component":{}}],["self.work",{"_index":1949,"title":{},"name":{},"text":{"10":{}},"component":{}}],["semi",{"_index":2597,"title":{"13-10":{}},"name":{},"text":{"13":{}},"component":{}}],["send",{"_index":1059,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["sens",{"_index":752,"title":{},"name":{},"text":{"2":{}},"component":{}}],["sensibl",{"_index":1415,"title":{},"name":{},"text":{"7":{}},"component":{}}],["sent",{"_index":596,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["separ",{"_index":442,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"9":{},"14":{},"15":{}},"component":{}}],["sequenc",{"_index":991,"title":{},"name":{},"text":{"3":{},"7":{},"8":{}},"component":{}}],["sequenti",{"_index":739,"title":{"7-13":{}},"name":{},"text":{"2":{},"6":{},"7":{},"12":{}},"component":{}}],["serious",{"_index":1073,"title":{},"name":{},"text":{"4":{}},"component":{}}],["server",{"_index":1002,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["serverless",{"_index":1057,"title":{},"name":{},"text":{"3":{}},"component":{}}],["servic",{"_index":1025,"title":{"14-26":{}},"name":{},"text":{"3":{},"10":{},"11":{},"14":{}},"component":{}}],["set",{"_index":500,"title":{},"name":{},"text":{"1":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["set_computer(self",{"_index":3052,"title":{},"name":{},"text":{"15":{}},"component":{}}],["set_next_customer(custom",{"_index":3066,"title":{},"name":{},"text":{"15":{}},"component":{}}],["set_previous_standstill(previous_standstil",{"_index":3062,"title":{},"name":{},"text":{"15":{}},"component":{}}],["set_previous_standstill(self",{"_index":2056,"title":{},"name":{},"text":{"10":{}},"component":{}}],["set_room(self",{"_index":2448,"title":{},"name":{},"text":{"12":{}},"component":{}}],["set_row(self",{"_index":1941,"title":{},"name":{},"text":{"10":{}},"component":{}}],["set_score(self",{"_index":2078,"title":{},"name":{},"text":{"10":{},"12":{},"14":{}},"component":{}}],["set_timeslot(self",{"_index":2444,"title":{},"name":{},"text":{"12":{}},"component":{}}],["set_vehicle(self",{"_index":3071,"title":{},"name":{},"text":{"15":{}},"component":{}}],["setter",{"_index":1912,"title":{},"name":{},"text":{"10":{},"12":{},"14":{}},"component":{}}],["setup",{"_index":2397,"title":{"12-2":{}},"name":{},"text":{},"component":{}}],["seven",{"_index":2803,"title":{},"name":{},"text":{"14":{}},"component":{}}],["sever",{"_index":285,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["shadow",{"_index":851,"title":{"15":{},"15-2":{},"15-3":{}},"name":{"15":{}},"text":{"3":{},"10":{},"14":{},"15":{}},"component":{}}],["shadow_custom",{"_index":3091,"title":{},"name":{},"text":{"15":{}},"component":{}}],["shadow_customer.next_custom",{"_index":3095,"title":{},"name":{},"text":{"15":{}},"component":{}}],["shadow_customer.vehicl",{"_index":3092,"title":{},"name":{},"text":{"15":{}},"component":{}}],["shallow",{"_index":2101,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["share",{"_index":571,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["shift",{"_index":83,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["shift.dat",{"_index":346,"title":{},"name":{},"text":{"1":{}},"component":{}}],["shift.employe",{"_index":85,"title":{},"name":{},"text":{"1":{}},"component":{}}],["shift.employee.nam",{"_index":339,"title":{},"name":{},"text":{"1":{}},"component":{}}],["shift.hour",{"_index":326,"title":{},"name":{},"text":{"1":{}},"component":{}}],["shift_on_day_off(constraint_factori",{"_index":375,"title":{},"name":{},"text":{"1":{}},"component":{}}],["shift_pinning_filter(solut",{"_index":2654,"title":{},"name":{},"text":{"13":{}},"component":{}}],["shiftassign",{"_index":864,"title":{},"name":{},"text":{"3":{},"7":{},"10":{}},"component":{}}],["ship",{"_index":2290,"title":{},"name":{},"text":{"11":{}},"component":{}}],["shop",{"_index":2293,"title":{},"name":{},"text":{"11":{}},"component":{}}],["short",{"_index":1788,"title":{},"name":{},"text":{"9":{},"10":{},"13":{},"14":{}},"component":{}}],["shortcut",{"_index":662,"title":{"2-38":{}},"name":{},"text":{"2":{}},"component":{}}],["shouldn’t",{"_index":2085,"title":{},"name":{},"text":{"10":{}},"component":{}}],["show",{"_index":240,"title":{"10-49":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"14":{}},"component":{}}],["shown",{"_index":882,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"9":{},"14":{}},"component":{}}],["shuffl",{"_index":1257,"title":{"7-25":{},"7-28":{}},"name":{},"text":{"6":{},"7":{}},"component":{}}],["shutdown",{"_index":1719,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["sick",{"_index":2609,"title":{},"name":{},"text":{"13":{}},"component":{}}],["side",{"_index":381,"title":{},"name":{},"text":{"1":{},"3":{},"15":{}},"component":{}}],["signific",{"_index":1657,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["significantli",{"_index":832,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["signum",{"_index":2756,"title":{"14-4":{}},"name":{},"text":{"14":{}},"component":{}}],["silver",{"_index":2324,"title":{},"name":{},"text":{"11":{}},"component":{}}],["similar",{"_index":101,"title":{},"name":{},"text":{"1":{},"2":{},"6":{},"7":{},"8":{},"12":{}},"component":{}}],["similarli",{"_index":535,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"13":{},"14":{}},"component":{}}],["simpl",{"_index":319,"title":{"6-9":{}},"name":{},"text":{"1":{},"2":{},"7":{},"12":{},"14":{}},"component":{}}],["simpler",{"_index":527,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["simplescor",{"_index":1697,"title":{"14-11":{}},"name":{},"text":{"8":{},"10":{},"14":{}},"component":{}}],["simplescore.of(self.scor",{"_index":2922,"title":{},"name":{},"text":{"14":{}},"component":{}}],["simplescore.on",{"_index":304,"title":{},"name":{},"text":{"1":{}},"component":{}}],["simplescore.valueof(scor",{"_index":2872,"title":{},"name":{},"text":{"14":{}},"component":{}}],["simplest",{"_index":177,"title":{},"name":{},"text":{"1":{},"5":{},"6":{},"7":{}},"component":{}}],["simplifi",{"_index":902,"title":{},"name":{},"text":{"3":{},"10":{},"13":{}},"component":{}}],["simul",{"_index":1167,"title":{"6-16":{}},"name":{},"text":{"6":{},"7":{},"8":{},"10":{}},"component":{}}],["simulatedannealingstartingtemperatur",{"_index":1309,"title":{},"name":{},"text":{"6":{}},"component":{}}],["singl",{"_index":93,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"12":{},"14":{}},"component":{}}],["singleton",{"_index":2072,"title":{},"name":{},"text":{"10":{}},"component":{}}],["situat",{"_index":522,"title":{},"name":{},"text":{"1":{},"13":{}},"component":{}}],["size",{"_index":870,"title":{"8-1":{}},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["skill",{"_index":847,"title":{},"name":{},"text":{"3":{},"13":{}},"component":{}}],["slight",{"_index":1530,"title":{},"name":{},"text":{"7":{}},"component":{}}],["slightli",{"_index":1248,"title":{},"name":{},"text":{"6":{},"8":{},"10":{}},"component":{}}],["slow",{"_index":1738,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["slower",{"_index":1926,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["small",{"_index":1145,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"8":{},"11":{},"13":{},"15":{}},"component":{}}],["smaller",{"_index":1542,"title":{},"name":{},"text":{"7":{},"8":{},"9":{}},"component":{}}],["smart",{"_index":2976,"title":{},"name":{},"text":{"14":{}},"component":{}}],["smarter",{"_index":2333,"title":{},"name":{},"text":{"11":{}},"component":{}}],["smartest",{"_index":2326,"title":{},"name":{},"text":{"11":{}},"component":{}}],["snippet",{"_index":415,"title":{},"name":{},"text":{"1":{}},"component":{}}],["social",{"_index":2628,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["soft",{"_index":135,"title":{"11-4":{},"14-6":{}},"name":{},"text":{"1":{},"2":{},"3":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["soft_scor",{"_index":80,"title":{},"name":{},"text":{"1":{}},"component":{}}],["softer",{"_index":1247,"title":{},"name":{},"text":{"6":{}},"component":{}}],["softwar",{"_index":2345,"title":{},"name":{},"text":{"11":{}},"component":{}}],["solid",{"_index":2232,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solut",{"_index":281,"title":{"8-2":{},"10-18":{},"10-25":{},"10-27":{},"10-28":{},"10-29":{},"10-30":{},"10-32":{},"10-34":{},"12-8":{},"13-14":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["solution.schedule_state.is_draft(shift",{"_index":2655,"title":{},"name":{},"text":{"13":{}},"component":{}}],["solution1",{"_index":2229,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solutionclass",{"_index":1844,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solutionclon",{"_index":2106,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["solutiontyp",{"_index":2854,"title":{},"name":{},"text":{"14":{}},"component":{}}],["solution’",{"_index":2727,"title":{},"name":{},"text":{"13":{}},"component":{}}],["solv",{"_index":143,"title":{"8-22":{},"8-24":{},"10-37":{},"10-48":{},"10-49":{},"12-9":{},"13-15":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["solve(generate_problem",{"_index":2580,"title":{},"name":{},"text":{"12":{}},"component":{}}],["solve(solut",{"_index":1715,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["solve_batch(self",{"_index":2242,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solve_live(self",{"_index":2255,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solve_time_in_minut",{"_index":1859,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solveandlisten",{"_index":2254,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver",{"_index":171,"title":{"8-7":{},"8-20":{},"8-21":{},"10-2":{},"10-3":{},"10-4":{},"10-35":{},"10-36":{},"10-44":{},"10-45":{},"14-33":{}},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["solver'",{"_index":2736,"title":{},"name":{},"text":{"13":{}},"component":{}}],["solver.addeventlistener(new_best_solution_listen",{"_index":1733,"title":{},"name":{},"text":{"8":{}},"component":{}}],["solver.addproblemchange(deletecomputerproblemchange(comput",{"_index":2722,"title":{},"name":{},"text":{"13":{}},"component":{}}],["solver.solv",{"_index":1737,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["solver.solve(problem",{"_index":1829,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver.solve(solut",{"_index":1717,"title":{},"name":{},"text":{"8":{}},"component":{}}],["solver.terminateearli",{"_index":2734,"title":{},"name":{},"text":{"13":{}},"component":{}}],["solver_config",{"_index":1836,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["solver_config.getterminationconfig().setminutesspentlimit(user_input",{"_index":1873,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_config_create_from_xml_fil",{"_index":1834,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_config_create_from_xml_file(\"solverconfig.xml",{"_index":2217,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_config_create_from_xml_file(pathlib.path('solverconfig.xml",{"_index":1837,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_factori",{"_index":1838,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_factory.buildsolv",{"_index":1874,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_factory.buildsolver().solve(generate_problem",{"_index":1840,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_factory_cr",{"_index":1832,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["solver_factory_create(solver_config",{"_index":1839,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["solver_job",{"_index":2227,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_job.getfinalbestsolut",{"_index":2230,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_manag",{"_index":2218,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_manager.solve(problem_id",{"_index":2228,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_manager.solve(time_table_id",{"_index":2244,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_manager.solveandlisten(time_table_id",{"_index":2256,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_manager.terminateearly(time_table_id",{"_index":2259,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_manager_cr",{"_index":2216,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver_manager_create(solver_config",{"_index":2219,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solverconfig",{"_index":1831,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["solvereventlisten",{"_index":1579,"title":{"8-19":{}},"name":{},"text":{"8":{}},"component":{}}],["solverfactori",{"_index":1830,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["solverjob",{"_index":2694,"title":{},"name":{},"text":{"13":{}},"component":{}}],["solverjob.getfinalbestsolut",{"_index":2223,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solvermanag",{"_index":1747,"title":{"10-47":{}},"name":{},"text":{"8":{},"10":{},"13":{}},"component":{}}],["solvermanager.solv",{"_index":2213,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solvermanager.terminateearly(problemid",{"_index":2265,"title":{},"name":{},"text":{"10":{}},"component":{}}],["solver’",{"_index":1736,"title":{},"name":{},"text":{"8":{}},"component":{}}],["someon",{"_index":2640,"title":{},"name":{},"text":{"13":{}},"component":{}}],["someperson",{"_index":614,"title":{},"name":{},"text":{"1":{}},"component":{}}],["someth",{"_index":1187,"title":{},"name":{},"text":{"6":{},"7":{}},"component":{}}],["sometim",{"_index":751,"title":{},"name":{},"text":{"2":{},"6":{},"7":{},"10":{},"11":{},"14":{}},"component":{}}],["soon",{"_index":1624,"title":{},"name":{},"text":{"8":{},"13":{},"14":{}},"component":{}}],["sort",{"_index":509,"title":{"7-25":{},"7-34":{},"7-35":{},"7-36":{},"7-37":{},"7-38":{}},"name":{},"text":{"1":{},"2":{},"7":{},"14":{}},"component":{}}],["sortedmap",{"_index":505,"title":{},"name":{},"text":{"1":{}},"component":{}}],["sortedset",{"_index":502,"title":{},"name":{},"text":{"1":{}},"component":{}}],["sorter",{"_index":1554,"title":{},"name":{},"text":{"7":{}},"component":{}}],["sortermann",{"_index":1393,"title":{"7-35":{}},"name":{},"text":{"7":{}},"component":{}}],["sourc",{"_index":602,"title":{"11-13":{}},"name":{},"text":{"1":{},"11":{},"12":{},"15":{}},"component":{}}],["source_custom",{"_index":3088,"title":{},"name":{},"text":{"15":{}},"component":{}}],["source_customer.previous_standstil",{"_index":3089,"title":{},"name":{},"text":{"15":{}},"component":{}}],["source_variable_nam",{"_index":3057,"title":{},"name":{},"text":{"15":{}},"component":{}}],["source’",{"_index":3078,"title":{},"name":{},"text":{"15":{}},"component":{}}],["space",{"_index":869,"title":{"8-1":{},"11-5":{}},"name":{},"text":{"3":{},"5":{},"8":{},"9":{},"10":{},"13":{}},"component":{}}],["spanish",{"_index":2552,"title":{},"name":{},"text":{"12":{}},"component":{}}],["spare",{"_index":1907,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["speaker",{"_index":445,"title":{},"name":{},"text":{"1":{},"14":{}},"component":{}}],["speaker_availability(factori",{"_index":447,"title":{},"name":{},"text":{"1":{}},"component":{}}],["special",{"_index":1558,"title":{},"name":{},"text":{"7":{},"10":{}},"component":{}}],["specif",{"_index":678,"title":{},"name":{},"text":{"2":{},"3":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["specifi",{"_index":1253,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"10":{},"14":{},"15":{}},"component":{}}],["speed",{"_index":1211,"title":{"14-24":{}},"name":{},"text":{"6":{},"8":{},"10":{},"14":{}},"component":{}}],["speedup",{"_index":2961,"title":{},"name":{},"text":{"14":{}},"component":{}}],["spell",{"_index":1282,"title":{},"name":{},"text":{"6":{}},"component":{}}],["spend",{"_index":2954,"title":{},"name":{},"text":{"14":{}},"component":{}}],["spent",{"_index":1138,"title":{"8-10":{},"8-11":{}},"name":{},"text":{"5":{},"6":{},"8":{},"10":{}},"component":{}}],["split",{"_index":1000,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["sport",{"_index":2297,"title":{},"name":{},"text":{"11":{}},"component":{}}],["spread",{"_index":2305,"title":{},"name":{},"text":{"11":{}},"component":{}}],["sprint",{"_index":948,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sql",{"_index":72,"title":{},"name":{},"text":{"1":{}},"component":{}}],["squar",{"_index":2985,"title":{},"name":{},"text":{"14":{}},"component":{}}],["ssh",{"_index":2383,"title":{},"name":{},"text":{"11":{}},"component":{}}],["stabl",{"_index":507,"title":{},"name":{},"text":{"1":{},"8":{},"13":{}},"component":{}}],["stage",{"_index":921,"title":{"13-16":{}},"name":{},"text":{"3":{},"13":{}},"component":{}}],["stakehold",{"_index":2793,"title":{},"name":{},"text":{"14":{}},"component":{}}],["standard",{"_index":2202,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["standpoint",{"_index":1877,"title":{},"name":{},"text":{"10":{}},"component":{}}],["standstil",{"_index":2044,"title":{},"name":{},"text":{"10":{},"15":{}},"component":{}}],["start",{"_index":237,"title":{"3-5":{},"3-6":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["start/end",{"_index":982,"title":{},"name":{},"text":{"3":{}},"component":{}}],["start_tim",{"_index":2424,"title":{},"name":{},"text":{"12":{}},"component":{}}],["starter",{"_index":862,"title":{},"name":{},"text":{"3":{}},"component":{}}],["starttimeupdatingvariablelisten",{"_index":3115,"title":{},"name":{},"text":{"15":{}},"component":{}}],["state",{"_index":1446,"title":{},"name":{},"text":{"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["statement",{"_index":539,"title":{},"name":{},"text":{"1":{}},"component":{}}],["static",{"_index":1773,"title":{},"name":{},"text":{"8":{}},"component":{}}],["statu",{"_index":261,"title":{"11-8":{}},"name":{},"text":{"1":{}},"component":{}}],["stay",{"_index":1878,"title":{},"name":{},"text":{"10":{}},"component":{}}],["steal",{"_index":2168,"title":{},"name":{},"text":{"10":{}},"component":{}}],["steel",{"_index":2295,"title":{},"name":{},"text":{"11":{}},"component":{}}],["step",{"_index":730,"title":{"6-3":{},"6-4":{},"6-25":{}},"name":{},"text":{"2":{},"6":{},"7":{},"8":{},"10":{},"14":{}},"component":{}}],["stepcountinghillclimbings",{"_index":1340,"title":{},"name":{},"text":{"6":{}},"component":{}}],["stepcounttermin",{"_index":1570,"title":{"8-14":{}},"name":{},"text":{},"component":{}}],["still",{"_index":270,"title":{},"name":{},"text":{"1":{},"6":{},"8":{},"10":{},"12":{},"13":{},"14":{}},"component":{}}],["stock",{"_index":1987,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["stock_amount_rang",{"_index":1988,"title":{},"name":{},"text":{"10":{}},"component":{}}],["stop",{"_index":1662,"title":{},"name":{},"text":{"8":{},"10":{},"13":{}},"component":{}}],["stop_solving(self",{"_index":2258,"title":{},"name":{},"text":{"10":{}},"component":{}}],["storag",{"_index":2291,"title":{},"name":{},"text":{"11":{}},"component":{}}],["store",{"_index":885,"title":{},"name":{},"text":{"3":{},"13":{}},"component":{}}],["str",{"_index":480,"title":{},"name":{},"text":{"1":{},"8":{},"10":{},"14":{}},"component":{}}],["straightforward",{"_index":2778,"title":{},"name":{},"text":{"14":{}},"component":{}}],["strateg",{"_index":1341,"title":{},"name":{},"text":{"6":{}},"component":{}}],["strategi",{"_index":1062,"title":{"4-2":{}},"name":{},"text":{"8":{},"12":{}},"component":{}}],["strategic_oscil",{"_index":1345,"title":{},"name":{},"text":{"6":{}},"component":{}}],["strategic_oscillation_by_level",{"_index":1348,"title":{},"name":{},"text":{"6":{}},"component":{}}],["strategic_oscillation_by_level_on_best_scor",{"_index":1350,"title":{},"name":{},"text":{"6":{}},"component":{}}],["stream",{"_index":5,"title":{"1":{},"1-2":{},"1-3":{}},"name":{"1":{}},"text":{"1":{},"10":{},"12":{},"14":{}},"component":{}}],["stream’",{"_index":599,"title":{},"name":{},"text":{"1":{}},"component":{}}],["strength",{"_index":706,"title":{"10-22":{}},"name":{},"text":{"2":{},"5":{},"7":{}},"component":{}}],["strictli",{"_index":750,"title":{},"name":{},"text":{"2":{}},"component":{}}],["string",{"_index":2503,"title":{},"name":{},"text":{"12":{},"14":{}},"component":{}}],["strong",{"_index":704,"title":{},"name":{},"text":{"2":{}},"component":{}}],["strongest",{"_index":626,"title":{"2-14":{},"2-17":{}},"name":{},"text":{"2":{},"8":{}},"component":{}}],["strongest_fit",{"_index":712,"title":{},"name":{},"text":{"2":{}},"component":{}}],["strongest_fit_decreas",{"_index":713,"title":{},"name":{},"text":{"2":{}},"component":{}}],["structur",{"_index":1422,"title":{},"name":{},"text":{"7":{},"10":{}},"component":{}}],["stuck",{"_index":1164,"title":{"6-11":{}},"name":{},"text":{"6":{},"14":{}},"component":{}}],["student",{"_index":2090,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["student_group",{"_index":2434,"title":{},"name":{},"text":{"12":{}},"component":{}}],["student_group_conflict(constraint_factori",{"_index":2461,"title":{},"name":{},"text":{"12":{}},"component":{}}],["student_s",{"_index":1898,"title":{},"name":{},"text":{"10":{}},"component":{}}],["studi",{"_index":1335,"title":{},"name":{},"text":{"6":{}},"component":{}}],["sub",{"_index":541,"title":{"7-12":{},"7-13":{}},"name":{},"text":{"1":{},"7":{}},"component":{}}],["subchain",{"_index":1433,"title":{},"name":{},"text":{"7":{}},"component":{}}],["subchainchangemov",{"_index":1496,"title":{},"name":{},"text":{"7":{}},"component":{}}],["subchainchangemoveselector",{"_index":1374,"title":{"7-16":{}},"name":{},"text":{"7":{}},"component":{}}],["subchainselector",{"_index":1493,"title":{},"name":{},"text":{"7":{}},"component":{}}],["subchainswapmoveselector",{"_index":1376,"title":{"7-17":{}},"name":{},"text":{"7":{}},"component":{}}],["subclass",{"_index":1964,"title":{},"name":{},"text":{"10":{}},"component":{}}],["subject",{"_index":1006,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["submit",{"_index":2220,"title":{},"name":{},"text":{"10":{}},"component":{}}],["subnod",{"_index":1106,"title":{},"name":{},"text":{"5":{}},"component":{}}],["suboptim",{"_index":1786,"title":{},"name":{},"text":{"9":{},"13":{}},"component":{}}],["subpillar",{"_index":1460,"title":{},"name":{},"text":{"7":{}},"component":{}}],["subpillartyp",{"_index":1457,"title":{},"name":{},"text":{"7":{}},"component":{}}],["subscrib",{"_index":2742,"title":{},"name":{},"text":{"13":{}},"component":{}}],["subsecond",{"_index":980,"title":{},"name":{},"text":{"3":{}},"component":{}}],["subselect",{"_index":1363,"title":{"7-4":{}},"name":{},"text":{},"component":{}}],["subsequ",{"_index":436,"title":{},"name":{},"text":{"1":{},"2":{},"6":{},"8":{}},"component":{}}],["subset",{"_index":1250,"title":{},"name":{},"text":{"6":{},"7":{},"10":{},"11":{}},"component":{}}],["subsoft",{"_index":2980,"title":{},"name":{},"text":{"14":{}},"component":{}}],["subtract",{"_index":2818,"title":{},"name":{},"text":{"14":{}},"component":{}}],["success",{"_index":833,"title":{},"name":{},"text":{"3":{}},"component":{}}],["such",{"_index":131,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["suffer",{"_index":1133,"title":{},"name":{},"text":{"5":{}},"component":{}}],["suffic",{"_index":875,"title":{},"name":{},"text":{"3":{},"6":{},"11":{}},"component":{}}],["suffici",{"_index":1650,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["suffix",{"_index":691,"title":{},"name":{},"text":{"2":{}},"component":{}}],["suitabl",{"_index":1176,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["sum",{"_index":31,"title":{"1-14":{}},"name":{},"text":{"1":{},"8":{},"9":{},"13":{},"14":{}},"component":{}}],["suppli",{"_index":1502,"title":{},"name":{},"text":{"7":{}},"component":{}}],["support",{"_index":199,"title":{"11-11":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["sure",{"_index":836,"title":{},"name":{},"text":{"3":{},"6":{},"14":{},"15":{}},"component":{}}],["surplu",{"_index":868,"title":{},"name":{},"text":{"3":{}},"component":{}}],["surrog",{"_index":874,"title":{},"name":{},"text":{"3":{}},"component":{}}],["suspici",{"_index":2179,"title":{},"name":{},"text":{"10":{}},"component":{}}],["swap",{"_index":1426,"title":{},"name":{},"text":{"7":{}},"component":{}}],["swapmov",{"_index":1443,"title":{},"name":{},"text":{"7":{}},"component":{}}],["swapmoveselector",{"_index":1364,"title":{"7-8":{}},"name":{},"text":{"7":{}},"component":{}}],["switch",{"_index":789,"title":{},"name":{},"text":{"2":{},"6":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["synchron",{"_index":1659,"title":{},"name":{},"text":{"8":{}},"component":{}}],["system",{"_index":1901,"title":{},"name":{},"text":{"10":{},"13":{},"14":{}},"component":{}}],["t",{"_index":247,"title":{},"name":{},"text":{"1":{},"7":{}},"component":{}}],["tabl",{"_index":1631,"title":{},"name":{},"text":{"8":{},"12":{},"14":{}},"component":{}}],["taboo",{"_index":1279,"title":{},"name":{},"text":{"6":{}},"component":{}}],["tabu",{"_index":1166,"title":{"6-13":{}},"name":{},"text":{"6":{},"8":{},"10":{}},"component":{}}],["tabu_search",{"_index":1289,"title":{},"name":{},"text":{"6":{}},"component":{}}],["tag",{"_index":2788,"title":{},"name":{},"text":{"14":{}},"component":{}}],["tail",{"_index":1271,"title":{},"name":{},"text":{"6":{},"7":{},"10":{}},"component":{}}],["tailchain",{"_index":1480,"title":{},"name":{},"text":{"7":{}},"component":{}}],["tailchainswapmov",{"_index":1481,"title":{},"name":{},"text":{"7":{}},"component":{}}],["tailchainswapmoveselector",{"_index":1371,"title":{"7-15":{}},"name":{},"text":{},"component":{}}],["take",{"_index":156,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{}},"component":{}}],["taken",{"_index":1680,"title":{},"name":{},"text":{"8":{},"10":{},"11":{},"12":{}},"component":{}}],["talk",{"_index":443,"title":{},"name":{},"text":{"1":{},"3":{},"14":{}},"component":{}}],["talk.has_any_unavailable_speak",{"_index":449,"title":{},"name":{},"text":{"1":{}},"component":{}}],["talk.room",{"_index":467,"title":{},"name":{},"text":{"1":{}},"component":{}}],["tank",{"_index":2786,"title":{},"name":{},"text":{"14":{}},"component":{}}],["target",{"_index":1482,"title":{},"name":{},"text":{"7":{}},"component":{}}],["task",{"_index":934,"title":{},"name":{},"text":{"3":{},"10":{},"11":{}},"component":{}}],["tax",{"_index":2659,"title":{},"name":{},"text":{"13":{}},"component":{}}],["teach",{"_index":805,"title":{},"name":{},"text":{"2":{},"10":{},"11":{},"12":{}},"component":{}}],["teacher",{"_index":804,"title":{},"name":{},"text":{"2":{},"10":{},"11":{},"12":{}},"component":{}}],["teacher_conflict(constraint_factori",{"_index":2460,"title":{},"name":{},"text":{"12":{}},"component":{}}],["teacher’",{"_index":1906,"title":{},"name":{},"text":{"10":{}},"component":{}}],["technic",{"_index":2610,"title":{},"name":{},"text":{"13":{}},"component":{}}],["techniqu",{"_index":665,"title":{"2-40":{},"14-7":{}},"name":{},"text":{"2":{},"8":{},"11":{},"13":{},"14":{}},"component":{}}],["technolog",{"_index":2214,"title":{},"name":{},"text":{"10":{}},"component":{}}],["tell",{"_index":2344,"title":{},"name":{},"text":{"11":{},"12":{},"14":{}},"component":{}}],["temperatur",{"_index":1305,"title":{},"name":{},"text":{"6":{}},"component":{}}],["templat",{"_index":1867,"title":{},"name":{},"text":{"10":{}},"component":{}}],["tempor",{"_index":2007,"title":{},"name":{},"text":{"10":{}},"component":{}}],["temporarili",{"_index":1885,"title":{},"name":{},"text":{"10":{}},"component":{}}],["ten",{"_index":2825,"title":{},"name":{},"text":{"14":{}},"component":{}}],["tenant’",{"_index":1050,"title":{},"name":{},"text":{"3":{}},"component":{}}],["tend",{"_index":1600,"title":{},"name":{},"text":{"8":{},"11":{},"14":{}},"component":{}}],["term",{"_index":1109,"title":{},"name":{},"text":{"5":{},"9":{},"11":{},"13":{},"14":{}},"component":{}}],["termin",{"_index":239,"title":{"6-33":{},"8-9":{},"8-10":{},"8-11":{},"8-17":{},"8-18":{}},"name":{},"text":{"1":{},"2":{},"6":{},"8":{},"10":{},"12":{},"13":{},"14":{}},"component":{}}],["terminateearli",{"_index":1667,"title":{},"name":{},"text":{"8":{},"13":{}},"component":{}}],["terminateearly(problemid",{"_index":2222,"title":{},"name":{},"text":{"10":{}},"component":{}}],["terminateearly(self",{"_index":1711,"title":{},"name":{},"text":{"8":{}},"component":{}}],["termination_config",{"_index":1861,"title":{},"name":{},"text":{"10":{}},"component":{}}],["terminolog",{"_index":2754,"title":{"14-1":{}},"name":{},"text":{},"component":{}}],["terribl",{"_index":1129,"title":{},"name":{},"text":{"5":{}},"component":{}}],["test",{"_index":1623,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["that’",{"_index":701,"title":{},"name":{},"text":{"2":{},"6":{},"10":{}},"component":{}}],["the_id",{"_index":2245,"title":{},"name":{},"text":{"10":{}},"component":{}}],["their",{"_index":945,"title":{},"name":{},"text":{"3":{}},"component":{}}],["theme",{"_index":3002,"title":{},"name":{},"text":{"14":{}},"component":{}}],["themselv",{"_index":949,"title":{},"name":{},"text":{"3":{},"7":{}},"component":{}}],["theori",{"_index":1442,"title":{},"name":{},"text":{"7":{}},"component":{}}],["therefor",{"_index":179,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["thereof",{"_index":2114,"title":{},"name":{},"text":{"10":{}},"component":{}}],["there’",{"_index":675,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"11":{}},"component":{}}],["thin",{"_index":1143,"title":{},"name":{},"text":{"5":{}},"component":{}}],["thing",{"_index":1263,"title":{},"name":{},"text":{"6":{},"11":{},"13":{},"14":{}},"component":{}}],["those",{"_index":373,"title":{},"name":{},"text":{"1":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["though",{"_index":1546,"title":{},"name":{},"text":{"7":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["thought",{"_index":830,"title":{},"name":{},"text":{"3":{}},"component":{}}],["thousand",{"_index":1146,"title":{},"name":{},"text":{"5":{}},"component":{}}],["thread",{"_index":1578,"title":{"8-18":{}},"name":{},"text":{"8":{},"10":{},"13":{}},"component":{}}],["threadpoolexecutor",{"_index":1720,"title":{},"name":{},"text":{"8":{}},"component":{}}],["thread’",{"_index":1756,"title":{},"name":{},"text":{"8":{}},"component":{}}],["three",{"_index":799,"title":{},"name":{},"text":{"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["threshold",{"_index":1334,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["through",{"_index":378,"title":{"3-6":{},"3-7":{},"3-8":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"10":{},"11":{},"12":{},"14":{}},"component":{}}],["throughout",{"_index":2413,"title":{},"name":{},"text":{"12":{},"14":{}},"component":{}}],["throw",{"_index":1148,"title":{},"name":{},"text":{"5":{}},"component":{}}],["thrown",{"_index":1297,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["thu",{"_index":993,"title":{},"name":{},"text":{"3":{},"4":{},"13":{}},"component":{}}],["ti",{"_index":1241,"title":{},"name":{},"text":{"6":{},"10":{}},"component":{}}],["tie",{"_index":1240,"title":{},"name":{},"text":{"6":{}},"component":{}}],["time",{"_index":309,"title":{"3-3":{},"3-6":{},"3-7":{},"3-8":{},"3-9":{},"7-24":{},"7-27":{},"8-10":{},"8-11":{},"13-11":{},"13-14":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["time(hour=10",{"_index":2518,"title":{},"name":{},"text":{"12":{}},"component":{}}],["time(hour=11",{"_index":2520,"title":{},"name":{},"text":{"12":{}},"component":{}}],["time(hour=13",{"_index":2522,"title":{},"name":{},"text":{"12":{}},"component":{}}],["time(hour=14",{"_index":2523,"title":{},"name":{},"text":{"12":{}},"component":{}}],["time(hour=15",{"_index":2525,"title":{},"name":{},"text":{"12":{}},"component":{}}],["time(hour=8",{"_index":2514,"title":{},"name":{},"text":{"12":{}},"component":{}}],["time(hour=9",{"_index":2516,"title":{},"name":{},"text":{"12":{}},"component":{}}],["time_t",{"_index":2250,"title":{},"name":{},"text":{"10":{}},"component":{}}],["time_table_id",{"_index":2243,"title":{},"name":{},"text":{"10":{}},"component":{}}],["timefram",{"_index":1610,"title":{},"name":{},"text":{"8":{}},"component":{}}],["timegrain",{"_index":814,"title":{"3-5":{}},"name":{},"text":{"3":{}},"component":{}}],["timeout",{"_index":2147,"title":{},"name":{},"text":{"10":{}},"component":{}}],["timer",{"_index":1682,"title":{},"name":{},"text":{"8":{}},"component":{}}],["timeslot",{"_index":812,"title":{"3-4":{}},"name":{},"text":{"3":{},"12":{},"14":{}},"component":{}}],["timeslot(1",{"_index":2513,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot(10",{"_index":2530,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot(2",{"_index":2517,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot(3",{"_index":2519,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot(4",{"_index":2521,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot(5",{"_index":2524,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot(6",{"_index":2526,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot(7",{"_index":2527,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot(8",{"_index":2528,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot(9",{"_index":2529,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot=non",{"_index":2435,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslot_list",{"_index":2481,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timeslotrang",{"_index":2442,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timestamp",{"_index":891,"title":{},"name":{},"text":{"3":{}},"component":{}}],["timet",{"_index":958,"title":{"12-3":{}},"name":{},"text":{"3":{},"6":{},"8":{},"10":{},"11":{},"12":{}},"component":{}}],["timetable(timeslot_list",{"_index":2572,"title":{},"name":{},"text":{"12":{}},"component":{}}],["timetableservic",{"_index":2241,"title":{},"name":{},"text":{"10":{}},"component":{}}],["timezon",{"_index":897,"title":{},"name":{},"text":{"3":{}},"component":{}}],["to_list",{"_index":35,"title":{"1-17":{}},"name":{},"text":{"1":{}},"component":{}}],["to_map",{"_index":37,"title":{"1-17":{}},"name":{},"text":{"1":{}},"component":{}}],["to_set",{"_index":36,"title":{"1-17":{}},"name":{},"text":{"1":{}},"component":{}}],["to_sorted_map",{"_index":504,"title":{},"name":{},"text":{"1":{}},"component":{}}],["to_sorted_set",{"_index":501,"title":{},"name":{},"text":{"1":{}},"component":{}}],["togeth",{"_index":295,"title":{},"name":{},"text":{"1":{},"2":{},"6":{},"7":{},"8":{},"10":{},"14":{}},"component":{}}],["told",{"_index":3096,"title":{},"name":{},"text":{"15":{}},"component":{}}],["tool",{"_index":2287,"title":{},"name":{},"text":{"11":{}},"component":{}}],["top",{"_index":808,"title":{},"name":{},"text":{"2":{},"11":{},"14":{}},"component":{}}],["topic",{"_index":1879,"title":{},"name":{},"text":{"10":{}},"component":{}}],["topic_conflict_list",{"_index":2094,"title":{},"name":{},"text":{"10":{}},"component":{}}],["topic_conflict_list.append(topicconflict(left_top",{"_index":2099,"title":{},"name":{},"text":{"10":{}},"component":{}}],["topicconflict",{"_index":2089,"title":{},"name":{},"text":{"10":{}},"component":{}}],["total",{"_index":495,"title":{"14-34":{}},"name":{},"text":{"1":{},"6":{},"10":{},"14":{}},"component":{}}],["total_scor",{"_index":3030,"title":{},"name":{},"text":{"14":{}},"component":{}}],["toy",{"_index":1086,"title":{},"name":{},"text":{"5":{}},"component":{}}],["trace",{"_index":1230,"title":{},"name":{},"text":{"6":{},"8":{},"10":{}},"component":{}}],["track",{"_index":3003,"title":{},"name":{},"text":{"14":{}},"component":{}}],["tracker",{"_index":2371,"title":{},"name":{},"text":{"11":{}},"component":{}}],["trade",{"_index":1787,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["trail",{"_index":2038,"title":{},"name":{},"text":{"10":{}},"component":{}}],["train",{"_index":1919,"title":{},"name":{},"text":{"10":{},"11":{},"13":{}},"component":{}}],["transform",{"_index":565,"title":{},"name":{},"text":{"1":{}},"component":{}}],["transit",{"_index":1408,"title":{},"name":{},"text":{"7":{}},"component":{}}],["translat",{"_index":2726,"title":{},"name":{},"text":{"13":{}},"component":{}}],["transport_tim",{"_index":3102,"title":{},"name":{},"text":{"15":{}},"component":{}}],["transporttimeandcapacityupdatingvariablelisten",{"_index":3098,"title":{},"name":{},"text":{"15":{}},"component":{}}],["trap",{"_index":2766,"title":{"14-30":{}},"name":{},"text":{"14":{}},"component":{}}],["travel",{"_index":1045,"title":{},"name":{},"text":{"3":{},"15":{}},"component":{}}],["treatment",{"_index":2374,"title":{},"name":{},"text":{"11":{}},"component":{}}],["tree",{"_index":1089,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"10":{}},"component":{}}],["trees/loop",{"_index":2034,"title":{},"name":{},"text":{"10":{}},"component":{}}],["trend",{"_index":784,"title":{},"name":{},"text":{"2":{},"14":{}},"component":{}}],["tri",{"_index":208,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"6":{},"8":{},"10":{},"14":{}},"component":{}}],["tri[shift",{"_index":188,"title":{},"name":{},"text":{"1":{}},"component":{}}],["trick",{"_index":2764,"title":{"14-22":{},"14-29":{}},"name":{},"text":{},"component":{}}],["triconstraintstream[a",{"_index":209,"title":{},"name":{},"text":{"1":{}},"component":{}}],["triconstraintstream[shift",{"_index":221,"title":{},"name":{},"text":{"1":{}},"component":{}}],["trigger",{"_index":1739,"title":{"15-5":{}},"name":{},"text":{"8":{},"14":{},"15":{}},"component":{}}],["trip",{"_index":1026,"title":{},"name":{},"text":{"3":{}},"component":{}}],["trivial",{"_index":2991,"title":{},"name":{},"text":{"14":{}},"component":{}}],["truck",{"_index":1009,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["true",{"_index":335,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["tsp",{"_index":1802,"title":{"10-24":{}},"name":{},"text":{"10":{}},"component":{}}],["tue",{"_index":2588,"title":{},"name":{},"text":{"12":{}},"component":{}}],["tuesday",{"_index":1475,"title":{},"name":{},"text":{"7":{},"12":{}},"component":{}}],["tune",{"_index":1332,"title":{},"name":{},"text":{"6":{}},"component":{}}],["tupl",{"_index":46,"title":{"1-21":{},"1-23":{}},"name":{},"text":{"1":{}},"component":{}}],["ture",{"_index":2535,"title":{},"name":{},"text":{"12":{}},"component":{}}],["turn",{"_index":1195,"title":{},"name":{},"text":{"6":{},"8":{},"10":{},"14":{}},"component":{}}],["tweak",{"_index":1333,"title":{"8-6":{}},"name":{},"text":{"6":{},"8":{},"14":{}},"component":{}}],["tweakabl",{"_index":1632,"title":{},"name":{},"text":{"8":{}},"component":{}}],["tweet",{"_index":2367,"title":{},"name":{},"text":{"11":{}},"component":{}}],["twice",{"_index":574,"title":{},"name":{},"text":{"1":{},"7":{},"10":{},"15":{}},"component":{}}],["twitter",{"_index":2362,"title":{},"name":{},"text":{"11":{}},"component":{}}],["two",{"_index":379,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["type",{"_index":313,"title":{"2-24":{},"6-8":{},"14-10":{},"14-16":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["typic",{"_index":1048,"title":{},"name":{},"text":{"3":{},"10":{},"13":{}},"component":{}}],["ui",{"_index":2261,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["unabl",{"_index":2773,"title":{},"name":{},"text":{"14":{}},"component":{}}],["unaccept",{"_index":1224,"title":{},"name":{},"text":{"6":{}},"component":{}}],["unassign",{"_index":1946,"title":{},"name":{},"text":{"10":{},"12":{},"13":{},"14":{}},"component":{}}],["unavail",{"_index":444,"title":{},"name":{},"text":{"1":{}},"component":{}}],["unawar",{"_index":1664,"title":{},"name":{},"text":{"8":{}},"component":{}}],["uncommon",{"_index":1015,"title":{},"name":{},"text":{"3":{}},"component":{}}],["uncorrupt",{"_index":2159,"title":{},"name":{},"text":{"10":{}},"component":{}}],["uncount",{"_index":1959,"title":{},"name":{},"text":{"10":{}},"component":{}}],["under",{"_index":2307,"title":{},"name":{},"text":{"11":{}},"component":{}}],["underneath",{"_index":2352,"title":{},"name":{},"text":{"11":{}},"component":{}}],["understand",{"_index":2700,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["undesir",{"_index":2658,"title":{},"name":{},"text":{"13":{}},"component":{}}],["undo",{"_index":1293,"title":{},"name":{},"text":{"6":{}},"component":{}}],["undomove’",{"_index":2162,"title":{},"name":{},"text":{"10":{}},"component":{}}],["undon",{"_index":2733,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["unexpect",{"_index":1058,"title":{},"name":{},"text":{"3":{}},"component":{}}],["unexpectedli",{"_index":265,"title":{},"name":{},"text":{"1":{}},"component":{}}],["unfair",{"_index":2988,"title":{},"name":{},"text":{"14":{}},"component":{}}],["unfold",{"_index":1439,"title":{},"name":{},"text":{"7":{}},"component":{}}],["unforeseen",{"_index":2608,"title":{},"name":{},"text":{"13":{}},"component":{}}],["unhappi",{"_index":2784,"title":{},"name":{},"text":{"14":{}},"component":{}}],["uni",{"_index":203,"title":{},"name":{},"text":{"1":{}},"component":{}}],["uni[shift",{"_index":184,"title":{},"name":{},"text":{"1":{}},"component":{}}],["uniconstraintstream",{"_index":180,"title":{},"name":{},"text":{"1":{}},"component":{}}],["uniconstraintstream[a",{"_index":204,"title":{},"name":{},"text":{"1":{}},"component":{}}],["uniconstraintstream[cloudcomput",{"_index":568,"title":{},"name":{},"text":{"1":{}},"component":{}}],["uniconstraintstream[cloudprocess",{"_index":566,"title":{},"name":{},"text":{"1":{}},"component":{}}],["uniconstraintstream[shift",{"_index":218,"title":{},"name":{},"text":{"1":{}},"component":{}}],["uniconstraintstream[tuple[shift",{"_index":224,"title":{},"name":{},"text":{"1":{}},"component":{}}],["unifi",{"_index":2751,"title":{},"name":{},"text":{"13":{}},"component":{}}],["uniform",{"_index":2197,"title":{},"name":{},"text":{"10":{}},"component":{}}],["unimprov",{"_index":1564,"title":{"8-11":{}},"name":{},"text":{},"component":{}}],["unimprovedstepcounttermin",{"_index":1572,"title":{"8-15":{}},"name":{},"text":{},"component":{}}],["uniniti",{"_index":732,"title":{"10-34":{}},"name":{},"text":{"2":{},"3":{},"8":{},"10":{},"12":{},"13":{},"14":{}},"component":{}}],["union",{"_index":1440,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["unionmoveselector",{"_index":1377,"title":{"7-19":{}},"name":{},"text":{"7":{}},"component":{}}],["uniqu",{"_index":296,"title":{},"name":{},"text":{"1":{},"8":{},"10":{},"12":{},"15":{}},"component":{}}],["unistream[employe",{"_index":197,"title":{},"name":{},"text":{"1":{}},"component":{}}],["unistream[shift",{"_index":181,"title":{},"name":{},"text":{"1":{}},"component":{}}],["unit",{"_index":905,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["univers",{"_index":1597,"title":{},"name":{},"text":{"8":{},"11":{}},"component":{}}],["unknown",{"_index":2612,"title":{},"name":{},"text":{"13":{}},"component":{}}],["unless",{"_index":508,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"8":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["unlik",{"_index":457,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"8":{},"10":{}},"component":{}}],["unload",{"_index":1012,"title":{},"name":{},"text":{"3":{}},"component":{}}],["unnatur",{"_index":2741,"title":{},"name":{},"text":{"13":{}},"component":{}}],["unnecessari",{"_index":1925,"title":{},"name":{},"text":{"10":{}},"component":{}}],["unplan",{"_index":2650,"title":{},"name":{},"text":{"13":{}},"component":{}}],["unpredict",{"_index":2607,"title":{},"name":{},"text":{"13":{}},"component":{}}],["unrel",{"_index":1876,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["unsolv",{"_index":2060,"title":{},"name":{},"text":{"10":{}},"component":{}}],["until",{"_index":716,"title":{"3-8":{}},"name":{},"text":{"2":{},"6":{},"8":{}},"component":{}}],["unus",{"_index":1094,"title":{},"name":{},"text":{"5":{}},"component":{}}],["unused_computer(constraint_factori",{"_index":556,"title":{},"name":{},"text":{"1":{}},"component":{}}],["unusu",{"_index":964,"title":{},"name":{},"text":{"3":{}},"component":{}}],["unwant",{"_index":262,"title":{},"name":{},"text":{"1":{},"8":{},"10":{}},"component":{}}],["up",{"_index":280,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"8":{},"10":{},"11":{},"13":{},"14":{}},"component":{}}],["upcom",{"_index":1052,"title":{},"name":{},"text":{"3":{},"13":{}},"component":{}}],["updat",{"_index":2699,"title":{},"name":{},"text":{"13":{},"14":{},"15":{}},"component":{}}],["update_vehicle(self",{"_index":3087,"title":{},"name":{},"text":{"15":{}},"component":{}}],["upon",{"_index":1272,"title":{},"name":{},"text":{"6":{}},"component":{}}],["upper",{"_index":1110,"title":{},"name":{},"text":{"5":{}},"component":{}}],["us",{"_index":53,"title":{"1-23":{},"6-33":{},"8-5":{},"10-35":{},"11-12":{},"14-33":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["usabl",{"_index":965,"title":{},"name":{},"text":{"3":{}},"component":{}}],["usag",{"_index":1046,"title":{},"name":{},"text":{"3":{},"14":{}},"component":{}}],["useless",{"_index":1088,"title":{},"name":{},"text":{"5":{},"8":{},"14":{}},"component":{}}],["user",{"_index":406,"title":{"10-49":{}},"name":{},"text":{"1":{},"3":{},"8":{},"10":{},"13":{},"14":{}},"component":{}}],["user_input",{"_index":1871,"title":{},"name":{},"text":{"10":{}},"component":{}}],["user_nam",{"_index":1765,"title":{},"name":{},"text":{"8":{}},"component":{}}],["user_request",{"_index":1870,"title":{},"name":{},"text":{"10":{}},"component":{}}],["user’",{"_index":2813,"title":{},"name":{},"text":{"14":{}},"component":{}}],["usual",{"_index":676,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["util",{"_index":526,"title":{},"name":{},"text":{"1":{},"8":{},"9":{}},"component":{}}],["uuid",{"_index":1768,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["uuid.uuid4",{"_index":2226,"title":{},"name":{},"text":{"10":{}},"component":{}}],["vacat",{"_index":1041,"title":{},"name":{},"text":{"3":{}},"component":{}}],["valid",{"_index":303,"title":{},"name":{},"text":{"1":{},"10":{},"14":{}},"component":{}}],["valu",{"_index":290,"title":{"2-25":{},"7-4":{},"7-33":{},"8-6":{},"10-15":{},"10-16":{},"10-22":{},"13-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["value(",{"_index":1452,"title":{},"name":{},"text":{"7":{}},"component":{}}],["value_rang",{"_index":2020,"title":{},"name":{},"text":{"10":{}},"component":{}}],["value_range_provid",{"_index":1952,"title":{},"name":{},"text":{"10":{},"12":{},"14":{}},"component":{}}],["value_range_provider(\"roomrang",{"_index":2492,"title":{},"name":{},"text":{"12":{}},"component":{}}],["value_range_provider(\"timeslotrang",{"_index":2489,"title":{},"name":{},"text":{"12":{}},"component":{}}],["value_range_provider('roomrang",{"_index":2505,"title":{},"name":{},"text":{"12":{}},"component":{}}],["value_range_provider(id",{"_index":2014,"title":{},"name":{},"text":{"10":{}},"component":{}}],["value_range_provider(range_id",{"_index":1966,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["value_range_provider_ref",{"_index":1935,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["value_range_provider_refs=['domicile_rang",{"_index":2051,"title":{},"name":{},"text":{"10":{}},"component":{}}],["value_range_typ",{"_index":1982,"title":{},"name":{},"text":{"10":{}},"component":{}}],["valueerror(f\"a",{"_index":2708,"title":{},"name":{},"text":{"13":{}},"component":{}}],["valuerang",{"_index":1965,"title":{},"name":{},"text":{"10":{}},"component":{}}],["valuerangefactori",{"_index":1798,"title":{"10-20":{}},"name":{},"text":{"10":{}},"component":{}}],["valuerangefactory.createintvaluerange(0",{"_index":1984,"title":{},"name":{},"text":{"10":{}},"component":{}}],["valuerangeprovid",{"_index":1797,"title":{"10-18":{},"10-19":{},"10-21":{}},"name":{},"text":{"10":{},"14":{}},"component":{}}],["valueselector",{"_index":1174,"title":{"6-33":{},"7-22":{}},"name":{},"text":{"6":{},"7":{}},"component":{}}],["valuesortermann",{"_index":725,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{}}],["variabl",{"_index":92,"title":{"15":{},"2-39":{},"6-30":{},"7-14":{},"10-11":{},"10-12":{},"10-13":{},"10-14":{},"10-23":{},"10-24":{},"13-4":{},"15-2":{},"15-3":{}},"name":{"15":{}},"text":{"1":{},"2":{},"3":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"15":{}},"component":{}}],["variable(",{"_index":743,"title":{},"name":{},"text":{"2":{},"7":{},"15":{}},"component":{}}],["variable_listen",{"_index":3083,"title":{},"name":{},"text":{"15":{}},"component":{}}],["variable_listener_class",{"_index":3097,"title":{},"name":{},"text":{"15":{}},"component":{}}],["variable_nam",{"_index":2881,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["variable_neighborhood_desc",{"_index":1357,"title":{},"name":{},"text":{"6":{}},"component":{}}],["variable_typ",{"_index":1934,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["variablelisten",{"_index":3045,"title":{"15-4":{},"15-5":{}},"name":{},"text":{"15":{}},"component":{}}],["variablelistener'",{"_index":3111,"title":{},"name":{},"text":{"15":{}},"component":{}}],["variablenam",{"_index":1520,"title":{},"name":{},"text":{"7":{}},"component":{}}],["variablenameinclud",{"_index":1451,"title":{},"name":{},"text":{"7":{}},"component":{}}],["variable’",{"_index":3079,"title":{},"name":{},"text":{"15":{}},"component":{}}],["varianc",{"_index":2989,"title":{},"name":{},"text":{"14":{}},"component":{}}],["variant",{"_index":482,"title":{},"name":{},"text":{"1":{},"4":{},"5":{},"6":{},"9":{},"11":{}},"component":{}}],["variat",{"_index":1613,"title":{},"name":{},"text":{"8":{}},"component":{}}],["variou",{"_index":413,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["vehicl",{"_index":887,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["vehicleupdatingvariablelisten",{"_index":3075,"title":{},"name":{},"text":{"15":{}},"component":{}}],["venv",{"_index":2408,"title":{},"name":{},"text":{"12":{}},"component":{}}],["venv/bin/activ",{"_index":2394,"title":{},"name":{},"text":{"11":{}},"component":{}}],["verbal",{"_index":2774,"title":{},"name":{},"text":{"14":{}},"component":{}}],["verbos",{"_index":718,"title":{},"name":{},"text":{"2":{},"13":{}},"component":{}}],["veri",{"_index":695,"title":{},"name":{},"text":{"2":{},"6":{},"7":{},"8":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["verifi",{"_index":2323,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["versa",{"_index":2806,"title":{},"name":{},"text":{"14":{}},"component":{}}],["versatil",{"_index":714,"title":{},"name":{},"text":{"2":{}},"component":{}}],["version",{"_index":278,"title":{},"name":{},"text":{"1":{},"4":{},"7":{},"8":{},"9":{},"10":{}},"component":{}}],["viabl",{"_index":1541,"title":{},"name":{},"text":{"7":{}},"component":{}}],["vice",{"_index":2805,"title":{},"name":{},"text":{"14":{}},"component":{}}],["violat",{"_index":3046,"title":{},"name":{},"text":{"15":{}},"component":{}}],["virtual",{"_index":2351,"title":{"13-5":{}},"name":{},"text":{"11":{},"12":{},"13":{}},"component":{}}],["visibl",{"_index":2957,"title":{},"name":{},"text":{"14":{}},"component":{}}],["visit",{"_index":1117,"title":{},"name":{},"text":{"5":{},"7":{},"10":{},"15":{}},"component":{}}],["visit(standstil",{"_index":2049,"title":{},"name":{},"text":{"10":{}},"component":{}}],["visit_list",{"_index":2059,"title":{},"name":{},"text":{"10":{}},"component":{}}],["visit_rang",{"_index":2052,"title":{},"name":{},"text":{"10":{}},"component":{}}],["visual",{"_index":916,"title":{"14-35":{}},"name":{},"text":{"3":{},"14":{}},"component":{}}],["vnd",{"_index":1354,"title":{},"name":{},"text":{"6":{}},"component":{}}],["volatil",{"_index":2649,"title":{},"name":{},"text":{"13":{}},"component":{}}],["vrp",{"_index":1803,"title":{"10-24":{}},"name":{},"text":{},"component":{}}],["w",{"_index":1477,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["wade",{"_index":2152,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["wait",{"_index":2231,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["walk",{"_index":2400,"title":{},"name":{},"text":{"12":{}},"component":{}}],["wall",{"_index":1093,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["want",{"_index":1418,"title":{},"name":{},"text":{"7":{},"10":{},"13":{},"14":{}},"component":{}}],["warehous",{"_index":2292,"title":{},"name":{},"text":{"11":{}},"component":{}}],["warm",{"_index":2730,"title":{},"name":{},"text":{"13":{}},"component":{}}],["warn",{"_index":2178,"title":{},"name":{},"text":{"10":{}},"component":{}}],["wasn’t",{"_index":1071,"title":{},"name":{},"text":{"4":{}},"component":{}}],["wast",{"_index":1551,"title":{},"name":{},"text":{"7":{},"10":{},"11":{}},"component":{}}],["watch",{"_index":2956,"title":{},"name":{},"text":{"14":{}},"component":{}}],["water",{"_index":1322,"title":{},"name":{},"text":{"6":{}},"component":{}}],["way",{"_index":360,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"7":{},"8":{},"9":{},"10":{},"13":{},"14":{}},"component":{}}],["weaker",{"_index":703,"title":{},"name":{},"text":{"2":{}},"component":{}}],["weakest",{"_index":622,"title":{"2-8":{},"2-11":{}},"name":{},"text":{"2":{},"8":{}},"component":{}}],["weakest_fit",{"_index":708,"title":{},"name":{},"text":{"2":{}},"component":{}}],["weakest_fit_decreas",{"_index":710,"title":{},"name":{},"text":{"2":{}},"component":{}}],["web",{"_index":3017,"title":{},"name":{},"text":{"14":{}},"component":{}}],["websit",{"_index":2359,"title":{},"name":{},"text":{"11":{}},"component":{}}],["wednesday",{"_index":1476,"title":{},"name":{},"text":{"7":{}},"component":{}}],["week",{"_index":946,"title":{},"name":{},"text":{"3":{},"10":{},"13":{}},"component":{}}],["week(",{"_index":1054,"title":{},"name":{},"text":{"3":{}},"component":{}}],["weekend",{"_index":2637,"title":{},"name":{},"text":{"13":{}},"component":{}}],["weekli",{"_index":2623,"title":{},"name":{},"text":{"13":{}},"component":{}}],["weigher",{"_index":307,"title":{},"name":{},"text":{"1":{}},"component":{}}],["weight",{"_index":298,"title":{"14-5":{}},"name":{},"text":{"1":{},"7":{},"12":{},"13":{},"14":{}},"component":{}}],["welcom",{"_index":2370,"title":{},"name":{},"text":{"11":{}},"component":{}}],["well",{"_index":554,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"7":{},"10":{},"14":{}},"component":{}}],["well1024a",{"_index":2206,"title":{},"name":{},"text":{"10":{}},"component":{}}],["well19937a",{"_index":2207,"title":{},"name":{},"text":{"10":{}},"component":{}}],["well19937c",{"_index":2208,"title":{},"name":{},"text":{"10":{}},"component":{}}],["well44497a",{"_index":2209,"title":{},"name":{},"text":{"10":{}},"component":{}}],["well44497b",{"_index":2210,"title":{},"name":{},"text":{"10":{}},"component":{}}],["well512a",{"_index":2205,"title":{},"name":{},"text":{"10":{}},"component":{}}],["whenev",{"_index":1994,"title":{},"name":{},"text":{"10":{}},"component":{}}],["whether",{"_index":1238,"title":{},"name":{},"text":{"6":{},"11":{}},"component":{}}],["whichev",{"_index":2107,"title":{},"name":{},"text":{"10":{}},"component":{}}],["whose",{"_index":421,"title":{},"name":{},"text":{"1":{},"15":{}},"component":{}}],["wildcard",{"_index":1693,"title":{},"name":{},"text":{"8":{}},"component":{}}],["win",{"_index":734,"title":{},"name":{},"text":{"2":{},"5":{},"6":{},"7":{},"14":{}},"component":{}}],["window",{"_index":908,"title":{"13-6":{}},"name":{},"text":{"3":{},"10":{},"13":{},"15":{}},"component":{}}],["wise",{"_index":1136,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["withconstraintproviderclass(define_constraint",{"_index":2577,"title":{},"name":{},"text":{"12":{}},"component":{}}],["withentityclasses(lesson",{"_index":2575,"title":{},"name":{},"text":{"12":{}},"component":{}}],["within",{"_index":297,"title":{},"name":{},"text":{"1":{},"3":{},"7":{},"13":{}},"component":{}}],["withminutesspentlimit(solve_time_in_minut",{"_index":1863,"title":{},"name":{},"text":{"10":{}},"component":{}}],["without",{"_index":559,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"8":{},"9":{},"10":{},"13":{},"14":{}},"component":{}}],["withsolutionclass(timet",{"_index":2576,"title":{},"name":{},"text":{"12":{}},"component":{}}],["withterminationconfig(termination_config",{"_index":1864,"title":{},"name":{},"text":{"10":{}},"component":{}}],["withterminationspentlimit(duration.ofseconds(30",{"_index":2578,"title":{},"name":{},"text":{"12":{}},"component":{}}],["won’t",{"_index":1781,"title":{},"name":{},"text":{"8":{},"11":{},"13":{},"15":{}},"component":{}}],["work",{"_index":536,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{}},"component":{}}],["worker",{"_index":1947,"title":{},"name":{},"text":{"10":{}},"component":{}}],["workforc",{"_index":1944,"title":{},"name":{},"text":{"10":{},"11":{}},"component":{}}],["working_comput",{"_index":2706,"title":{},"name":{},"text":{"13":{}},"component":{}}],["working_computer_list",{"_index":2719,"title":{},"name":{},"text":{"13":{}},"component":{}}],["working_computer_list.remove(self.deleted_comput",{"_index":2720,"title":{},"name":{},"text":{"13":{}},"component":{}}],["working_process",{"_index":2712,"title":{},"name":{},"text":{"13":{}},"component":{}}],["working_process.set_computer(non",{"_index":2713,"title":{},"name":{},"text":{"13":{}},"component":{}}],["working_solut",{"_index":2696,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["working_solution.n",{"_index":2891,"title":{},"name":{},"text":{"14":{}},"component":{}}],["working_solution.queen_list",{"_index":2899,"title":{},"name":{},"text":{"14":{}},"component":{}}],["workload",{"_index":2981,"title":{},"name":{},"text":{"14":{}},"component":{}}],["world",{"_index":1095,"title":{"8-1":{}},"name":{},"text":{"5":{},"6":{},"8":{},"11":{}},"component":{}}],["wors",{"_index":283,"title":{},"name":{},"text":{"1":{},"2":{}},"component":{}}],["worth",{"_index":788,"title":{},"name":{},"text":{"2":{},"3":{},"13":{}},"component":{}}],["worthi",{"_index":1548,"title":{},"name":{},"text":{"7":{}},"component":{}}],["worthless",{"_index":1102,"title":{},"name":{},"text":{"5":{},"11":{}},"component":{}}],["worthwhil",{"_index":1902,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["wrap",{"_index":1068,"title":{},"name":{},"text":{"4":{},"10":{},"12":{}},"component":{}}],["wrapper",{"_index":2275,"title":{},"name":{},"text":{"11":{}},"component":{}}],["write",{"_index":66,"title":{},"name":{},"text":{"1":{},"10":{},"13":{},"14":{},"15":{}},"component":{}}],["written",{"_index":1069,"title":{},"name":{},"text":{"4":{},"11":{}},"component":{}}],["wrong",{"_index":2616,"title":{},"name":{},"text":{"13":{},"14":{}},"component":{}}],["x",{"_index":1456,"title":{},"name":{},"text":{"7":{},"10":{},"14":{}},"component":{}}],["xml",{"_index":1791,"title":{"10-3":{}},"name":{},"text":{"10":{}},"component":{}}],["xref:rep",{"_index":1882,"title":{},"name":{},"text":{"10":{}},"component":{}}],["y",{"_index":1455,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ye",{"_index":1642,"title":{},"name":{},"text":{"8":{}},"component":{}}],["year",{"_index":1608,"title":{},"name":{},"text":{"8":{},"13":{},"14":{}},"component":{}}],["yellow",{"_index":1454,"title":{},"name":{},"text":{"7":{}},"component":{}}],["yield",{"_index":1545,"title":{},"name":{},"text":{"7":{},"14":{}},"component":{}}],["yourself",{"_index":1881,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["you’ll",{"_index":2375,"title":{},"name":{},"text":{"11":{}},"component":{}}],["you’r",{"_index":71,"title":{},"name":{},"text":{"1":{},"6":{},"8":{},"11":{},"13":{}},"component":{}}],["yuri",{"_index":1317,"title":{},"name":{},"text":{"6":{}},"component":{}}],["zero",{"_index":2006,"title":{},"name":{},"text":{"10":{},"14":{}},"component":{}}],["zipbal",{"_index":2385,"title":{},"name":{},"text":{"11":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"Constraint streams are a Functional Programming form of incremental score calculation in plain Python that is easy to read, write and debug. The API should feel familiar if you’re familiar with SQL. Using Python’s iterable operations, we could implement an easy score calculator that uses a functional approach: def do_not_assign_ann(schedule): soft_score = 0 for shift in schedule.shift_list: if shift.employee == 'Ann': soft_score -= 1 return soft_score However, that scales poorly because it doesn’t do an incremental calculation: When the planning variable of a single Shift changes, to recalculate the score, the function has to execute the entire stream from scratch. The ConstraintStreams API enables you to write similar code in pure Python, while reaping the performance benefits of incremental score calculation and having built-in constraint justifications. This is an example of the same code, using the Constraint Streams API: from optapy.score import HardSoftScore from optapy.constraint import ConstraintFactory def do_not_assign_ann(factory : ConstraintFactory): return factory.for_each(Shift) \\ .filter(lambda shift: shift.employee == 'Ann') \\ .penalize(\"Don't assign Ann\", HardSoftScore.ONE_SOFT) This constraint stream iterates over all instances of class Shift in the problem facts and planning entities in the planning problem. It finds every Shift which is assigned to employee \"Ann\" and for every such instance (also called a match), it adds a soft penalty of 1 to the overall score. The following figure illustrates this process on a problem with 4 different shifts: If any of the instances change during solving, the constraint stream automatically detects the change and only recalculates the minimum necessary portion of the problem that is affected by the change. The following figure illustrates this incremental score calculation: If constraint matches are enabled such as when explaining the score, it also generate constraint matches for each tuple penalized or rewarded in the stream: To use the ConstraintStreams API in your project, first write a pure Python function that take a ConstraintFactory as its only argument and return a list of Constraint generated from that ConstraintFactory similar to the following example, and decorate it with `@constraint_provider. from optapy import constraint_provider from optapy.score import HardSoftScore from optapy.constraint import ConstraintFactory @constraint_provider def define_constraints(factory : ConstraintFactory): return [ penalize_every_shift(factory) ] def penalize_every_shift(factory : ConstraintFactory): return factory.for_each(Shift) \\ .penalize(\"Penalize a shift\", HardSoftScore.ONE_SOFT) This example contains one constraint, penalize_every_shift(…​). However, you can include as many as you require. Add the following code to your solver configuration: define_constraints ... Constraint stream cardinality is a measure of how many objects a single constraint match consists of. The simplest constraint stream has a cardinality of 1, meaning each constraint match only consists of 1 object. Therefore, it is called a UniConstraintStream: def do_not_assign_ann(factory : ConstraintFactory): return factory.for_each(Shift) \\ # // Returns UniStream[Shift] ... Some constraint stream building blocks can increase stream cardinality, such as join or group_by: def do_not_assign_ann(factory: ConstraintFactory): return (factory.for_each(Shift) # Returns Uni[Shift]. .join(Employee) # Returns Bi[Shift, Employee]. .join(DayOff) # Returns Tri[Shift, Employee, DayOff]. .join(Country) # Returns Quad[Shift, Employee, DayOff, Country]. ) ... The latter can also decrease stream cardinality: def do_not_assign_ann(factory: ConstraintFactory): return (factory.for_each(Shift) # Returns UniStream[Shift]. .join(Employee) # Returns BiStream[Shift, Employee]. .group_by(lambda shift, employee: employee) # Returns UniStream[Employee]. ) ... The following constraint stream cardinalities are currently supported: Cardinality Prefix Defining interface 1 Uni UniConstraintStream[A] 2 Bi BiConstraintStream[A, B] 3 Tri TriConstraintStream[A, B, C] 4 Quad QuadConstraintStream[A, B, C, D] OptaPy currently does not support constraint stream cardinalities higher than 4. However, with tuple mapping effectively infinite cardinality is possible: def penta_stream_example(factory: ConstraintFactory): return (factory.for_each(Shift) # UniConstraintStream[Shift] .join(Shift) # BiConstraintStream[Shift, Shift] .join(Shift) # TriConstraintStream[Shift, Shift, Shift] .join(Shift) # QuadConstraintStream[Shift, Shift, Shift, Shift] .map(tuple) # UniConstraintStream[Tuple[Shift, Shift, Shift, Shift]] .join(Shift) # BiConstraintStream[Tuple[Shift, Shift, Shift, Shift], Shift] # This BiConstraintStream carries 5 Shift elements. ) ... OptaPy does not provide any Tuple implementations out of the box. It’s recommended to use Python’s tuple operator to create the tuple. Should a custom implementation be necessary, see guidelines for mapping functions. Constraint streams are chains of different operations, called building blocks. Each constraint stream starts with a for_each(…​) building block and is terminated by either a penalty or a reward. The following example shows the simplest possible constraint stream: def penalize_initialized_shifts(factory: ConstraintFactory): return factory.for_each(Shift) \\ .penalize(\"Initialized shift\", HardSoftScore.ONE_SOFT) This constraint stream penalizes each known and initialized instance of Shift. The .for_each(T) building block selects every T instance that is in a problem fact collection or a planning entity collection and has no None genuine planning variables. To include instances with a None genuine planning variable, replace the for_each() building block by for_each_including_null_vars(): def penalize_all_shifts(factory: ConstraintFactory): return factory.for_each_including_null_vars(Shift) \\ .penalize(\"A shift\", HardSoftScore.ONE_SOFT) The for_each() building block has a legacy counterpart, from_(). This alternative approach included instances based on the initialization status of their genuine planning variables. As an unwanted consequence, from_() behaves unexpectedly for nullable variables. These are considered initialized even when None, and therefore this legacy method could still return entities with None variables. from_(), from_unfiltered() and from_unique_pair() are now deprecated and will be removed in a future major version of OptaPy. The purpose of constraint streams is to build up a score for a solution. To do this, every constraint stream must be terminated by a call to either a penalize() or a reward() building block. The penalize() building block makes the score worse and the reward() building block improves the score. Penalties and rewards have several components: Constraint package is the python module that contains the constraint. The default value is the module that contains the @constraint_provider implementation. Constraint name is the human readable descriptive name for the constraint, which (together with the constraint package) must be unique within the entire @constraint_provider implementation. Constraint weight is a constant score value indicating how much every breach of the constraint affects the score. Valid examples include SimpleScore.ONE, HardSoftScore.ONE_HARD and HardMediumSoftScore.of(1, 2, 3). Constraint match weigher is an optional function indicating how many times the constraint weight should be applied in the score. The penalty or reward score impact is the constraint weight multiplied by the match weight. The default value is 1. The ConstraintStreams API supports many different types of penalties. Browse the API in your IDE for the full list of method overloads. Here are some examples: Simple penalty (penalize(\"Constraint name\", SimpleScore.ONE)) makes the score worse by 1 per every match in the constraint stream. The score type must be the same type as used on the @planning_score decorated member on the planning solution. Dynamic penalty (penalize(\"Constraint name\", SimpleScore.ONE, lambda shift: shift.hours)) makes the score worse by the number of hours in every matching Shift in the constraint stream. This is an example of using a constraint match weigher. By replacing the keyword penalize by reward in the name of these building blocks, you get operations that affect score in the opposite direction. Filtering enables you to reduce the number of constraint matches in your stream. It first enumerates all constraint matches and then applies a predicate to filter some matches out. The predicate is a function that only returns True if the match is to continue in the stream. The following constraint stream removes all of Beth’s shifts from all Shift matches: def penalize_ann_shifts(factory: ConstraintFactory): return factory.for_each(Shift) \\ .filter(lambda shift: shift.employee.name == \"Ann\") \\ .penalize(\"Ann's shift\", SimpleScore.ONE) The following example retrieves a list of shifts where an employee has asked for a day off from a bi-constraint match of Shift and DayOff: def penalize_shifts_on_off_days(factory: ConstraintFactory): return factory.for_each(Shift) \\ .join(DayOff) \\ .filter(lambda shift, day_off: shift.date == day_off.date and shift.employee == day_off.employee) \\ .penalize(\"Shift on an off-day\", SimpleScore.ONE) The following figure illustrates both these examples: For performance reasons, using the join building block with the appropriate Joiner is preferrable when possible. Using a Joiner creates only the constraint matches that are necessary, while filtered join creates all possible constraint matches and only then filters some of them out. The following functions are required for filtering constraint streams of different cardinality: Cardinality Filtering Predicate 1 Callable[[A], bool] 2 Callable[[A,B], bool] 3 Callable[[A,B,C], bool] 4 Callable[[A,B,C,D], bool] Joining is a way to increase stream cardinality and it is similar to the inner join operation in SQL. As the following figure illustrates, a join() creates a cartesian product of the streams being joined: Doing this is inefficient if the resulting stream contains a lot of constraint matches that need to be filtered out immediately. Instead, use a Joiner condition to restrict the joined matches only to those that are interesting: For example: from optapy.constraint import Joiners def shift_on_day_off(constraint_factory: ConstraintFactory): return constraint_factory.for_each(Shift) \\ .join(DayOff, Joiners.equal(lambda shift: shift.date, lambda day_off: day_off.date), Joiners.equal(lambda shift: shift.employee, lambda day_off: day_off.employee)) \\ .penalize(\"Shift on an off-day\", HardSoftScore.ONE_HARD) Through the Joiners class, the following Joiner conditions are supported to join two streams, pairing a match from each side: equal(): the paired matches have a property that are equals to one another. This relies on __hash__(self) and __eq__(self, other). greaterThan(), greaterThanOrEqual(), lessThan() and lessThanOrEqual(): the paired matches have a Comparable property following the prescribed ordering. overlapping(): the paired matches have two properties (a start and an end property) of the same Comparable type that both represent an interval which overlap. All Joiners methods have an overloaded method to use the same property of the same class on both stream sides. For example, calling Joiners.equal(lambda shift: shift.employee) is the same as calling Joiners.equal(lambda shift: shift.employee, lambda shift: shift.employee). If the other stream might match multiple times, but it must only impact the score once (for each element of the original stream), use ifExists instead. It does not create cartesian products and therefore generally performs better. Grouping collects items in a stream according to user-provider criteria (also called \"group key\"), similar to what a GROUP BY SQL clause does. Additionally, some grouping operations also accept one or more Collector instances, which provide various aggregation functions. The following figure illustrates a simple group_by() operation: For example, the following code snippet first groups all processes by the computer they run on, sums up all the power required by the processes on that computer using the ConstraintCollectors.sum(…​) collector, and finally penalizes every computer whose processes consume more power than is available. from optapy.constraint import ConstraintCollectors def required_cpu_power_total(constraint_factory: ConstraintFactory): return constraint_factory.for_each(CloudProcess) \\ .group_by(lambda process: process.computer, ConstraintCollectors.sum(lambda process: process.required_cpu_power)) \\ .filter(lambda computer, required_cpu_power: required_cpu_power > computer.cpu_power) \\ .penalize(\"required_cpu_power_total\", HardSoftScore.ONE_HARD, lambda computer, required_cpu_power: required_cpu_power - computer.cpu_power) Information might be lost during grouping. In the previous example, filter() and all subsequent operations no longer have direct access to the original CloudProcess instance. There are several collectors available out of the box. The following collectors are provided out of the box: count() count_distinct() sum() average() min() and max() to_list(), to_set() and to_map() The ConstraintCollectors.count(…​) counts all elements per group. For example, the following use of the collector gives a number of items for two separate groups - one where the talks have unavailable speakers, and one where they don’t. def speaker_availability(factory: ConstraintFactory): return factory.for_each(Talk) \\ .group_by(lambda talk: talk.has_any_unavailable_speaker(), ConstraintCollectors.count()) \\ .penalize(\"Speaker Availability\", HardSoftScore.ONE_HARD, lambda has_unavailable_speaker, count: ...) The count is collected in an int. To count a bi, tri or quad stream, use countBi(), countTri() or countQuad() respectively, because - unlike the other built-in collectors - they aren’t overloaded methods due to Java’s generics erasure. The ConstraintCollectors.count_distinct(…​) counts any element per group once, regardless of how many times it occurs. For example, the following use of the collector gives a number of talks in each unique room. def room_count(factory: ConstraintFactory): return factory.for_each(Talk) \\ .group_by(lambda talk: talk.room, ConstraintCollectors.count_distinct()) \\ .penalize(\"room_count\", HardSoftScore.ONE_SOFT, lambda room, count: ...) The distinct count is collected in an int. To sum the values of a particular property of all elements per group, use the ConstraintCollectors.sum(…​) collector. The following code snippet first groups all processes by the computer they run on and sums up all the power required by the processes on that computer using the ConstraintCollectors.sum(…​) collector. def required_cpu_power_total(constraint_factory: ConstraintFactory): return constraint_factory.for_each(CloudProcess) \\ .group_by(lambda process: process.computer, ConstraintCollectors.sum(lambda process: process.required_cpu_power)) \\ .penalize(\"required_cpu_power_total\", HardSoftScore.ONE_SOFT, lambda computer, required_cpu_power: required_cpu_power) The sum is collected in an int. To calculate the average of a particular property of all elements per group, use the ConstraintCollectors.average(…​) collector. The following code snippet first groups all processes by the computer they run on and averages all the power required by the processes on that computer using the ConstraintCollectors.average(…​) collector. def average_cpu_power(constraint_factory: ConstraintFactory): return constraint_factory.for_each(CloudProcess) \\ .group_by(lambda process: process.computer, ConstraintCollectors.average(lambda process: process.required_cpu_power)) \\ .penalize(\"average_cpu_power\", HardSoftScore.ONE_SOFT, lambda computer, average_cpu_power: average_cpu_power) The average is collected as a float, and the average of no elements is None. To extract the minimum or maximum per group, use the ConstraintCollectors.min(…​) and ConstraintCollectors.max(…​) collectors respectively. These collectors operate on values of properties which are Comparable (such as int, str or float), although there are also variants of these collectors which allow you to provide your own Comparator. The following example finds a computer which runs the most power-demanding process: def computer_with_biggest_process(constraint_factory: ConstraintFactory): return constraint_factory.for_each(CloudProcess) \\ .group_by(lambda process: process.computer, ConstraintCollectors.max(lambda process: process.required_cpu_power)) \\ .penalize(\"computer_with_biggest_process\", HardSoftScore.ONE_HARD, lambda computer, biggest_process: ...) Comparator functions used with min(…​) and max(…​) constraint collectors are expected to be consistent with __eq__(self). Additionally, it is expected the comparison magic methods (__lt__(self, other), __gt__(self, other), etc.) form a total order. To extract all elements per group into a collection, use the ConstraintCollectors.to_list(…​). The following example retrieves all processes running on a computer in a list: def computer_and_its_processes(constraint_factory: ConstraintFactory): return constraint_factory.for_each(CloudProcess) \\ .group_by(lambda process: process.computer, ConstraintCollectors.to_list()) \\ .penalize(\"computer_and_its_processes\", HardSoftScore.ONE_HARD, lambda computer, process_list: ...) Variants of this collector: to_list() collects a list value. to_set() collects a set value. to_sorted_set() collects a SortedSet value. to_map() collects a dict value. to_sorted_map() collects a SortedMap value. The iteration order of elements in the resulting collection is not guaranteed to be stable, unless it is a sorted collector such as to_sorted_set or to_sorted_map. The constraint collector framework enables you to create constraint collectors which will only collect in certain circumstances. This is achieved using the ConstraintCollectors.conditionally(…​) constraint collector. This collector accepts a predicate, and another collector to which it will delegate if the predicate is true. The following example returns a count of long-running processes assigned to a given computer, excluding processes which are not long-running: def computer_with_long_running_processes(constraint_factory: ConstraintFactory): return constraint_factory.for_each(CloudProcess) \\ .group_by(lambda process: process.computer, ConstraintCollectors.conditionally( lambda process: process.is_long_running(), ConstraintCollectors.count() ) ) \\ .penalize(\"long_running_processes\", HardSoftScore.ONE_HARD, lambda computer, long_running_process_count: ...) This is useful in situations where multiple collectors are used and only some of them need to be restricted. If all of them needed to be restricted in the same way, then applying a filter() before the grouping is preferable. The constraint collector framework enables you to create complex collectors utilizing simpler ones. This is achieved using the ConstraintCollectors.compose(…​) constraint collector. This collector accepts 2 to 4 other constraint collectors, and a function to merge their results into one. The following example builds an average() constraint collector using the count constraint collector and sum() constraint collector: def average(group_value_mapping: Callable[[A], int]): return ConstraintCollectors.compose( ConstraintCollectors.count(), ConstraintCollectors.sum(group_value_mapping), calculate_average) def calculate_average(count: int, group_sum: int): if count == 0: return None else: return group_sum / count Similarly, the compose() collector enables you to work around the limitation of Constraint Stream cardinality and use as many as 4 collectors in your group_by() statements: collector = ConstraintCollectors.compose( ConstraintCollectors.count(), ConstraintCollectors.min(), ConstraintCollectors.max(), tuple) Such a composite collector returns a tuple instance which allows you to access each of the sub collectors individually. Conditional propagation enables you to exclude constraint matches from the constraint stream based on the presence or absence of some other object. The following example penalizes computers which have at least one process running: def running_computer(constraint_factory: ConstraintFactory): return constraint_factory.for_each(CloudComputer) \\ .if_exists(CloudProcess, Joiners.equal(lambda computer: computer, lambda process: process.computer)) \\ .penalize(\"running_computer\", HardSoftScore.ONE_SOFT, lambda computer: ...) Note the use of the if_exists() building block. On UniConstraintStream, the if_exists_other() building block is also available which is useful in situations where the for_each() constraint match type is the same as the if_exists() type. Conversely, if the if_not_exists() building block is used (as well as the if_not_exists_other() building block on UniConstraintStream) you can achieve the opposite effect: def unused_computer(constraint_factory: ConstraintFactory): return constraint_factory.for_each(CloudComputer) \\ .if_not_exists(CloudProcess, Joiners.equal(lambda computer: computer, lambda process: process.computer)) \\ .penalize(\"unused_computer\", HardSoftScore.ONE_HARD, lambda computer: ...) Here, only the computers without processes running are penalized. Also note the use of the Joiner class to limit the constraint matches. For a description of available joiners, see joining. Conditional propagation operates much like joining, with the exception of not increasing the stream cardinality. Matches from these building blocks are not available further down the stream. For performance reasons, using conditional propagation with the appropriate Joiner instance is preferable to joining. While using join() creates a cartesian product of the facts being joined, with conditional propagation, the resulting stream only has at most the original number of constraint matches in it. Joining should only be used in cases where the other fact is actually required for another operation further down the stream. Mapping enables you to transform each tuple in a constraint stream by applying a mapping function to it. The result of such mapping is UniConstraintStream of the mapped tuples. def computer_with_biggest_process(constraint_factory: ConstraintFactory): return ( constraint_factory.for_each(CloudProcess) # UniConstraintStream[CloudProcess] .map(lambda process: process.computer) # UniConstraintStream[CloudComputer] ) ... In the example above, the mapping function produces duplicate tuples if two different CloudProcesses share a single CloudComputer. That is, such CloudComputer appears in the resulting constraint stream twice. See distinct() for how to deal with duplicate tuples. When designing the mapping function, follow these guidelines for optimal performance: Keep the function pure. The mapping function should only depend on its input. That is, given the same input, it always returns the same output. Keep the function bijective. No two input tuples should map to the same output tuple, or to tuples that are equal. Not following this recommendation creates a constraint stream with duplicate tuples, and may force you to use distinct() later. Use immutable data carriers. The tuples returned by the mapping function should be immutable and identified by their contents and nothing else. If two tuples carry objects which equal one another, those two tuples should likewise equal and preferably be the same instance. As a general rule, tuples in constraint streams are distinct. That is, no two tuples that equal one another. However, certain operations such as tuple mapping may produce constraint streams where that is not true. If a constraint stream produces duplicate tuples, you can use the distinct() building block to have the duplicate copies eliminated. def computer_with_biggest_process(constraint_factory: ConstraintFactory) { return ( constraint_factory.for_each(CloudProcess) # UniConstraintStream[CloudProcess] .map(lambda process: process.computer) # UniConstraintStream[CloudComputer] .distinct() # The same, each CloudComputer just once. ) ... There is a performance cost to distinct(). For optimal performance, don’t use constraint stream operations that produce duplicate tuples, to avoid the need to call distinct(). Flattening enables you to transform any Iterable (such as list or set) into a set of tuples, which are sent downstream. (Similar to Java Stream’s flatMap(…​).) This is done by applying a mapping function to the final element in the source tuple. def required_job_roles(constraint_factory: ConstraintFactory): return ( constraint_factory.for_each(Person) # UniConstraintStream .join(Job, Joiners.equal(lambda job: job, lambda job: job.assignee)) # BiConstraintStream .flatten_last(lambda job: job.required_roles) # BiConstraintStream .filter(lambda person, required_role: ...) ) ... In the example above, the mapping function produces duplicate tuples if job.required_roles contains duplicate values. Assuming that job.required_roles is [USER, USER, ADMIN], the tuple (SomePerson, USER) is sent downstream twice. See distinct() for how to deal with duplicate tuples.","title":"Constraint streams score calculation","component":"docs","version":"latest","name":"constraint-streams","url":"/docs/latest/constraint-streams/constraint-streams.html","titles":[{"text":"1. Introduction","hash":"constraintStreamsIntroduction","id":1},{"text":"2. Creating a constraint stream","hash":"constraintStreamsConfiguration","id":2},{"text":"3. Constraint stream cardinality","hash":"constraintStreamsCardinality","id":3},{"text":"3.1. Achieving higher cardinalities","hash":"constraintStreamsHigherCardinalities","id":4},{"text":"4. Building blocks","hash":"constraintStreamsBuildingBlocks","id":5},{"text":"4.1. ForEach","hash":"constraintStreamsForEach","id":6},{"text":"4.2. Penalties and rewards","hash":"constraintStreamsPenaltiesRewards","id":7},{"text":"4.3. Filtering","hash":"constraintStreamsFilter","id":8},{"text":"4.4. Joining","hash":"constraintStreamsJoin","id":9},{"text":"4.5. Grouping and collectors","hash":"constraintStreamsGroupingAndCollectors","id":10},{"text":"4.5.1. Out-of-the-box collectors","hash":"collectorsOutOfTheBox","id":11},{"text":"count() collector","hash":"collectorsCount","id":12},{"text":"count_distinct() collector","hash":"collectorsCountDistinct","id":13},{"text":"sum() collector","hash":"collectorsSum","id":14},{"text":"average() collector","hash":"collectorsAverage","id":15},{"text":"min() and max() collectors","hash":"collectorsMinMax","id":16},{"text":"to_list(), to_set() and to_map() collectors","hash":"collectorsCollection","id":17},{"text":"4.5.2. Conditional collectors","hash":"collectorsConditional","id":18},{"text":"4.5.3. Composing collectors","hash":"collectorsComposition","id":19},{"text":"4.6. Conditional propagation","hash":"constraintStreamsConditionalPropagation","id":20},{"text":"4.7. Mapping tuples","hash":"constraintStreamsMappingTuples","id":21},{"text":"4.7.1. Designing the mapping function","hash":"constraintStreamsDesigningMappingFunction","id":22},{"text":"4.7.2. Dealing with duplicate tuples using distinct()","hash":"constraintStreamsDealingWithDuplicateTuplesUsingDistinct","id":23},{"text":"4.8. Flattening","hash":"constraintStreamsFlattening","id":24}]},"2":{"id":2,"text":"A construction heuristic builds a pretty good initial solution in a finite length of time. Its solution isn’t always feasible, but it finds it fast so metaheuristics can finish the job. Construction heuristics terminate automatically, so there’s usually no need to configure a Termination on the construction heuristic phase specifically. The First Fit algorithm cycles through all the planning entities (in default order), initializing one planning entity at a time. It assigns the planning entity to the best available planning value, taking the already initialized planning entities into account. It terminates when all planning entities have been initialized. It never changes a planning entity after it has been assigned. Notice that it starts with putting Queen A into row 0 (and never moving it later), which makes it impossible to reach the optimal solution. Suffixing this construction heuristic with metaheuristics can remedy that. Simple configuration: FIRST_FIT Advanced configuration: FIRST_FIT ... For scaling out, see scaling construction heuristics. For a very advanced configuration, see Allocate Entity From Queue. Like First Fit, but assigns the more difficult planning entities first, because they are less likely to fit in the leftovers. So it sorts the planning entities on decreasing difficulty. Requires the model to support planning entity difficulty comparison. One would expect that this algorithm has better results than First Fit. That’s usually the case, but not always. Simple configuration: FIRST_FIT_DECREASING Advanced configuration: FIRST_FIT_DECREASING ... For scaling out, see scaling construction heuristics. For a very advanced configuration, see Allocate Entity From Queue. Like First Fit, but uses the weaker planning values first, because the strong planning values are more likely to be able to accommodate later planning entities. So it sorts the planning values on increasing strength. Requires the model to support planning value strength comparison. Do not presume that this algorithm has better results than First Fit. That’s often not the case. Simple configuration: WEAKEST_FIT Advanced configuration: WEAKEST_FIT ... For scaling out, see scaling construction heuristics. For a very advanced configuration, see Allocate Entity From Queue. Combines First Fit Decreasing and Weakest Fit. So it sorts the planning entities on decreasing difficulty and the planning values on increasing strength. Requires the model to support planning entity difficulty comparison and planning value strength comparison. Do not presume that this algorithm has better results than First Fit Decreasing. That’s often not the case. However, it is usually better than Weakest Fit. Simple configuration: WEAKEST_FIT_DECREASING Advanced configuration: WEAKEST_FIT_DECREASING ... For scaling out, see scaling construction heuristics. For a very advanced configuration, see Allocate Entity From Queue. Like First Fit, but uses the strong planning values first, because the strong planning values are more likely to have a lower soft cost to use. So it sorts the planning values on decreasing strength. Requires the model to support planning value strength comparison. Do not presume that this algorithm has better results than First Fit or Weakest Fit. That’s often not the case. Simple configuration: STRONGEST_FIT Advanced configuration: STRONGEST_FIT ... For scaling out, see scaling construction heuristics. For a very advanced configuration, see Allocate Entity From Queue. Combines First Fit Decreasing and Strongest Fit. So it sorts the planning entities on decreasing difficulty and the planning values on decreasing strength. Requires the model to support planning entity difficulty comparison and planning value strength comparison. Do not presume that this algorithm has better results than First Fit Decreasing or Weakest Fit Decreasing. That’s often not the case. However, it is usually better than Strongest Fit. Simple configuration: STRONGEST_FIT_DECREASING Advanced configuration: STRONGEST_FIT_DECREASING ... For scaling out, see scaling construction heuristics. For a very advanced configuration, see Allocate Entity From Queue. Allocate Entity From Queue is a versatile, generic form of First Fit, First Fit Decreasing, Weakest Fit, Weakest Fit Decreasing, Strongest Fit and Strongest Fit Decreasing. It works like this: Put all entities in a queue. Assign the first entity (from that queue) to the best value. Repeat until all entities are assigned. Simple configuration: ALLOCATE_ENTITY_FROM_QUEUE Verbose simple configuration: ALLOCATE_ENTITY_FROM_QUEUE DECREASING_DIFFICULTY_IF_AVAILABLE INCREASING_STRENGTH_IF_AVAILABLE The entitySorterManner options are: DECREASING_DIFFICULTY: Initialize the more difficult planning entities first. This usually increases pruning (and therefore improves scalability). Requires the model to support planning entity difficulty comparison. DECREASING_DIFFICULTY_IF_AVAILABLE (default): If the model supports planning entity difficulty comparison, behave like DECREASING_DIFFICULTY, else like NONE. NONE: Initialize the planning entities in original order. The valueSorterManner options are: INCREASING_STRENGTH: Evaluate the planning values in increasing strength. Requires the model to support planning value strength comparison. INCREASING_STRENGTH_IF_AVAILABLE (default): If the model supports planning value strength comparison, behave like INCREASING_STRENGTH, else like NONE. DECREASING_STRENGTH: Evaluate the planning values in decreasing strength. Requires the model to support planning value strength comparison. DECREASING_STRENGTH_IF_AVAILABLE: If the model supports planning value strength comparison, behave like DECREASING_STRENGTH, else like NONE. NONE: Try the planning values in original order. Advanced configuration with Weakest Fit Decreasing for a single entity class with one variable: PHASE SORTED DECREASING_DIFFICULTY PHASE SORTED INCREASING_STRENGTH Per step, the QueuedEntityPlacer selects one uninitialized entity from the EntitySelector and applies the winning Move (out of all the moves for that entity generated by the MoveSelector). The mimic selection ensures that the winning Move changes only the selected entity. To customize the entity or value sorting, see sorted selection. For scaling out, see scaling construction heuristics. If there are multiple planning variables, there’s one ChangeMoveSelector per planning variable, which are either in a cartesian product or in sequential steps, similar to the less verbose configuration. The easiest way to deal with multiple entity classes is to run a separate Construction Heuristic for each entity class: ...DogEntity PHASE ... ...CatEntity PHASE ... There are several pick early types for Construction Heuristics: NEVER: Evaluate all the selected moves to initialize the variable(s). This is the default if the InitializingScoreTrend is not ONLY_DOWN. ... NEVER FIRST_NON_DETERIORATING_SCORE: Initialize the variable(s) with the first move that doesn’t deteriorate the score, ignore the remaining selected moves. This is the default if the InitializingScoreTrend is ONLY_DOWN. ... FIRST_NON_DETERIORATING_SCORE If there are only negative constraints, but the InitializingScoreTrend is strictly not ONLY_DOWN, it can sometimes make sense to apply FIRST_NON_DETERIORATING_SCORE. FIRST_FEASIBLE_SCORE: Initialize the variable(s) with the first move that has a feasible score. ... FIRST_FEASIBLE_SCORE If the InitializingScoreTrend is ONLY_DOWN, use FIRST_FEASIBLE_SCORE_OR_NON_DETERIORATING_HARD instead, because that’s faster without any disadvantages. FIRST_FEASIBLE_SCORE_OR_NON_DETERIORATING_HARD: Initialize the variable(s) with the first move that doesn’t deteriorate the feasibility of the score any further. ... FIRST_FEASIBLE_SCORE_OR_NON_DETERIORATING_HARD Allocate To Value From Queue works like this: Put all values in a round-robin queue. Assign the best entity to the first value (from that queue). Repeat until all entities are assigned. Simple configuration: ALLOCATE_TO_VALUE_FROM_QUEUE Verbose simple configuration: ALLOCATE_TO_VALUE_FROM_QUEUE DECREASING_DIFFICULTY_IF_AVAILABLE INCREASING_STRENGTH_IF_AVAILABLE Advanced configuration for a single entity class with a single variable: PHASE SORTED INCREASING_STRENGTH PHASE SORTED DECREASING_DIFFICULTY For scaling out, see scaling construction heuristics. The Cheapest Insertion algorithm cycles through all the planning values for all the planning entities, initializing one planning entity at a time. It assigns a planning entity to the best available planning value (out of all the planning entities and values), taking the already initialized planning entities into account. It terminates when all planning entities have been initialized. It never changes a planning entity after it has been assigned. Cheapest Insertion scales considerably worse than First Fit, etc. Simple configuration: CHEAPEST_INSERTION Advanced configuration: CHEAPEST_INSERTION ... For scaling out, see scaling construction heuristics. For a very advanced configuration, see Allocate from pool. The Regret Insertion algorithm behaves like the Cheapest Insertion algorithm. It also cycles through all the planning values for all the planning entities, initializing one planning entity at a time. But instead of picking the entity-value combination with the best score, it picks the entity which has the largest score loss between its best and second best value assignment. It then assigns that entity to its best value, to avoid regretting not having done that. This algorithm has not been implemented yet. Allocate From Pool is a versatile, generic form of Cheapest Insertion and Regret Insertion. It works like this: Put all entity-value combinations in a pool. Assign the best entity to best value. Repeat until all entities are assigned. Simple configuration: ALLOCATE_FROM_POOL Verbose simple configuration: ALLOCATE_FROM_POOL DECREASING_DIFFICULTY_IF_AVAILABLE INCREASING_STRENGTH_IF_AVAILABLE The entitySorterManner and valueSorterManner options are described in Allocate Entity From Queue. Advanced configuration with Cheapest Insertion for a single entity class with a single variable: PHASE SORTED DECREASING_DIFFICULTY PHASE SORTED INCREASING_STRENGTH Per step, the PooledEntityPlacer applies the winning Move (out of all the moves for that entity generated by the MoveSelector). To customize the entity or value sorting, see sorted selection. Other Selector customization (such as filtering and limiting) is supported too. For scaling out, see scaling construction heuristics. If the Construction Heuristic takes a long time to solve and create an initial solution, there is too little time left for Local Search to reach a near optimal solution. Ideally, a Construction Heuristic should take less than 20 seconds from scratch and less than 50 milliseconds in real-time planning, so there is plenty of time left for Local Search. If benchmarking shows this is not the case, there’s a number of improvements that can be done: If the InitializingScoreTrend is ONLY_DOWN, a Construction Heuristic algorithm (such as First Fit) is faster: for an entity, it picks the first move for which the score does not deteriorate the last step score, ignoring all subsequent moves in that step. It can take that shortcut without reducing solution quality, because a down trend guarantees that initializing any additional planning variable can only make the score the same or worse. So if a move has the same score as before the planning variable was initialized, then no other move can have a better score. There are two ways to deal with multiple planning variables, depending on how their ChangeMoves are combined: Cartesian product (default): All variables of the selected entity are assigned together. This usually results in a better solution quality, but it scales poorly because it tries every combination of variables. For example: FIRST_FIT_DECREASING Sequential: One variable is assigned at a time. Scales better, at the cost of solution quality. The order of the planning variables matters. For example: FIRST_FIT_DECREASING The second way scales better, so it can be worth to switch to it. For example, in a course scheduling example with 200 rooms and 40 periods, a cartesian product selects 8 000 moves per entity (1 step per entity). On the other hand, a sequential approach only selects 240 moves per entity (2 steps per entity), ending the Construction Heuristic 3 times faster. Especially for three or more planning variables, the scaling difference is huge. For example, with three variables of 1 000 values each, a cartesian product selects 1 000 000 000 moves per entity (1 step per entity). A sequential approach only selects 3 000 moves per entity (3 steps per entity), ending the Construction Heuristic 300 000 times faster. The order of the variables is important, especially in the sequential technique. In the sequential example above, it’s better to select the period first and the room second (instead of the other way around), because there are more hard constraints that do not involve the room, such as no teacher should teach two lectures at the same time. With three or more variables, it’s possible to combine the cartesian product and sequential techniques: FIRST_FIT_DECREASING Partitioned Search reduces the number of moves per step. On top of that, it runs the Construction Heuristic on the partitions in parallel. It is supported to only partition the Construction Heuristic phase. Other Selector customizations can also reduce the number of moves generated by step: Filtered selection Limited selection","title":"Construction heuristics","component":"docs","version":"latest","name":"construction-heuristics","url":"/docs/latest/construction-heuristics/construction-heuristics.html","titles":[{"text":"1. Overview","hash":"constructionHeuristicsOverview","id":1},{"text":"2. First fit","hash":"firstFit","id":2},{"text":"2.1. Algorithm description","hash":"firstFitAlgorithm","id":3},{"text":"2.2. Configuration","hash":"firstFitConfiguration","id":4},{"text":"3. First fit decreasing","hash":"firstFitDecreasing","id":5},{"text":"3.1. Algorithm description","hash":"firstFitDecreasingAlgorithm","id":6},{"text":"3.2. Configuration","hash":"firstFitDecreasingConfiguration","id":7},{"text":"4. Weakest fit","hash":"weakestFit","id":8},{"text":"4.1. Algorithm description","hash":"weakestFitAlgorithm","id":9},{"text":"4.2. Configuration","hash":"weakestFitConfiguration","id":10},{"text":"5. Weakest fit decreasing","hash":"weakestFitDecreasing","id":11},{"text":"5.1. Algorithm description","hash":"weakestFitDecreasingAlgorithm","id":12},{"text":"5.2. Configuration","hash":"weakestFitDecreasingConfiguration","id":13},{"text":"6. Strongest fit","hash":"strongestFit","id":14},{"text":"6.1. Algorithm description","hash":"strongestFitAlgorithm","id":15},{"text":"6.2. Configuration","hash":"strongestFitConfiguration","id":16},{"text":"7. Strongest fit decreasing","hash":"strongestFitDecreasing","id":17},{"text":"7.1. Algorithm description","hash":"strongestFitDecreasingAlgorithm","id":18},{"text":"7.2. Configuration","hash":"strongestFitDecreasingConfiguration","id":19},{"text":"8. Allocate entity from queue","hash":"allocateEntityFromQueue","id":20},{"text":"8.1. Algorithm description","hash":"allocateEntityFromQueueAlgorithm","id":21},{"text":"8.2. Configuration","hash":"allocateEntityFromQueueConfiguration","id":22},{"text":"8.3. Multiple entity classes","hash":"allocateEntityFromQueueMultipleEntityClasses","id":23},{"text":"8.4. Pick early type","hash":"constructionHeuristicsPickEarlyType","id":24},{"text":"9. Allocate to value from queue","hash":"allocateToValueFromQueue","id":25},{"text":"9.1. Algorithm description","hash":"allocateToValueFromQueueAlgorithm","id":26},{"text":"9.2. Configuration","hash":"allocateToValueFromQueueConfiguration","id":27},{"text":"10. Cheapest insertion","hash":"cheapestInsertion","id":28},{"text":"10.1. Algorithm description","hash":"cheapestInsertionAlgorithm","id":29},{"text":"10.2. Configuration","hash":"cheapestInsertionConfiguration","id":30},{"text":"11. Regret insertion","hash":"regretInsertion","id":31},{"text":"11.1. Algorithm description","hash":"regretInsertionAlgorithm","id":32},{"text":"11.2. Configuration","hash":"regretInsertionConfiguration","id":33},{"text":"12. Allocate from pool","hash":"allocateFromPool","id":34},{"text":"12.1. Algorithm description","hash":"allocateFromPoolAlgorithm","id":35},{"text":"12.2. Configuration","hash":"allocateFromPoolConfiguration","id":36},{"text":"13. Scaling construction heuristics","hash":"scalingConstructionHeuristics","id":37},{"text":"13.1. InitializingScoreTrend shortcuts","hash":"initializingScoreTrendShortcuts","id":38},{"text":"13.2. Scaling multiple planning variables in construction heuristics","hash":"scalingMultiplePlanningVariablesInConstructionHeuristics","id":39},{"text":"13.3. Other scaling techniques in construction heuristics","hash":"otherScalingTechniquesInConstructionHeuristics","id":40}]},"3":{"id":3,"text":"OptaPy design patterns are generic reusable solutions to common challenges in the model or architecture of projects that perform constraint solving. The design patterns in this section list and solve common design challenges. Follow the guidelines listed in this section to create a well thought-out model that can contribute significantly to the success of your planning. Draw a class diagram of your domain model. Make sure there are no duplications in your data model and that relationships between objects are clearly defined. Create sample instances for each class. For example, in the employee rostering Employee class, create Ann, Bert, and Carl. Determine which relationships (or fields) change during planning and color them orange. One side of these relationships will become a planning variable later on. For example, in employee rostering, the Shift to Employee relationship changes during planning, so it is orange. However, other relationships, such as from Employee to Skill, are immutable during planning because Optaplanner cannot assign an extra skill to an employee. If there are multiple relationships (or fields), check for shadow variables. A shadow variable changes during planning, but its value can be calculated based on one or more genuine planning variables, without dispute. Color shadow relationships (or fields) purple. Only one side of a bi-directional relationship can be a genuine planning variable. The other side will become an inverse relation shadow variable later on. Keep bi-directional relationships orange. Check for chained planning variables. In a chained variable design, the focus is on deciding the order of a set of planning entity instances instead of assigning them to a date and time. However, a shadow variable can assign the date and time. If there is an orange many-to-many relationship, replace it with a one-to-many and a many-to-one relationship to a new intermediate class. OptaPy does not currently support a @planning_variable decorator on a collection. For example, in the Employee Rostering starter application the ShiftAssignment class is the many-to-many relationship between Shift and Employee. Shift contains every shift time that needs to be filled with an employee. Annotate a many-to-one relationship with a @planning_entity annotation. Usually the many side of the relationship is the planning entity class that contains the planning variable. If the relationship is bi-directional, both sides are a planning entity class but usually the many side has the planning variable and the one side has the shadow variable. For example, in employee rostering, the ShiftAssignment class has an @planning_entity annotation. Make sure that the planning entity class has at least one problem property. A planning entity class cannot consist of only planning variables or an ID and only planning variables. Remove any surplus @planning_variable decorators so that they become problem properties. Doing this significantly decreases the search space size and significantly increases solving efficiency. For example, in employee rostering, the ShiftAssignment class should not annotate both the Shift and Employee relationship with @planning_variable. Make sure that when all planning variables have a value of None, the planning entity instance is describable to the business people. Planning variables have a value of None when the planning solution is uninitialized. A surrogate ID does not suffice as the required minimum of one problem property. There is no need to add a hard constraint to assure that two planning entities are different. They are already different due to their problem properties. In some cases, multiple planning entity instances have the same set of problem properties. In such cases, it can be useful to create an extra problem property to distinguish them. For example, in employee rostering, the ShiftAssignment class has the problem property Shift as well as the problem property index_in_shift which is an int. Choose the model in which the number of planning entities is fixed during planning. For example, in the employee rostering, it is impossible to know in advance how many shifts each employee will have before OptaPy solves the model and the results can differ for each solution found. On the other hand, the number of employees per shift is known in advance, so it is better to make the Shift relationship a problem property and the Employee relationship a planning variable as shown in the following examples. In the following diagram, each row is a different example and shows the relationship in that example’s data model. For the N Queens example, the Queen entity has a Row planning variable, which stores objects of type row. Many Queens may point to one Row. Vehicle routing is different because it uses a chained planning variable. Dealing with time and dates in planning problems may be problematic because it is dependent on the needs of your use case. There are several representations of timestamps, dates, durations and periods in Python. Choose the right representation type for your use case: datetime.date, datetime.datetime, …​: an accurate way to represent and calculate with timestamps, dates, …​ Supports timezones and DST (Daylight Saving Time). int: Caches a timestamp as a simplified number of coarse-grained time units (such as minutes) from the start of the global planning time window or the epoch. For example: a datetime.datetime of 1-JAN 08:00:00 becomes an int of 400 minutes. Similarly 1-JAN 09:00:00 becomes 460 minutes. It often represents an extra field in a class, alongside the datetime.datetime field from which it was calculated. The datetime.datetime is used for user visualization, but the int is used in the score constraints. It is faster in calculations, which is especially useful in the TimeGrain pattern. Do not use if timezones or DST affect the score constraints. There are also several designs for assigning a planning entity to a starting time (or date): If the starting time is fixed beforehand, it is not a planning variable (in that solver). the arrival day of each patient is fixed beforehand. This is common in multi stage planning, when the starting time has been decided already in an earlier planning stage. If the starting time is not fixed, it is a planning variable (genuine or shadow). If all planning entities have the same duration, use the Timeslot pattern. For example in course scheduling, all lectures take one hour. Therefore, each timeslot is one hour. Even if the planning entities have different durations, but the same duration per type, it’s often appropriate. For example in conference scheduling, breakout talks take one hour and lab talks take 2 hours. But there’s an enumeration of the timeslots and each timeslot only accepts one talk type. If the duration differs and time is rounded to a specific time granularity (for example 5 minutes) use the TimeGrain pattern. For example in meeting scheduling, all meetings start at 15 minute intervals. All meetings take 15, 30, 45, 60, 90 or 120 minutes. If the duration differs and one task starts immediately after the previous task (assigned to the same executor) finishes, use the Chained Through Time pattern. For example in time windowed vehicle routing, each vehicle departs immediately to the next customer when the delivery for the previous customer finishes. Even if the next task does not always start immediately, but the gap is deterministic, it applies. For example in vehicle routing, each driver departs immediately to the next customer, unless it’s the first departure after noon, in which case there’s first a 1 hour lunch. If the employees need to decide the order of theirs tasks per day, week or SCRUM sprint themselves, use the Time Bucket pattern. For example in elevator maintenance scheduling, a mechanic gets up to 40 hours worth of tasks per week, but there’s no point in ordering them within 1 week because there’s likely to be disruption from entrapments or other elevator outages. Choose the right pattern depending on the use case: If all planning entities have the same duration (or can be inflated to the same duration), the Timeslot pattern is useful. The planning entities are assigned to a timeslot rather than time. For example in course timetabling, all lectures take one hour. The timeslots can start at any time. For example, the timeslots start at 8:00, 9:00, 10:15 (after a 15-minute break), 11:15, …​ They can even overlap, but that is unusual. It is also usable if all planning entities can be inflated to the same duration. For example in exam timetabling, some exams take 90 minutes and others 120 minutes, but all timeslots are 120 minutes. When an exam of 90 minutes is assigned to a timeslot, for the remaining 30 minutes, its seats are occupied too and cannot be used by another exam. Usually there is a second planning variable, for example the room. In course timetabling, two lectures are in conflict if they share the same room at the same timeslot. However, in exam timetabling, that is allowed, if there is enough seating capacity in the room (although mixed exam durations in the same room do inflict a soft score penalty). Assigning humans to start a meeting at four seconds after 9 o’clock is pointless because most human activities have a time granularity of five minutes or 15 minutes. Therefore it is not necessary to allow a planning entity to be assigned subsecond, second or even one minute accuracy. The five minute or 15 minutes accuracy suffices. The TimeGrain pattern models such time accuracy by partitioning time as time grains. For example in meeting scheduling, all meetings start/end in hour, half hour, or 15-minute intervals before or after each hour, therefore the optimal settings for time grains is 15 minutes. Each planning entity is assigned to a start time grain. The end time grain is calculated by adding the duration in grains to the starting time grain. Overlap of two entities is determined by comparing their start and end time grains. This pattern also works well with a coarser time granularity (such as days, half days, hours, …​). With a finer time granularity (such as seconds, milliseconds, …​) and a long time window, the value range (and therefore the search space) can become too high, which reduces efficiency and scalability. However, such a solution is not impossible, as shown in cheap time scheduling. If a person or a machine continuously works on one task at a time in sequence, which means starting a task when the previous is finished (or with a deterministic delay), the Chained Through Time pattern is useful. For example, in the vehicle routing with time windows example, a vehicle drives from customer to customer (thus it handles one customer at a time). In this pattern, the planning entities are chained. The anchor determines the starting time of its first planning entity. The second entity’s starting time is calculated based on the starting time and duration of the first entity. For example, in task assignment, Beth (the anchor) starts working at 8:00, thus her first task starts at 8:00. It lasts 52 minutes, therefore her second task starts at 8:52. The starting time of an entity is usually a shadow variable. An anchor has only one chain. Although it is possible to split up the anchor into two separate anchors, for example split up Beth into Beth’s left hand and Beth’s right hand (because she can do two tasks at the same time), this model makes pooling resources difficult. Consequently, using this model in the exam scheduling example to allow two or more exams to use the same room at the same time is problematic. Between planning entities, there are three ways to create gaps: No gaps: This is common when the anchor is a machine. For example, a build server always starts the next job when the previous finishes, without a break. Only deterministic gaps: This is common for humans. For example, any task that crosses the 10:00 barrier gets an extra 15 minutes duration so the human can take a break. A deterministic gap can be subjected to complex business logic. For example in vehicle routing, a cross-continent truck driver needs to rest 15 minutes after two hours of driving (which may also occur during loading or unloading time at a customer location) and also needs to rest 10 hours after 14 hours of work. Planning variable gaps: This is uncommon, because that extra planning variable reduces efficiency and scalability, (besides impacting the search space too). In some use case there is an overhead time for certain tasks, which can be shared by multiple tasks, of those are consecutively scheduled. Basically, the solver receives a discount if it combines those tasks. For example when delivering pizza to two different customers, a food delivery service combines both deliveries into a single trip, if those two customers ordered from the same restaurant around the same time and live in the same part of the city. Implement the automatic collapse in the custom variable listener that calculates the start and end times of each task. Some tasks require more than one person to execute. In such cases, both employees need to be there at the same time, before the work can start. For example when assembling furniture, assembling a bed is a two-person job. Implement the automatic delay in the custom variable listener that calculates the arrival, start and end times of each task. Separate the arrival time from the start time. Additionally, add loop detection to avoid an infinite loop: In this pattern, the time of each employee is divided into buckets. For example 1 bucket per week. Each bucket has a capacity, depending on the FTE (Full Time Equivalent), holidays and the approved vacation of the employee. For example, a bucket usually has 40 hours for a full time employee and 20 hours for a half time employee but only 8 hours on a specific week if the employee takes vacation the rest of that week. Each task is assigned to a bucket, which determines the employee and the coarse-grained time period for working on it. The tasks within one bucket are not ordered: it’s up to the employee to decide the order. This gives the employee more autonomy, but makes it harder to do certain optimization, such as minimize travel time between task locations. There are two common usage patterns of OptaPy in the cloud: Batch planning: Typically runs at night for hours to solve each tenant’s dataset and deliver each schedule for the upcoming day(s) or week(s). Only the final best solution is sent back to the client. This is a good fit for a serverless cloud architecture. Real-time planning: Typically runs during the day, to handle unexpected problem changes as they occur in real-time and sends best solutions as they are discovered to the client.","title":"Design patterns","component":"docs","version":"latest","name":"design-patterns","url":"/docs/latest/design-patterns/design-patterns.html","titles":[{"text":"1. Design patterns introduction","hash":"designPatternsIntroduction","id":1},{"text":"2. Domain Modeling Guidelines","hash":"domainModelingGuide","id":2},{"text":"3. Assigning time to planning entities","hash":"assigningTimeToPlanningEntities","id":3},{"text":"3.1. Timeslot pattern:  assign to a fixed-length timeslot","hash":"timeslotPattern","id":4},{"text":"3.2. TimeGrain pattern: assign to a starting TimeGrain","hash":"timeGrainPattern","id":5},{"text":"3.3. Chained through time pattern: assign in a chain that determines starting time","hash":"chainedThroughTimePattern","id":6},{"text":"3.3.1. Chained through time: automatic collapse","hash":"chainedThroughTimeAutomaticCollapse","id":7},{"text":"3.3.2. Chained through time: automatic delay until last","hash":"chainedThroughTimeAutomaticDelayUntilLast","id":8},{"text":"3.4. Time bucket pattern: assign to a capacitated bucket per time period","hash":"timeBucketPattern","id":9},{"text":"4. Cloud architecture patterns","hash":"cloudArchitecturePatterns","id":10}]},"4":{"id":4,"text":"Evolutionary Algorithms work on a population of solutions and evolve that population. This algorithm has not been implemented yet. This algorithm has not been implemented yet. A good Genetic Algorithms prototype in OptaPlanner (the engine OptaPy wraps) was written some time ago, but it wasn’t practical to merge and support it at the time. The results of Genetic Algorithms were consistently and seriously inferior to all the Local Search variants (except Hill Climbing) on all use cases tried. Nevertheless, a future version of OptaPlanner (and thus OptaPy) will add support for Genetic Algorithms, so you can easily benchmark Genetic Algorithms on your use case too.","title":"Evolutionary algorithms","component":"docs","version":"latest","name":"evolutionary-algorithms","url":"/docs/latest/evolutionary-algorithms/evolutionary-algorithms.html","titles":[{"text":"1. Overview","hash":"evolutionaryAlgorithmsOverview","id":1},{"text":"2. Evolutionary strategies","hash":"evolutionaryStrategies","id":2},{"text":"3. Genetic algorithms","hash":"geneticAlgorithms","id":3}]},"5":{"id":5,"text":"Exhaustive Search will always find the global optimum and recognize it too. That being said, it doesn’t scale (not even beyond toy data sets) and is therefore mostly useless. The Brute Force algorithm creates and evaluates every possible solution. Notice that it creates a search tree that explodes exponentially as the problem size increases, so it hits a scalability wall. Brute Force is mostly unusable for a real-world problem due to time limitations, as shown in scalability of Exhaustive Search. Simplest configuration of Brute Force: ... BRUTE_FORCE Branch And Bound also explores nodes in an exponential search tree, but it investigates more promising nodes first and prunes away worthless nodes. For each node, Branch And Bound calculates the optimistic bound: the best possible score to which that node can lead to. If the optimistic bound of a node is lower or equal to the global pessimistic bound, then it prunes away that node (including the entire branch of all its subnodes). Academic papers use the term lower bound instead of optimistic bound (and the term upper bound instead of pessimistic bound), because they minimize the score. OptaPy maximizes the score (because it supports combining negative and positive constraints). Therefore, for clarity, it uses different terms, as it would be confusing to use the term lower bound for a bound which is always higher. For example: at index 14, it sets the global pessimistic bound to -2. Because all solutions reachable from the node visited at index 11 will have a score lower or equal to -2 (the node’s optimistic bound), they can be pruned away. Notice that Branch And Bound (much like Brute Force) creates a search tree that explodes exponentially as the problem size increases. So it hits the same scalability wall, only a little bit later. Branch And Bound is mostly unusable for a real-world problem due to time limitations, as shown in scalability of Exhaustive Search. Simplest configuration of Branch And Bound: ... BRANCH_AND_BOUND For the pruning to work with the default ScoreBounder, the InitializingScoreTrend should be set. Especially an InitializingScoreTrend of ONLY_DOWN (or at least has ONLY_DOWN in the leading score levels) prunes a lot. Advanced configuration: BRANCH_AND_BOUND DEPTH_FIRST DECREASING_DIFFICULTY_IF_AVAILABLE INCREASING_STRENGTH_IF_AVAILABLE The nodeExplorationType options are: DEPTH_FIRST (default): Explore deeper nodes first (and then a better score and then a better optimistic bound). Deeper nodes (especially leaf nodes) often improve the pessimistic bound. A better pessimistic bound allows pruning more nodes to reduce the search space. BRANCH_AND_BOUND DEPTH_FIRST BREADTH_FIRST (not recommended): Explore nodes layer by layer (and then a better score and then a better optimistic bound). Scales terribly in memory (and usually in performance too). BRANCH_AND_BOUND BREADTH_FIRST SCORE_FIRST: Explore nodes with a better score first (and then a better optimistic bound and then deeper nodes first). Might scale as terribly as BREADTH_FIRST in some cases. BRANCH_AND_BOUND SCORE_FIRST OPTIMISTIC_BOUND_FIRST: Explore nodes with a better optimistic bound first (and then a better score and then deeper nodes first). Might scale as terribly as BREADTH_FIRST in some cases. BRANCH_AND_BOUND OPTIMISTIC_BOUND_FIRST The entitySorterManner options are: DECREASING_DIFFICULTY: Initialize the more difficult planning entities first. This usually increases pruning (and therefore improves scalability). Requires the model to support planning entity difficulty comparison. DECREASING_DIFFICULTY_IF_AVAILABLE (default): If the model supports planning entity difficulty comparison, behave like DECREASING_DIFFICULTY, else like NONE. NONE: Initialize the planning entities in original order. The valueSorterManner options are: INCREASING_STRENGTH: Evaluate the planning values in increasing strength. Requires the model to support planning value strength comparison. INCREASING_STRENGTH_IF_AVAILABLE (default): If the model supports planning value strength comparison, behave like INCREASING_STRENGTH, else like NONE. DECREASING_STRENGTH: Evaluate the planning values in decreasing strength. Requires the model to support planning value strength comparison. DECREASING_STRENGTH_IF_AVAILABLE: If the model supports planning value strength comparison, behave like DECREASING_STRENGTH, else like NONE. NONE: Try the planning values in original order. Exhaustive Search variants suffer from two big scalability issues: They scale terribly memory wise. They scale horribly performance wise. As shown in these time spent graphs, Brute Force and Branch And Bound both hit a performance scalability wall. For example, on N queens it hits wall at a few dozen queens: In most use cases, such as Cloud Balancing, the wall appears out of thin air: Exhaustive Search hits this wall on small datasets already, so in production these optimizations algorithms are mostly useless. Use Construction Heuristics with Local Search instead: those can handle thousands of queens/computers easily. Throwing hardware at these scalability issues has no noticeable impact. Newer and more hardware are just a drop in the ocean. Moore’s law cannot win against the onslaught of a few more planning entities in the dataset.","title":"Exhaustive search","component":"docs","version":"latest","name":"exhaustive-search","url":"/docs/latest/exhaustive-search/exhaustive-search.html","titles":[{"text":"1. Overview","hash":"exhaustiveSearchOverview","id":1},{"text":"2. Brute force","hash":"bruteForce","id":2},{"text":"2.1. Algorithm description","hash":"bruteForceAlgorithm","id":3},{"text":"2.2. Configuration","hash":"bruteForceConfiguration","id":4},{"text":"3. Branch and bound","hash":"branchAndBound","id":5},{"text":"3.1. Algorithm description","hash":"branchAndBoundAlgorithm","id":6},{"text":"3.2. Configuration","hash":"branchAndBoundConfiguration","id":7},{"text":"4. Scalability of exhaustive search","hash":"scalabilityOfExhaustiveSearch","id":8}]},"6":{"id":6,"text":"Local Search starts from an initial solution and evolves that single solution into a mostly better and better solution. It uses a single search path of solutions, not a search tree. At each solution in this path it evaluates a number of moves on the solution and applies the most suitable move to take the step to the next solution. It does that for a high number of iterations until it’s terminated (usually because its time has run out). Local Search acts a lot like a human planner: it uses a single search path and moves facts around to find a good feasible solution. Therefore it’s pretty natural to implement. Local Search needs to start from an initialized solution, therefore it’s usually required to configure a Construction Heuristic phase before it. A step is the winning Move. Local Search tries a number of moves on the current solution and picks the best accepted move as the step: Figure 1. Decide the next step at step 0 (four queens example) Because the move B0 to B3 has the highest score (-3), it is picked as the next step. If multiple moves have the same highest score, one is picked randomly, in this case B0 to B3. Note that C0 to C3 (not shown) could also have been picked because it also has the score -3. The step is applied on the solution. From that new solution, Local Search tries every move again, to decide the next step after that. It continually does this in a loop, and we get something like this: Figure 2. All steps (four queens example) Notice that Local Search doesn’t use a search tree, but a search path. The search path is highlighted by the green arrows. At each step it tries all selected moves, but unless it’s the step, it doesn’t investigate that solution further. This is one of the reasons why Local Search is very scalable. As shown above, Local Search solves the four queens problem by starting with the starting solution and make the following steps sequentially: B0 to B3 D0 to D2 A0 to A1 Turn on DEBUG logging for the optapy logger to show those steps in the log: import logging logging.getLogger('optapy').setLevel(logging.DEBUG) INFO Solving started: time spent (0), best score (-6), environment mode (REPRODUCIBLE), random (JDK with seed 0). DEBUG LS step (0), time spent (20), score (-3), new best score (-3), accepted/selected move count (12/12), picked move (Queen-1 {Row-0 -> Row-3}). DEBUG LS step (1), time spent (31), score (-1), new best score (-1), accepted/selected move count (12/12), picked move (Queen-3 {Row-0 -> Row-2}). DEBUG LS step (2), time spent (40), score (0), new best score (0), accepted/selected move count (12/12), picked move (Queen-0 {Row-0 -> Row-1}). INFO Local Search phase (0) ended: time spent (41), best score (0), score calculation speed (5000/sec), step total (3). INFO Solving ended: time spent (41), best score (0), score calculation speed (5000/sec), phase total (1), environment mode (REPRODUCIBLE). Notice that a log message includes the __str__ method of the Move implementation which returns for example \"Queen-1 {Row-0 → Row-3}\". A naive Local Search configuration solves the four queens problem in three steps, by evaluating only 37 possible solutions (three steps with 12 moves each + one starting solution), which is only a fraction of all 256 possible solutions. It solves 16 queens in 31 steps, by evaluating only 7441 out of 18446744073709551616 possible solutions. By using a Construction Heuristics phase first, it’s even a lot more efficient. Local Search decides the next step with the aid of three configurable components: A MoveSelector which selects the possible moves of the current solution. See the chapter move and neighborhood selection. An Acceptor which filters out unacceptable moves. A Forager which gathers accepted moves and picks the next step from them. The solver phase configuration looks like this: ... ... ... In the example below, the MoveSelector generated the moves shown with the blue lines, the Acceptor accepted all of them and the Forager picked the move B0 to B3. Turn on trace logging to show the decision making in the log: INFO Solver started: time spent (0), score (-6), new best score (-6), random (JDK with seed 0). TRACE Move index (0) not doable, ignoring move (Queen-0 {Row-0 -> Row-0}). TRACE Move index (1), score (-4), accepted (true), move (Queen-0 {Row-0 -> Row-1}). TRACE Move index (2), score (-4), accepted (true), move (Queen-0 {Row-0 -> Row-2}). TRACE Move index (3), score (-4), accepted (true), move (Queen-0 {Row-0 -> Row-3}). ... TRACE Move index (6), score (-3), accepted (true), move (Queen-1 {Row-0 -> Row-3}). ... TRACE Move index (9), score (-3), accepted (true), move (Queen-2 {Row-0 -> Row-3}). ... TRACE Move index (12), score (-4), accepted (true), move (Queen-3 {Row-0 -> Row-3}). DEBUG LS step (0), time spent (6), score (-3), new best score (-3), accepted/selected move count (12/12), picked move (Queen-1 {Row-0 -> Row-3}). ... Because the last solution can degrade (for example in Tabu Search), the Solver remembers the best solution it has encountered through the entire search path. Each time the current solution is better than the last best solution, the current solution is cloned and referenced as the new best solution. An Acceptor is used (together with a Forager) to active Tabu Search, Simulated Annealing, Late Acceptance, …​ For each move it checks whether it is accepted or not. By changing a few lines of configuration, you can easily switch from Tabu Search to Simulated Annealing or Late Acceptance and back. You can implement your own Acceptor, but the built-in acceptors should suffice for most needs. You can also combine multiple acceptors. A Forager gathers all accepted moves and picks the move which is the next step. Normally it picks the accepted move with the highest score. If several accepted moves have the highest score, one is picked randomly to break the tie. Breaking ties randomly leads to better results. It is possible to disable breaking ties randomly by explicitly setting breakTieRandomly to false, but that’s almost never a good idea: If an earlier move is better than a later move with the same score, the score calculator should add an extra softer score level to score the first move as slightly better. Don’t rely on move selection order to enforce that. Random tie breaking does not affect reproducibility. When there are many possible moves, it becomes inefficient to evaluate all of them at every step. To evaluate only a random subset of all the moves, use: An acceptedCountLimit integer, which specifies how many accepted moves should be evaluated during each step. By default, all accepted moves are evaluated at every step. 1000 Unlike the n queens problem, real world problems require the use of acceptedCountLimit. Start from an acceptedCountLimit that takes a step in less than two seconds. Turn on INFO logging to see the step times. With a low acceptedCountLimit (so a fast stepping algorithm), it is recommended to avoid using selectionOrder SHUFFLED because the shuffling generates a random number for every element in the selector, taking up a lot of time, but only a few elements are actually selected. A forager can pick a move early during a step, ignoring subsequent selected moves. There are three pick early types for Local Search: NEVER: A move is never picked early: all accepted moves are evaluated that the selection allows. This is the default. NEVER FIRST_BEST_SCORE_IMPROVING: Pick the first accepted move that improves the best score. If none improve the best score, it behaves exactly like the pickEarlyType NEVER. FIRST_BEST_SCORE_IMPROVING FIRST_LAST_STEP_SCORE_IMPROVING: Pick the first accepted move that improves the last step score. If none improve the last step score, it behaves exactly like the pickEarlyType NEVER. FIRST_LAST_STEP_SCORE_IMPROVING Hill Climbing tries all selected moves and then takes the best move, which is the move which leads to the solution with the highest score. That best move is called the step move. From that new solution, it again tries all selected moves and takes the best move and continues like that iteratively. If multiple selected moves tie for the best move, one of them is randomly chosen as the best move. Notice that once a queen has moved, it can be moved again later. This is a good thing, because in an NP-complete problem it’s impossible to predict what will be the optimal final value for a planning variable. Hill climbing always takes improving moves. This may seem like a good thing, but it’s not: Hill Climbing can easily get stuck in a local optimum. This happens when it reaches a solution for which all the moves deteriorate the score. Even if it picks one of those moves, the next step might go back to the original solution and which case chasing its own tail: Improvements upon Hill Climbing (such as Tabu Search, Simulated Annealing and Late Acceptance) address the problem of being stuck in local optima. Therefore, it’s recommended to never use Hill Climbing, unless you’re absolutely sure there are no local optima in your planning problem. Simplest configuration: HILL_CLIMBING Advanced configuration: ... HILL_CLIMBING 1 Tabu Search is a Local Search that maintains a tabu list to avoid getting stuck in local optima. The tabu list holds recently used objects that are taboo to use for now. Moves that involve an object in the tabu list, are not accepted. The tabu list objects can be anything related to the move, such as the planning entity, planning value, move, solution, …​ Here’s an example with entity tabu for four queens, so the queens are put in the tabu list: It’s called Tabu Search, not Taboo Search. There is no spelling error. Scientific paper: Tabu Search - Part 1 and Part 2 by Fred Glover (1989 - 1990) Simplest configuration: TABU_SEARCH When Tabu Search takes steps it creates one or more tabus. For a number of steps, it does not accept a move if that move breaks tabu. That number of steps is the tabu size. Advanced configuration: ... 7 1000 A Tabu Search acceptor should be combined with a high acceptedCountLimit, such as 1000. OptaPy implements several tabu types: Planning entity tabu (recommended) makes the planning entities of recent steps tabu. For example, for N queens it makes the recently moved queens tabu. It’s recommended to start with this tabu type. 7 To avoid hard coding the tabu size, configure a tabu ratio, relative to the number of entities, for example 2%: 0.02 Planning value tabu makes the planning values of recent steps tabu. For example, for N queens it makes the recently moved to rows tabu. 7 To avoid hard coding the tabu size, configure a tabu ratio, relative to the number of values, for example 2%: 0.02 Move tabu makes recent steps tabu. It does not accept a move equal to one of those steps. 7 Undo move tabu makes the undo move of recent steps tabu. 7 When using move tabu and undo move tabu with custom moves, make sure that the planning entities do not include planning variables in their __hash__ methods. Failure to do so results in runtime exceptions being thrown due to the __hash__ not being constant, as the entities have their values changed by the local search algorithm. Sometimes it’s useful to combine tabu types: 7 3 If the tabu size is too small, the solver can still get stuck in a local optimum. On the other hand, if the tabu size is too large, the solver can be inefficient by bouncing off the walls. Simulated Annealing evaluates only a few moves per step, so it steps quickly. In the classic implementation, the first accepted move is the winning step. A move is accepted if it doesn’t decrease the score or - in case it does decrease the score - it passes a random check. The chance that a decreasing move passes the random check decreases relative to the size of the score decrement and the time the phase has been running (which is represented as the temperature). Simulated Annealing does not always pick the move with the highest score, neither does it evaluate many moves per step. At least at first. Instead, it gives non improving moves also a chance to be picked, depending on its score and the time gradient of the Termination. In the end, it gradually turns into Hill Climbing, only accepting improving moves. Start with a simulatedAnnealingStartingTemperature set to the maximum score delta a single move can cause. Advanced configuration: ... 2hard/100soft 1 Simulated Annealing should use a low acceptedCountLimit. The classic algorithm uses an acceptedCountLimit of 1, but often 4 performs better. Simulated Annealing can be combined with a tabu acceptor at the same time. That gives Simulated Annealing salted with a bit of Tabu. Use a lower tabu size than in a pure Tabu Search configuration. ... 5 2hard/100soft 1 Late Acceptance (also known as Late Acceptance Hill Climbing) also evaluates only a few moves per step. A move is accepted if it does not decrease the score, or if it leads to a score that is at least the late score (which is the winning score of a fixed number of steps ago). Scientific paper: The Late Acceptance Hill-Climbing Heuristic by Edmund K. Burke, Yuri Bykov (2012) Simplest configuration: LATE_ACCEPTANCE Late Acceptance accepts any move that has a score which is higher than the best score of a number of steps ago. That number of steps is the lateAcceptanceSize. Advanced configuration: ... 400 1 Late Acceptance should use a low acceptedCountLimit. Late Acceptance can be combined with a tabu acceptor at the same time. That gives Late Acceptance salted with a bit of Tabu. Use a lower tabu size than in a pure Tabu Search configuration. ... 5 400 1 Great Deluge algorithm is similar to the Simulated Annealing algorithm, it evaluates only a few moves per steps, so it steps quickly. The first accepted move is the winning step. A move is accepted only if it is not lower than the score value (water level) that we are working with. It means Great Deluge is deterministic and opposite of Simulated Annealing has no randomization in it. The water level is increased after every step either about the fixed value or by percentual value. A gradual increase in water level gives Great Deluge more time to escape from local maxima. Simplest configuration: GREAT_DELUGE Great Deluge takes as starting water level best score from construction heuristic and uses default rain speed ratio. Advanced configuration: ... 0.00000005 1 OptaPy implements two water level increment options: If greatDelugeWaterLevelIncrementScore is set, the water level is increased by a constant value. 10 To avoid hard coding the water level increment, configure a greatDelugeWaterLevelIncrementRatio (recommended) when the water level is increased by percentual value, so there is no need to know the size of the problem or value of a scoring function. 0.00000005 The algorithm takes as starting value the best score from the construction heuristic. Use the Benchmarker to fine-tune tweak your configuration. Step Counting Hill Climbing also evaluates only a few moves per step. For a number of steps, it keeps the step score as a threshold. A move is accepted if it does not decrease the score, or if it leads to a score that is at least the threshold score. Scientific paper: An initial study of a novel Step Counting Hill Climbing heuristic applied to timetabling problems by Yuri Bykov, Sanja Petrovic (2013) Step Counting Hill Climbing accepts any move that has a score which is higher than a threshold score. Every number of steps (specified by stepCountingHillClimbingSize), the threshold score is set to the step score. ... 400 1 Step Counting Hill Climbing should use a low acceptedCountLimit. Step Counting Hill Climbing can be combined with a tabu acceptor at the same time, similar as shown in the Late Acceptance section. Strategic Oscillation is an add-on, which works especially well with Tabu Search. Instead of picking the accepted move with the highest score, it employs a different mechanism: If there’s an improving move, it picks it. If there’s no improving move however, it prefers moves which improve a softer score level, over moves which break a harder score level less. Configure a finalistPodiumType, for example in a Tabu Search configuration: ... 7 1000 STRATEGIC_OSCILLATION The following finalistPodiumTypes are supported: HIGHEST_SCORE (default): Pick the accepted move with the highest score. STRATEGIC_OSCILLATION: Alias for the default strategic oscillation variant. STRATEGIC_OSCILLATION_BY_LEVEL: If there is an accepted improving move, pick it. If no such move exists, prefer an accepted move which improves a softer score level over one that doesn’t (even if it has a better harder score level). A move is improving if it’s better than the last completed step score. STRATEGIC_OSCILLATION_BY_LEVEL_ON_BEST_SCORE: Like STRATEGIC_OSCILLATION_BY_LEVEL, but define improving as better than the best score (instead of the last completed step score). Variable Neighborhood Descent iteratively tries multiple move selectors in original order (depleting each selector entirely before trying the next one), picking the first improving move (which also resets the iterator back to the first move selector). Despite that VND has a name that ends with descent (from the research papers), the implementation will ascend to a higher score (which is a better score). Simplest configuration: VARIABLE_NEIGHBORHOOD_DESCENT Advanced configuration: ORIGINAL ... HILL_CLIMBING FIRST_LAST_STEP_SCORE_IMPROVING Variable Neighborhood Descent doesn’t scale well, but it is useful in some use cases with a very erratic score landscape. Custom Termination, MoveSelector, EntitySelector, ValueSelector, and Acceptor are currently not supported in OptaPy.","title":"Local search","component":"docs","version":"latest","name":"local-search","url":"/docs/latest/local-search/local-search.html","titles":[{"text":"1. Overview","hash":"localSearchOverview","id":1},{"text":"2. Local search concepts","hash":"localSearchConcepts","id":2},{"text":"2.1. Step by step","hash":"localSearchStepByStep","id":3},{"text":"2.2. Decide the next step","hash":"localSearchConceptsDecideTheNextStep","id":4},{"text":"2.3. Acceptor","hash":"localSearchAcceptor","id":5},{"text":"2.4. Forager","hash":"localSearchForager","id":6},{"text":"2.4.1. Accepted count limit","hash":"acceptedCountLimit","id":7},{"text":"2.4.2. Pick early type","hash":"localSearchPickEarlyType","id":8},{"text":"3. Hill climbing (simple local search)","hash":"hillClimbing","id":9},{"text":"3.1. Algorithm description","hash":"hillClimbingAlgorithm","id":10},{"text":"3.2. Stuck in local optima","hash":"hillClimbingStuckInLocalOptima","id":11},{"text":"3.3. Configuration","hash":"hillClimbingConfigure","id":12},{"text":"4. Tabu search","hash":"tabuSearch","id":13},{"text":"4.1. Algorithm description","hash":"tabuSearchAlgorithm","id":14},{"text":"4.2. Configuration","hash":"tabuSearchConfiguration","id":15},{"text":"5. Simulated annealing","hash":"simulatedAnnealing","id":16},{"text":"5.1. Algorithm description","hash":"simulatedAnnealingAlgorithm","id":17},{"text":"5.2. Configuration","hash":"simulatedAnnealingConfiguration","id":18},{"text":"6. Late acceptance","hash":"lateAcceptance","id":19},{"text":"6.1. Algorithm description","hash":"lateAcceptanceAlgorithm","id":20},{"text":"6.2. Configuration","hash":"lateAcceptanceConfiguration","id":21},{"text":"7. Great Deluge","hash":"greatDeluge","id":22},{"text":"7.1. Algorithm Description","hash":"greatDelugeAlgorithm","id":23},{"text":"7.2. Configuration","hash":"greatDelugeConfiguration","id":24},{"text":"8. Step counting hill climbing","hash":"stepCountingHillClimbing","id":25},{"text":"8.1. Algorithm description","hash":"stepCountingHillClimbingAlgorithm","id":26},{"text":"8.2. Configuration","hash":"stepCountingHillClimbingConfiguration","id":27},{"text":"8.3. Algorithm description","hash":"strategicOscillationAlgorithm","id":28},{"text":"8.4. Configuration","hash":"strategicOscillationConfiguration","id":29},{"text":"9. Variable neighborhood descent","hash":"variableNeighborhoodDescent","id":30},{"text":"9.1. Algorithm description","hash":"variableNeighborhoodDescentAlgorithm","id":31},{"text":"9.2. Configuration","hash":"variableNeighborhoodDescentConfiguration","id":32},{"text":"10. Using a custom Termination, MoveSelector, EntitySelector, ValueSelector, or Acceptor","hash":"customTerminationSelectorOrAcceptor","id":33}]},"7":{"id":7,"text":"A Move is a change (or set of changes) from a solution A to a solution B. For example, the move below changes queen C from row 0 to row 2: The new solution is called a neighbor of the original solution, because it can be reached in a single Move. Although a single move can change multiple queens, the neighbors of a solution should always be a very small subset of all possible solutions. For example, on that original solution, these are all possible changeMoves: If we ignore the four changeMoves that have no impact and are therefore not doable, we can see that the number of moves is n * (n - 1) = 12. This is far less than the number of possible solutions, which is n ^ n = 256. As the problem scales out, the number of possible moves increases far less than the number of possible solutions. Yet, in four changeMoves or less we can reach any solution. For example we can reach a very different solution in three changeMoves: There are many other types of moves besides changeMoves. Many move types are included out-of-the-box. A Move can affect multiple entities or even create/delete entities. But it must not change the problem facts. All optimization algorithms use Moves to transition from one solution to a neighbor solution. Therefore, all the optimization algorithms are confronted with Move selection: the craft of creating and iterating moves efficiently and the art of finding the most promising subset of random moves to evaluate first. A MoveSelector's main function is to create Iterator[Move] when needed. An optimization algorithm will iterate through a subset of those moves. Here’s an example how to configure a changeMoveSelector for the optimization algorithm Local Search: ... Out of the box, this works and all properties of the changeMoveSelector are defaulted sensibly (unless that fails fast due to ambiguity). On the other hand, the configuration can be customized significantly for specific use cases. For example: you might want to configure a filter to discard pointless moves. To create a Move, a MoveSelector needs to select one or more planning entities and/or planning values to move. Just like MoveSelectors, EntitySelectors and ValueSelectors need to support a similar feature set (such as scalable just-in-time selection). Therefore, they all implement a common interface Selector and they are configured similarly. A MoveSelector is often composed out of EntitySelectors, ValueSelectors or even other MoveSelectors, which can be configured individually if desired: ... ... ... ... Together, this structure forms a Selector tree: The root of this tree is a MoveSelector which is injected into the optimization algorithm implementation to be (partially) iterated in every step. Name Description __str__ example Change move Change 1 entity’s variable Process-A {Computer-1 -> Computer-2} Swap move Swap all variables of 2 entities Process-A {Computer-1} Process-B {Computer-2} Pillar change move Change a set of entities with the same value [Process-A, Process-B, Process-C] {Computer-1 -> Computer-2} Pillar swap move Swap 2 sets of entities with the same values [Process-A, Process-B, Process-C] {Computer-1} [Process-E, Process-F] {Computer-2} Tail chain swap move Swap 2 tails chains Visit-A5 {Visit-A4} Visit-B3 {Visit-B2} Sub chain change move Cut a subchain and paste it into another chain [Visit-A5..Visit-A8] {Visit-A4 -> Visit-B2} Sub chain swap move Swap 2 subchains [Visit-A5..Visit-A8] {Visit-A4} [Visit-B3..Visit-B9] {Visit-B2} For one planning variable, the ChangeMove selects one planning entity and one planning value and assigns the entity’s variable to that value. Simplest configuration: If there are multiple entity classes or multiple planning variables for one entity class, a simple configuration will automatically unfold into a union of ChangeMove selectors for every planning variable. Advanced configuration: ... ...Lecture ... ... ... A ChangeMove is the finest grained move. Almost every moveSelector configuration injected into a metaheuristic algorithm should include a changeMoveSelector. This guarantees that every possible solution can be reached in theory through applying a number of moves in sequence. Of course, normally it is unioned with other, more coarse grained move selectors. This move selector only supports phase or solver caching if it doesn’t apply on a chained variable. The SwapMove selects two different planning entities and swaps the planning values of all their planning variables. Although a SwapMove on a single variable is essentially just two ChangeMoves, it’s often the winning step in cases that the first of the two ChangeMoves would not win because it leaves the solution in a state with broken hard constraints. For example: swapping the room of two lectures doesn’t bring the solution in an intermediate state where both lectures are in the same room which breaks a hard constraint. Simplest configuration: If there are multiple entity classes, a simple configuration will automatically unfold into a union of SwapMove selectors for every entity class. Advanced configuration: ... ...Lecture ... ...Lecture ... ... room ... The secondaryEntitySelector is rarely needed: if it is not specified, entities from the same entitySelector are swapped. If one or more variableNameInclude properties are specified, not all planning variables will be swapped, but only those specified. For example for course scheduling, specifying only variableNameInclude room will make it only swap room, not period. This move selector only supports phase or solver caching if it doesn’t apply on any chained variables. A pillar is a set of planning entities which have the same planning value(s) for their planning variable(s). The PillarChangeMove selects one entity pillar (or subset of those) and changes the value of one variable (which is the same for all entities) to another value. In the example above, queen A and C have the same value (row 0) and are moved to row 2. Also the yellow and blue process have the same value (computer Y) and are moved to computer X. Simplest configuration: Advanced configuration: SEQUENCE ... ...ShiftAssignment ... 1 1000 ... For a description of subPillarType and related properties, please refer to Subpillars. The other properties are explained in changeMoveSelector. This move selector does not support phase or solver caching and step caching scales badly memory wise. The PillarSwapMove selects two different entity pillars and swaps the values of all their variables for all their entities. Simplest configuration: Advanced configuration: SEQUENCE ... ...ShiftAssignment ... 1 1000 ... ... employee ... For a description of subPillarType and related properties, please refer to sub pillars. The secondaryPillarSelector is rarely needed: if it is not specified, entities from the same pillarSelector are swapped. The other properties are explained in swapMoveSelector and pillarChangeMoveSelector. This move selector does not support phase or solver caching and step caching scales badly memory wise. A sub pillar is a subset of entities that share the same value(s) for their variable(s). For example if queen A, B, C and D are all located on row 0, they are a pillar and [A, D] is one of the many sub pillars. There are several ways how sub pillars can be selected by the subPillarType property: ALL (default) selects all possible sub pillars. SEQUENCE limits selection of sub pillars to Sequential sub pillars. NONE never selects any sub pillars. If sub pillars are enabled, the pillar itself is also included and the properties minimumSubPillarSize (defaults to 1) and maximumSubPillarSize (defaults to infinity) limit the size of the selected (sub) pillar. The number of sub pillars of a pillar is exponential to the size of the pillar. For example a pillar of size 32 has (2^32 - 1) subpillars. Therefore a pillarSelector only supports JIT random selection (which is the default). Sub pillars can be sorted with a Comparator. A sequential sub pillar is a continuous subset of its sorted base pillar. For example if a nurse has shifts on Monday (M), Tuesday (T), and Wednesday (W), they are a pillar and only the following are its sequential sub pillars: [M], [T], [W], [M, T], [T, W], [M, T, W]. But [M, W] is not a sub pillar in this case, as there is a gap on Tuesday. Sequential sub pillars apply to both Pillar change move and Pillar swap move. A minimal configuration looks like this: SEQUENCE In this case, the entity being operated on must implement the comparisons methods (__lt__, __gt__, etc). The size of sub pillars will not be limited in any way. An advanced configuration looks like this: ... SEQUENCE ... 1 1000 ... The size of the sub pillars is limited in length of up to 1000 entities. A tailChain is a set of planning entities with a chained planning variable which form the last part of a chain. The tailChainSwapMove selects a tail chain and swaps it with the tail chain of another planning value (in a different or the same anchor chain). If the targeted planning value, doesn’t have a tail chain, it swaps with nothing (resulting in a change like move). If it occurs within the same anchor chain, a partial chain reverse occurs. In academic papers, this is often called a 2-opt move. Simplest configuration: Advanced configuration: ... ...Customer ... ... ... The entitySelector selects the start of the tail chain that is being moved. The valueSelector selects to where that tail chain is moved. If it has a tail chain itself, that is moved to the location of the original tail chain. It uses a valueSelector instead of a secondaryEntitySelector to be able to include all possible 2opt moves (such as moving to the end of a tail) and to work correctly with nearby selection (because of asymmetric distances and also swapped entity distance gives an incorrect selection probability). Although subChainChangeMoveSelector and subChainSwapMoveSelector include almost every possible tailChainSwapMove, experiments have shown that focusing on tailChainSwapMoves increases efficiency. This move selector does not support phase or solver caching. A subChain is a set of planning entities with a chained planning variable which form part of a chain. The subChainChangeMoveSelector selects a subChain and moves it to another place (in a different or the same anchor chain). Simplest configuration: Advanced configuration: ... ...Customer ... 2 40 ... true The subChainSelector selects a number of entities, no less than minimumSubChainSize (defaults to 1) and no more than maximumSubChainSize (defaults to infinity). If minimumSubChainSize is 1 (which is the default), this selector might select the same move as a ChangeMoveSelector, at a far lower selection probability (because each move type has the same selection chance by default (not every move instance) and there are far more SubChainChangeMove instances than ChangeMove instances). However, don’t just remove the ChangeMoveSelector, because experiments show that it’s good to focus on ChangeMoves. Furthermore, in a SubChainSwapMoveSelector, setting minimumSubChainSize prevents swapping a subchain of size 1 with a subchain of size 2 or more. The selectReversingMoveToo property (defaults to true) enables selecting the reverse of every subchain too. This move selector does not support phase or solver caching and step caching scales badly memory wise. The subChainSwapMoveSelector selects two different subChains and moves them to another place in a different or the same anchor chain. Simplest configuration: Advanced configuration: ... ...Customer ... 2 40 ... 2 40 true The secondarySubChainSelector is rarely needed: if it is not specified, entities from the same subChainSelector are swapped. The other properties are explained in subChainChangeMoveSelector. This move selector does not support phase or solver caching and step caching scales badly memory wise. A unionMoveSelector selects a Move by selecting one of its MoveSelector children to supply the next Move. Simplest configuration: ... Advanced configuration: ... ... ... ... ... ... ... ... ...ProbabilityWeightFactory The selectorProbabilityWeightFactory determines in selectionOrder RANDOM how often a MoveSelector child is selected to supply the next Move. By default, each MoveSelector child has the same chance of being selected. Custom selectorProbabilityWeightFactory functions are currently not supported in OptaPy. Change the fixedProbabilityWeight of such a child to select it more often. For example, the unionMoveSelector can return a SwapMove twice as often as a ChangeMove: 1.0 ... 2.0 ... The number of possible ChangeMoves is very different from the number of possible SwapMoves and furthermore it’s problem dependent. To give each individual Move the same selection chance (as opposed to each MoveSelector), use the FairSelectorProbabilityWeightFactory: org.optaplanner.core.impl.heuristic.selector.common.decorator.FairSelectorProbabilityWeightFactory A cartesianProductMoveSelector selects a new CompositeMove. It builds that CompositeMove by selecting one Move per MoveSelector child and adding it to the CompositeMove. Simplest configuration: ... Advanced configuration: ... ... ... ... ... true The ignoreEmptyChildIterators property (true by default) will ignore every empty childMoveSelector to avoid returning no moves. For example: a cartesian product of changeMoveSelector A and B, for which B is empty (because all it’s entities are pinned) returns no move if ignoreEmptyChildIterators is false and the moves of A if ignoreEmptyChildIterators is true. To enforce that two child selectors use the same entity or value efficiently, use mimic selection, not move filtering. Simplest configuration: Advanced configuration: ... optapy.examples.curriculumcourse.domain.Lecture The entityClass property is only required if it cannot be deduced automatically because there are multiple entity classes. Simplest configuration: Advanced configuration: ... The variableName property is only required if it cannot be deduced automatically because there are multiple variables (for the related entity class). In exotic Construction Heuristic configurations, the entityClass from the EntitySelector sometimes needs to be downcasted, which can be done with the property downcastEntityClass: ...LeadingExam If a selected entity cannot be downcasted, the ValueSelector is empty for that entity. A Selector's cacheType determines when a selection (such as a Move, an entity, a value, …​) is created and how long it lives. Almost every Selector supports setting a cacheType: PHASE ... The following cacheTypes are supported: JUST_IN_TIME (default, recommended): Not cached. Construct each selection (Move, …​) just before it’s used. This scales up well in memory footprint. STEP: Cached. Create each selection (Move, …​) at the beginning of a step and cache them in a list for the remainder of the step. This scales up badly in memory footprint. PHASE: Cached. Create each selection (Move, …​) at the beginning of a solver phase and cache them in a list for the remainder of the phase. Some selections cannot be phase cached because the list changes every step. This scales up badly in memory footprint, but has a slight performance gain. SOLVER: Cached. Create each selection (Move, …​) at the beginning of a Solver and cache them in a list for the remainder of the Solver. Some selections cannot be solver cached because the list changes every step. This scales up badly in memory footprint, but has a slight performance gain. A cacheType can be set on composite selectors too: PHASE ... Nested selectors of a cached selector cannot be configured to be cached themselves, unless it’s a higher cacheType. For example: a STEP cached unionMoveSelector can contain a PHASE cached changeMoveSelector, but it cannot contain a STEP cached changeMoveSelector. A Selector's selectionOrder determines the order in which the selections (such as Moves, entities, values, …​) are iterated. An optimization algorithm will usually only iterate through a subset of its MoveSelector's selections, starting from the start, so the selectionOrder is critical to decide which Moves are actually evaluated. Almost every Selector supports setting a selectionOrder: ... RANDOM ... The following selectionOrders are supported: ORIGINAL: Select the selections (Moves, entities, values, …​) in default order. Each selection will be selected only once. For example: A0, A1, A2, A3, …​, B0, B1, B2, B3, …​, C0, C1, C2, C3, …​ SORTED: Select the selections (Moves, entities, values, …​) in sorted order. Each selection will be selected only once. Requires cacheType >= STEP. Mostly used on an entitySelector or valueSelector for construction heuristics. See sorted selection. For example: A0, B0, C0, …​, A2, B2, C2, …​, A1, B1, C1, …​ RANDOM (default): Select the selections (Moves, entities, values, …​) in non-shuffled random order. A selection might be selected multiple times. This scales up well in performance because it does not require caching. For example: C2, A3, B1, C2, A0, C0, …​ SHUFFLED: Select the selections (Moves, entities, values, …​) in shuffled random order. Each selection will be selected only once. Requires cacheType >= STEP. This scales up badly in performance, not just because it requires caching, but also because a random number is generated for each element, even if it’s not selected (which is the grand majority when scaling up). For example: C2, A3, B1, A0, C0, …​ PROBABILISTIC: Select the selections (Moves, entities, values, …​) in random order, based on the selection probability of each element. A selection with a higher probability has a higher chance to be selected than elements with a lower probability. A selection might be selected multiple times. Requires cacheType >= STEP. Mostly used on an entitySelector or valueSelector. See probabilistic selection. For example: B1, B1, A1, B2, B1, C2, B1, B1, …​ A selectionOrder can be set on composite selectors too. When a Selector is cached, all of its nested Selectors will naturally default to selectionOrder ORIGINAL. Avoid overwriting the selectionOrder of those nested Selectors. This combination is great for big use cases (10 000 entities or more), as it scales up well in memory footprint and performance. Other combinations are often not even viable on such sizes. It works for smaller use cases too, so it’s a good way to start out. It’s the default, so this explicit configuration of cacheType and selectionOrder is actually obsolete: JUST_IN_TIME RANDOM Here’s how it works. When the root MoveSelector yields a value, a child MoveSelector is randomly selected (1), which creates a random Move (2, 3, 4) and is then returned (5): Notice that it never creates a list of Moves and it generates random numbers only for Moves that are actually selected. This combination often wins for small use cases (1000 entities or less). Beyond that size, it scales up badly in memory footprint and performance. PHASE SHUFFLED Here’s how it works: At the start of the phase (or step depending on the cacheType), all moves are created (1) and cached (2). When the root MoveSelector is created, the moves are shuffled (3). When the root MoveSelector yields a value, the next element in the shuffled list is returned (4): Notice that each Move will only be selected once, even though they are selected in random order. Use cacheType PHASE if none of the (possibly nested) Selectors require STEP. Otherwise, do something like this: STEP SHUFFLED PHASE PHASE This combination is often a worthy competitor for medium use cases, especially with fast stepping optimization algorithms (such as Simulated Annealing). Unlike cached shuffled selection, it doesn’t waste time shuffling the moves list at the beginning of every step. PHASE RANDOM OptaPy currently does not support filtered selection, but will in a future version. OptaPy currently does not support filtered move selection, but will in a future version. OptaPy currently does not support filtered entity selection, but will in a future version. OptaPy currently does not support filtered value selection, but will in a future version. Sorted selection can happen on any Selector in the selector tree, including any MoveSelector, EntitySelector or ValueSelector. It does not work with cacheType JUST_IN_TIME and it only works with selectionOrder SORTED. It’s mostly used in construction heuristics. If the chosen construction heuristic implies sorting, for example FIRST_FIT_DECREASING implies that the EntitySelector is sorted, there is no need to explicitly configure a Selector with sorting. If you do explicitly configure the Selector, it overwrites the default settings of that construction heuristic. Some Selector types implement a SorterManner out of the box: EntitySelector supports: DECREASING_DIFFICULTY: Sorts the planning entities according to decreasing planning entity difficulty. Requires that planning entity difficulty is annotated on the domain model. PHASE SORTED DECREASING_DIFFICULTY ValueSelector supports: INCREASING_STRENGTH: Sorts the planning values according to increasing planning value strength. Requires that planning value strength is annotated on the domain model. PHASE SORTED INCREASING_STRENGTH OptaPy currently does not support sorted selection by comparison function, but will in a future version. OptaPy currently does not support sorted selection by weight factory, but will in a future version. OptaPy currently does not support sorted selection by selection sorter, but will in a future version. OptaPy currently does not support custom probabilistic selection, but will in a future version. Selecting all possible moves sometimes does not scale well enough, especially for construction heuristics (which don’t support acceptedCountLimit). To limit the number of selected selection per step, apply a selectedCountLimit on the selector: 100 To scale Local Search, setting acceptedCountLimit is usually better than using selectedCountLimit. During mimic selection, one normal selector records its selection and one or multiple other special selectors replay that selection. The recording selector acts as a normal selector and supports all other configuration properties. A replaying selector mimics the recording selection and supports no other configuration properties. The recording selector needs an id. A replaying selector must reference a recorder’s id with a mimicSelectorRef: Mimic selection is useful to create a composite move from two moves that affect the same entity. OptaPy currently does not support nearby selection, but will in a future version. OptaPy currently does not support custom moves, but will in a future version.","title":"Move and neighborhood selection","component":"docs","version":"latest","name":"move-and-neighborhood-selection","url":"/docs/latest/move-and-neighborhood-selection/move-and-neighborhood-selection.html","titles":[{"text":"1. Move and neighborhood introduction","hash":"moveAndNeighborhoodSelectionIntroduction","id":1},{"text":"1.1. What is a Move?","hash":"whatIsAMove","id":2},{"text":"1.2. What is a MoveSelector?","hash":"whatIsAMoveSelector","id":3},{"text":"1.3. Subselecting of entities, values, and other moves","hash":"subselectingOfEntitiesValuesAndOtherMoves","id":4},{"text":"2. Generic MoveSelectors","hash":"genericMoveSelectors","id":5},{"text":"2.1. Generic MoveSelectors overview","hash":"genericMoveSelectorsOverview","id":6},{"text":"2.2. ChangeMoveSelector","hash":"changeMoveSelector","id":7},{"text":"2.3. SwapMoveSelector","hash":"swapMoveSelector","id":8},{"text":"2.4. Pillar-based move selectors","hash":"pillarMoveSelectors","id":9},{"text":"2.4.1. PillarChangeMoveSelector","hash":"pillarChangeMoveSelector","id":10},{"text":"2.4.2. PillarSwapMoveSelector","hash":"pillarSwapMoveSelector","id":11},{"text":"2.4.3. Sub pillars","hash":"subPillars","id":12},{"text":"Sequential sub pillars","hash":"sequentialSubPillars","id":13},{"text":"2.5. Move selectors for chained variables","hash":"chainMoveSelectors","id":14},{"text":"2.5.1. TailChainSwapMoveSelector or 2-opt","hash":"tailChainSwapMoveSelector","id":15},{"text":"2.5.2. SubChainChangeMoveSelector","hash":"subChainChangeMoveSelector","id":16},{"text":"2.5.3. SubChainSwapMoveSelector","hash":"subChainSwapMoveSelector","id":17},{"text":"3. Combining multiple MoveSelectors","hash":"combiningMultipleMoveSelectors","id":18},{"text":"3.1. unionMoveSelector","hash":"unionMoveSelector","id":19},{"text":"3.2. cartesianProductMoveSelector","hash":"cartesianProductMoveSelector","id":20},{"text":"4. EntitySelector","hash":"entitySelector","id":21},{"text":"5. ValueSelector","hash":"valueSelector","id":22},{"text":"6. General Selector features","hash":"generalSelectorFeatures","id":23},{"text":"6.1. CacheType: create moves ahead of time or just in time","hash":"cacheType","id":24},{"text":"6.2. SelectionOrder: original, sorted, random, shuffled, or probabilistic","hash":"selectionOrder","id":25},{"text":"6.3. Recommended combinations of CacheType and SelectionOrder","hash":"recommendedCombinationsOfCacheTypeAndSelectionOrder","id":26},{"text":"6.3.1. Just in time random selection (default)","hash":"justInTimeRandomSelection","id":27},{"text":"6.3.2. Cached shuffled selection","hash":"cachedShuffledSelection","id":28},{"text":"6.3.3. Cached random selection","hash":"cachedRandomSelection","id":29},{"text":"6.4. Filtered selection","hash":"filteredSelection","id":30},{"text":"6.4.1. Filtered move selection","hash":"filteredMoveSelection","id":31},{"text":"6.4.2. Filtered entity selection","hash":"filteredEntitySelection","id":32},{"text":"6.4.3. Filtered value selection","hash":"filteredValueSelection","id":33},{"text":"6.5. Sorted selection","hash":"sortedSelection","id":34},{"text":"6.5.1. Sorted selection by SorterManner","hash":"sortedSelectionBySorterManner","id":35},{"text":"6.5.2. Sorted selection by comparison function","hash":"sortedSelectionByComparator","id":36},{"text":"6.5.3. Sorted selection by SelectionSorterWeightFactory","hash":"sortedSelectionBySelectionSorterWeightFactory","id":37},{"text":"6.5.4. Sorted selection by SelectionSorter","hash":"sortedSelectionBySelectionSorter","id":38},{"text":"6.6. Probabilistic selection","hash":"probabilisticSelection","id":39},{"text":"6.7. Limited selection","hash":"limitedSelection","id":40},{"text":"6.8. Mimic selection (record/replay)","hash":"mimicSelection","id":41},{"text":"6.9. Nearby selection","hash":"nearbySelection","id":42},{"text":"7. Custom moves","hash":"customMoves","id":43}]},"8":{"id":8,"text":"The number of possible solutions for a planning problem can be mind blowing. For example: Four queens has 256 possible solutions (4^4) and two optimal solutions. Five queens has 3125 possible solutions (5^5) and one optimal solution. Eight queens has 16777216 possible solutions (8^8) and 92 optimal solutions. 64 queens has more than 10^115 possible solutions (64^64). Most real-life planning problems have an incredible number of possible solutions and only one or a few optimal solutions. For comparison: the minimal number of atoms in the known universe (10^80). As a planning problem gets bigger, the search space tends to blow up really fast. Adding only one extra planning entity or planning value can heavily multiply the running time of some algorithms. Calculating the number of possible solutions depends on the design of the domain model: This search space size calculation includes infeasible solutions (if they can be represented by the model), because: The optimal solution might be infeasible. There are many types of hard constraints that cannot be incorporated in the formula practically. For example, in Cloud Balancing, try incorporating the CPU capacity constraint in the formula. Even in cases where adding some of the hard constraints in the formula is practical (for example, Course Scheduling), the resulting search space is still huge. An algorithm that checks every possible solution (even with pruning, such as in Branch And Bound) can easily run for billions of years on a single real-life planning problem. The aim is to find the best solution in the available timeframe. Planning competitions (such as the International Timetabling Competition) show that Local Search variations (Tabu Search, Simulated Annealing, Late Acceptance, …​) usually perform best for real-world problems given real-world time limitations. The business wants the optimal solution, but they also have other requirements: Scale out: Large production data sets must not crash and have also good results. Optimize the right problem: The constraints must match the actual business needs. Available time: The solution must be found in time, before it becomes useless to execute. Reliability: Every data set must have at least a decent result (better than a human planner). Given these requirements, and despite the promises of some salesmen, it is usually impossible for anyone or anything to find the optimal solution. Therefore, OptaPy focuses on finding the best solution in available time. The nature of NP-complete problems make scaling a prime concern. The quality of a result from a small data set is no indication of the quality of a result from a large data set. Scaling issues cannot be mitigated by hardware purchases later on. Start testing with a production sized data set as soon as possible. Do not assess quality on small data sets (unless production encounters only such data sets). Instead, solve a production sized data set and compare the results of longer executions, different algorithms and - if available - the human planner. OptaPy uses OptaPlanner, the first framework to combine optimization algorithms (metaheuristics, …​) with score calculation by a rule engine (such as Drools). This combination is very efficient, because: A rule engine, such as Drools, is great for calculating the score of a solution of a planning problem. It makes it easy and scalable to add additional soft or hard constraints. It does incremental score calculation (deltas) without any extra code. However it tends to be not suitable to actually find new solutions. An optimization algorithm is great at finding new improving solutions for a planning problem, without necessarily brute-forcing every possibility. However, it needs to know the score of a solution and offers no support in calculating that score efficiently. OptaPy supports three families of optimization algorithms: Exhaustive Search, Construction Heuristics and Metaheuristics. In practice, Metaheuristics (in combination with Construction Heuristics to initialize) are the recommended choice: Each of these algorithm families have multiple optimization algorithms: Table 1. Optimization Algorithms Overview Algorithm Scalable? Optimal? Easy to use? Tweakable? Requires CH? Exhaustive Search (ES) Brute Force 0/5 5/5 5/5 0/5 No Branch And Bound 0/5 5/5 4/5 2/5 No Construction heuristics (CH) First Fit 5/5 1/5 5/5 1/5 No First Fit Decreasing 5/5 2/5 4/5 2/5 No Weakest Fit 5/5 2/5 4/5 2/5 No Weakest Fit Decreasing 5/5 2/5 4/5 2/5 No Strongest Fit 5/5 2/5 4/5 2/5 No Strongest Fit Decreasing 5/5 2/5 4/5 2/5 No Cheapest Insertion 3/5 2/5 5/5 2/5 No Regret Insertion 3/5 2/5 5/5 2/5 No Metaheuristics (MH) Local Search (LS) Hill Climbing 5/5 2/5 4/5 3/5 Yes Tabu Search 5/5 4/5 3/5 5/5 Yes Simulated Annealing 5/5 4/5 2/5 5/5 Yes Late Acceptance 5/5 4/5 3/5 5/5 Yes Great Deluge 5/5 4/5 3/5 5/5 Yes Step Counting Hill Climbing 5/5 4/5 3/5 5/5 Yes Variable Neighborhood Descent 3/5 3/5 2/5 5/5 Yes Evolutionary Algorithms (EA) Evolutionary Strategies 3/5 3/5 2/5 5/5 Yes Genetic Algorithms 3/5 3/5 2/5 5/5 Yes To learn more about metaheuristics, see Essentials of Metaheuristics or Clever Algorithms. The best optimization algorithms configuration to use depends heavily on your use case. However, this basic procedure provides a good starting configuration that will produce better than average results. Start with a quick configuration that involves little or no configuration and optimization code: See First Fit. Next, add Late Acceptance behind it: First Fit Decreasing. Late Acceptance. At this point, the return on invested time lowers and the result is likely to be sufficient. However, this can be improved at a lower return on invested time. Many optimization algorithms have parameters that affect results and scalability. OptaPy applies configuration by exception, so all optimization algorithms have default parameter values. This is very similar to the Garbage Collection parameters in a JVM: most users have no need to tweak them, but power users often do. The default parameter values are sufficient for many cases (and especially for prototypes). The documentation for each optimization algorithm also declares the advanced configuration for power tweaking. The default value of parameters will change between minor versions, to improve them for most users. The advanced configuration can be used to prevent unwanted changes, however, this is not recommended. A Solver can use multiple optimization algorithms in sequence. Each optimization algorithm is represented by one solver Phase. There is never more than one Phase solving at the same time. Some Phase implementations can combine techniques from multiple optimization algorithms, but it is still just one Phase. For example: a Local Search Phase can do Simulated Annealing with entity Tabu. Here is a configuration that runs three phases in sequence: ... ... ... ... The solver phases are run in the order defined by solver configuration. When the first Phase terminates, the second Phase starts, and so on. When the last Phase terminates, the Solver terminates. Usually, a Solver will first run a construction heuristic and then run one or multiple metaheuristics: If no phases are configured, OptaPy will default to a Construction Heuristic phase followed by a Local Search phase. Some phases (especially construction heuristics) will terminate automatically. Other phases (especially metaheuristics) will only terminate if the Phase is configured to terminate: ... 90 60 ... ... If the Solver terminates (before the last Phase terminates itself), the current phase is terminated and all subsequent phases will not run. A solver will iteratively run phases. Each phase will usually iteratively run steps. Each step, in turn, usually iteratively runs moves. These form four nested scopes: Solver Phase Step Move Configure logging to display the log messages of each scope. Not all phases terminate automatically and may take a significant amount of time. A Solver can be terminated synchronously by up-front configuration, or asynchronously from another thread. Metaheuristic phases in particular need to be instructed to stop solving. This can be because of a number of reasons, for example, if the time is up, or the perfect score has been reached just before its solution is used. Finding the optimal solution cannot be relied on (unless you know the optimal score), because a metaheuristic algorithm is generally unaware of the optimal solution. This is not an issue for real-life problems, as finding the optimal solution may take more time than is available. Finding the best solution in the available time is the most important outcome. If no termination is configured (and a metaheuristic algorithm is used), the Solver will run forever, until terminateEarly() is called from another thread. This is especially common during real-time planning. For synchronous termination, configure a Termination on a Solver or a Phase when it needs to stop. The built-in implementations of these should be sufficient, but custom terminations are supported too. Every Termination can calculate a time gradient (needed for some optimization algorithms), which is a ratio between the time already spent solving and the estimated entire solving time of the Solver or Phase. Terminates when an amount of time has been used. PT2M30S Alternatively to a duration in ISO 8601 format, you can also use: Milliseconds 500 Seconds 10 Minutes 5 Hours 1 Days 2 Multiple time types can be used together, for example to configure 150 minutes, either configure it directly: 150 Or use a combination that sums up to 150 minutes: 2 30 This Termination will most likely sacrifice perfect reproducibility (even with environmentMode REPRODUCIBLE) because the available CPU time differs frequently between runs: The available CPU time influences the number of steps that can be taken, which might be a few more or less. The Termination might produce slightly different time gradient values, which will send time gradient-based algorithms (such as Simulated Annealing) on a radically different path. Terminates when the best score has not improved in a specified amount of time. Each time a new best solution is found, the timer basically resets. PT2M30S Alternatively to a duration in ISO 8601 format, you can also use: Milliseconds 500 Seconds 10 Minutes 5 Hours 1 Days 1 Just like time spent termination, combinations are summed up. It is preferred to configure this termination on a specific Phase (such as ) instead of on the Solver itself. This Termination will most likely sacrifice perfect reproducibility (even with environmentMode REPRODUCIBLE) as the available CPU time differs frequently between runs: The available CPU time influences the number of steps that can be taken, which might be a few more or less. The Termination might produce slightly different time gradient values, which will send time gradient based algorithms (such as Simulated Annealing) on a radically different path. Optionally, configure a score difference threshold by which the best score must improve in the specified time. For example, if the score doesn’t improve by at least 100 soft points every 30 seconds or less, it terminates: 30 0hard/100soft If the score improves by 1 hard point and drops 900 soft points, it’s still meets the threshold, because 1hard/-900soft is larger than the threshold 0hard/100soft. On the other hand, a threshold of 1hard/0soft is not met by any new best solution that improves 1 hard point at the expense of 1 or more soft points, because 1hard/-100soft is smaller than the threshold 1hard/0soft. To require a feasibility improvement every 30 seconds while avoiding the pitfall above, use a wildcard * for lower score levels that are allowed to deteriorate if a higher score level improves: 30 1hard/*soft This effectively implies a threshold of 1hard/-2147483648soft, because it relies on Integer.MIN_VALUE. BestScoreTermination terminates when a certain score has been reached. Use this Termination where the perfect score is known, for example for four queens (which uses a SimpleScore): 0 A planning problem with a HardSoftScore may look like this: 0hard/-5000soft A planning problem with a BendableScore with three hard levels and one soft level may look like this: [0/0/0]hard/[-5000]soft In this instance, Termination once a feasible solution has been reached is not practical because it requires a bestScoreLimit such as 0hard/-2147483648soft. Use the next termination instead. Terminates as soon as a feasible solution has been discovered. true This Termination is usually combined with other terminations. Terminates when a number of steps has been reached. This is useful for hardware performance independent runs. 100 This Termination can only be used for a Phase (such as ), not for the Solver itself. Terminates when the best score has not improved in a number of steps. This is useful for hardware performance independent runs. 100 If the score has not improved recently, it is unlikely to improve in a reasonable timeframe. It has been observed that once a new best solution is found (even after a long time without improvement on the best solution), the next few steps tend to improve the best solution. This Termination can only be used for a Phase (such as ), not for the Solver itself. ScoreCalculationCountTermination terminates when a number of score calculations have been reached. This is often the sum of the number of moves and the number of steps. This is useful for benchmarking. 100000 Switching EnvironmentMode can heavily impact when this termination ends. Terminations can be combined, for example: terminate after 100 steps or if a score of 0 has been reached: OR 0 100 Alternatively you can use AND, for example: terminate after reaching a feasible score of at least -100 and no improvements in 5 steps: AND -100 5 This example ensures it does not just terminate after finding a feasible solution, but also completes any obvious improvements on that solution before terminating. Asynchronous termination from another thread occurs when a Solver needs to be terminated early from another thread, for example, due to a user action or a server restart. This cannot be configured by a Termination as it is impossible to predict when and if it will occur. Therefore the Solver interface has the following thread-safe methods: class Solver: ... def terminateEarly(self) -> bool: ... def isTerminateEarly(self) -> bool: ... When calling the terminateEarly() method from another thread, the Solver will terminate at its earliest convenience and the solve(Solution) method will return (in the original Solver thread). Interrupting the Solver thread (which is the thread that called Solver.solve(Solution)) has the same effect as calling terminateEarly() except that it leaves that thread in the interrupted state. This guarantees a graceful shutdown when an Executor (such as ThreadPoolExecutor) is shutdown because that only interrupts all active threads in the pool. Each time a new best solution is found, a new BestSolutionChangedEvent is fired in the Solver thread. To listen to such events, add a SolverEventListener to the Solver: class Solver: ... def addEventListener(self, event_listener: Callable[[SolverEvent], None]) -> None: ... def removeEventListener(self, event_listener: Callable[[SolverEvent], None]) -> None: ... The BestSolutionChangedEvent's getNewBestSolution may not be initialized or feasible. Use the isFeasible() method on BestSolutionChangedEvent's new best Score to detect such cases: def new_best_solution_listener(event): # Ignore infeasible (including uninitialized) solutions if event.getNewBestSolution().getScore().isFeasible(): ... solver.addEventListener(new_best_solution_listener) Use Score.isSolutionInitialized() instead of Score.isFeasible() to only ignore uninitialized solutions, but also accept infeasible solutions. The event listener is called in the solver’s thread, as part of Solver.solve(). So it should return quickly to avoid slowing down the solving. Custom solver phases are currently not supported in OptaPy. In rare cases, it’s useful not to run any solver phases. But by default, configuring no phase will trigger running the default phases. To avoid those, configure a NoChangePhase: ... Python has a Global Interpreter Lock (GIL), and as a result, only one thread can run at a time in Python. This prevents OptaPy from utilizing multiple cores on a machine, since only one of the cores can execute Python code at a time. Hence, utilizing multithreaded solving will probably degrade performance instead of improving it at this time. There are several ways of doing multithreaded solving: Multitenancy: solve different datasets in parallel The SolverManager will make it even easier to set this up, in a future version. Multi bet solving: solve 1 dataset with multiple, isolated solvers and take the best result. Not recommended: This is a marginal gain for a high cost of hardware resources. Use multithreaded incremental solving instead. Partitioned Search: Split 1 dataset in multiple parts and solve them independently. Configure a Partitioned Search. Multithreaded incremental solving: solve 1 dataset with multiple threads without sacrificing incremental score calculation. Donate a portion of your CPU cores to OptaPy to scale up the score calculation speed and get the same results in fraction of the time. Configure multithreaded incremental solving. A logging level of debug or trace might cause congestion multithreaded solving and slow down the score calculation speed. For some functionality (such as multithreaded solving and real-time planning), OptaPy needs to map problem facts and planning entities to an ID. OptaPy uses that ID to rebase a move from one thread’s solution state to another’s. To enable such functionality, specify the @planning_id annotation on the identification field or getter method, for example on the database ID: from optapy import planning_entity, planning_id @planning_entity class CloudComputer: computer_id: int ... @planning_id def get_computer_id(self): return self.computer_id Or alternatively, on another type of ID: from optapy import problem_fact, planning_id @problem_fact class User: user_name: str ... @planning_id def get_user_name(self): return self.user_name A @planning_id property must be: Unique for that specific class It does not need to be unique across different problem fact classes (unless in that rare case that those classes are mixed in the same value range or planning entity collection). An instance of a type that implements __hash__(self) and __eq__(self, other). It’s recommended to use the type int, str or uuid. Never None by the time Solver.solve() is called. Python has a Global Interpreter Lock (GIL), and as a result, only one thread can run at a time in Python. This prevents OptaPy from utilizing multiple cores on a machine, since only one of the cores can execute Python code at a time. Hence, utilizing multithreaded solving will probably degrade performance instead of improving it at this time. Enable multithreaded incremental solving by adding a @planning_id annotation on every planning entity class and planning value class. Then configure a moveThreadCount: AUTO ... Advanced configuration: 4 10 ...MyAppServerThreadFactory ... The following moveThreadCounts are supported: NONE (default): Don’t run any move threads. Use the single threaded code. AUTO: Let OptaPy decide how many move threads to run in parallel. On machines or containers with little or no CPUs, this falls back to the single threaded code. Static number: The number of move threads to run in parallel. 4 This can be 1 to enforce running the multithreaded code with only 1 move thread (which is less efficient than NONE). It is counter-effective to set a moveThreadCount that is higher than the number of available CPU cores, as that will slow down the score calculation speed. The number of available cores in Python is effectively 1, due to the Global Intrepreter Lock (GIL). One good reason to do it anyway, is to reproduce a bug of a high-end production machine. Multithreaded solving is still reproducible, as long as the resolved moveThreadCount is stable. A run of the same solver configuration on 2 machines with a different number of CPUs, is still reproducible, unless the moveThreadCount is set to AUTO or a function of availableProcessorCount. The moveThreadBufferSize power tweaks the number of moves that are selected but won’t be foraged. Setting it too low reduces performance, but setting it too high too. Unless you’re deeply familiar with the inner workings of multithreaded solving, don’t configure this parameter.","title":"Optimization algorithms","component":"docs","version":"latest","name":"optimization-algorithms","url":"/docs/latest/optimization-algorithms/optimization-algorithms.html","titles":[{"text":"1. Search space size in the real world","hash":"searchSpaceSize","id":1},{"text":"2. Does OptaPy find the optimal solution?","hash":"doesPlannerFindTheOptimalSolution","id":2},{"text":"3. Architecture overview","hash":"architectureOverview","id":3},{"text":"4. Optimization algorithms overview","hash":"optimizationAlgorithmsOverview","id":4},{"text":"5. Which optimization algorithms should I use?","hash":"whichOptimizationAlgorithmsShouldIUse","id":5},{"text":"6. Power tweaking or default parameter values","hash":"powerTweaking","id":6},{"text":"7. Solver phase","hash":"solverPhase","id":7},{"text":"8. Scope overview","hash":"scopeOverview","id":8},{"text":"9. Termination","hash":"termination","id":9},{"text":"9.1. Time spent termination","hash":"timeMillisSpentTermination","id":10},{"text":"9.2. Unimproved time spent termination","hash":"unimprovedTimeMillisSpentTermination","id":11},{"text":"9.3. BestScoreTermination","hash":"bestScoreTermination","id":12},{"text":"9.4. BestScoreFeasibleTermination","hash":"bestScoreFeasibleTermination","id":13},{"text":"9.5. StepCountTermination","hash":"stepCountTermination","id":14},{"text":"9.6. UnimprovedStepCountTermination","hash":"unimprovedStepCountTermination","id":15},{"text":"9.7. ScoreCalculationCountTermination","hash":"scoreCalculationCountTermination","id":16},{"text":"9.8. Combining multiple terminations","hash":"combiningMultipleTerminations","id":17},{"text":"9.9. Asynchronous termination from another thread","hash":"asynchronousTermination","id":18},{"text":"10. SolverEventListener","hash":"SolverEventListener","id":19},{"text":"11. Custom solver phase","hash":"customSolverPhase","id":20},{"text":"12. No change solver phase","hash":"noChangeSolverPhase","id":21},{"text":"13. Multithreaded solving","hash":"multithreadedSolving","id":22},{"text":"13.1. @planning_id","hash":"planningId","id":23},{"text":"13.2. Multithreaded incremental solving","hash":"multithreadedIncrementalSolving","id":24}]},"9":{"id":9,"text":"It is often more efficient to partition large data sets (usually above 5000 planning entities) into smaller pieces and solve them separately. Partition Search is multithreaded, so it provides a performance boost on multi-core machines due to higher CPU utilization. Additionally, even when only using one CPU, it finds an initial solution faster, because the search space sum of a partitioned Construction Heuristic is far less than its non-partitioned variant. However, partitioning does lead to suboptimal results, even if the pieces are solved optimally, as shown below: It effectively trades a short term gain in solution quality for long term loss. One way to compensate for this loss, is to run a non-partitioned Local Search after the Partitioned Search phase. Not all use cases can be partitioned. Partitioning only works for use cases where the planning entities and value ranges can be split into n partitions, without any of the constraints crossing boundaries between partitions. OptaPy currently does not support partitioned search, but will support it in a future version.","title":"Partitioned search","component":"docs","version":"latest","name":"partitioned-search","url":"/docs/latest/partitioned-search/partitioned-search.html","titles":[{"text":"1. Algorithm description","hash":"partitionedSearchAlgorithm","id":1}]},"10":{"id":10,"text":"Solving a planning problem with OptaPy consists of the following steps: Model your planning problem as a class annotated with the @planning_solution decorator, for example the NQueens class. Configure a Solver, for example a First Fit and Tabu Search solver for any NQueens instance. Load a problem data set from your data layer, for example a Four Queens instance. That is the planning problem. Solve it with Solver.solve(problem) which returns the best solution found. Build a Solver instance with the SolverFactory. Create a SolverFactory by passing a SolverConfig to solver_factory_create. A SolverConfig can be created from a XML file, like so: from optapy import solver_config_create_from_xml_file import pathlib solver_config = solver_config_create_from_xml_file(pathlib.Path('solverConfig.xml')) solver_factory = solver_factory_create(solver_config) solver_factory.buildSolver().solve(generate_problem()) A solver configuration XML file looks like this: optapy.examples.domain.NQueens optapy.examples.domain.Queen optapy.examples.constraints.n_queens_constraints ... ... ... For XML elements that end in \"Class\" (solutionClass, entityClass, constraintProviderClass, etc.), put \"{module}.{name}\", where {module} is the module the class/function was defined in, and name is the name of the class/function. If the module is \"__main__\", put \"{name}\" instead. For instance, if the below code was in the main module: from optapy import constraint_provider, planning_solution from my.domain import MyEntity @planning_solution class MySolution: ... @constraint_provider def my_constraints(constraint_factory): ... Use \"my.domain.MyEntity\" to refer to \"MyEntity\", \"MySolution\" to refer to \"MySolution\", and \"my_constraints\" to refer to \"my_constraints\". Notice the three parts in it: Define the model. Define the score function. Optionally configure the optimization algorithm(s). These various parts of a configuration are explained further in this manual. OptaPy makes it relatively easy to switch optimization algorithm(s) just by changing the configuration. A solver configuration can also be configured with the SolverConfig API. This is especially useful to change some values dynamically at runtime. For example, to change the running time based on an environment variable, before building the Solver: import os import optapy import optapy.config import pathlib SOLVE_TIME_IN_MINUTES = os.environ['SOLVE_TIME_IN_MINUTES'] termination_config = optapy.config.solver.TerminationConfig() \\ .withMinutesSpentLimit(SOLVE_TIME_IN_MINUTES) solver_config = solver_config_create_from_xml_file(pathlib.Path('solverConfig.xml')) \\ .withTerminationConfig(termination_config) solver_factory = solver_factory_create(solver_config) solver_factory.buildSolver().solve(generate_problem()) Every element in the solver configuration XML is available as a *Config class or a property on a *Config class in the package optapy.config. These *Config classes are the Python representation of the XML format. They build the runtime components and assemble them into an efficient Solver. To configure a SolverFactory dynamically for each user request, build a template SolverConfig during initialization and copy it with the copy constructor for each user request: termination_config = optapy.config.solver.TerminationConfig() template = solver_config_create_from_xml_file(pathlib.Path('solverConfig.xml')) \\ .withTerminationConfig(termination_config) # Called concurrently from different threads def user_request(..., user_input): solver_config = optapy.config.solver.SolverConfig(template) # Copy it solver_config.getTerminationConfig().setMinutesSpentLimit(user_input) solver_factory = solver_factory_create(solver_config) solver = solver_factory.buildSolver(); ... Look at a dataset of your planning problem. You will recognize domain classes in there, each of which can be categorized as one of the following: An unrelated class: not used by any of the score constraints. From a planning standpoint, this data is obsolete. A problem fact class: used by the score constraints, but does NOT change during planning (as long as the problem stays the same). For example: Bed, Room, Shift, Employee, Topic, Period, …​ All the properties of a problem fact class are problem properties. A planning entity class: used by the score constraints and changes during planning. For example: BedDesignation, ShiftAssignment, Exam, …​ The properties that change during planning are planning variables. The other properties are problem properties. Ask yourself: What class changes during planning? Which class has variables that I want the Solver to change for me? That class is a planning entity. Most use cases have only one planning entity class. Most use cases also have only one planning variable per planning entity class. In xref:repeated-planning/repeated-planning.adoc#realTimePlanning[real-time planning], even though the problem itself changes, problem facts do not really change during planning, instead they change between planning (because the Solver temporarily stops to apply the problem fact changes). To create a good domain model, read the domain modeling guide. In OptaPy, all problem facts and planning entities are plain old Python Objects. Load them from a database, an XML file, a data repository, a REST service, a noSQL cloud; it doesn’t matter. A problem fact is any Python Object with getters that does not change during planning. For example in n queens, the columns and rows are problem facts: from optapy import problem_fact @problem_fact class Column: def __init__(self, index): self.index = index ... from optapy import problem_fact @problem_fact class Row: def __init__(self, index): self.index = index ... A problem fact can reference other problem facts of course: from optapy import problem_fact @problem_fact class Teacher: ... @problem_fact class Curriculum: ... @problem_fact class Course: code: str teacher: Teacher # Other problem fact lecture_size: int min_working_day_size: int curriculum_list: list[Curriculum] # Other problem facts student_size: int ... Unlike OptaPlanner, a problem fact class must be decorated with @problem_fact to be used in constraints. Generally, better designed domain classes lead to simpler and more efficient score constraints. Therefore, when dealing with a messy (denormalized) legacy system, it can sometimes be worthwhile to convert the messy domain model into a OptaPy specific model first. For example: if your domain model has two Teacher instances for the same teacher that teaches at two different departments, it is harder to write a correct score constraint that constrains a teacher’s spare time on the original model than on an adjusted model. Alternatively, you can sometimes also introduce a cached problem fact to enrich the domain model for planning only. A planning entity is a Python Object that changes during solving, for example a Queen that changes to another row. A planning problem has multiple planning entities, for example for a single n queens problem, each Queen is a planning entity. But there is usually only one planning entity class, for example the Queen class. A planning entity class needs to be decorated with the @planning_entity decorator. Each planning entity class has one or more planning variables (which can be genuine or shadows). It should also have one or more defining properties. For example in n queens, a Queen is defined by its Column and has a planning variable Row. This means that a Queen’s column never changes during solving, while its row does change. from optapy import planning_entity @planning_entity class Queen: column: Column # Planning variables: changes during planning, between score calculations. row: Row # ... getters and setters A planning entity class can have multiple planning variables. For example, a Lecture is defined by its Course and its index in that course (because one course has multiple lectures). Each Lecture needs to be scheduled into a Period and a Room so it has two planning variables (period and room). For example: the course Mathematics has eight lectures per week, of which the first lecture is Monday morning at 08:00 in room 212. from optapy import planning_entity @planning_entity class Lecture: course: Course lectureIndexInCourse: int # Planning variables: changes during planning, between score calculations. period: Period room: Room ... The solver configuration needs to declare each planning entity class: ... optapy.examples.domain.Queen ... Some uses cases have multiple planning entity classes. For example: route freight and trains into railway network arcs, where each freight can use multiple trains over its journey and each train can carry multiple freights per arc. Having multiple planning entity classes directly raises the implementation complexity of your use case. Do not create unnecessary planning entity classes. This leads to difficult Move implementations and slower score calculation. For example, do not create a planning entity class to hold the total free time of a teacher, which needs to be kept up to date as the Lecture planning entities change. Instead, calculate the free time in the score constraints (or as a shadow variable) and put the result per teacher into a logically inserted score object. If historic data needs to be considered too, then create problem fact to hold the total of the historic assignments up to, but not including, the planning window (so that it does not change when a planning entity changes) and let the score constraints take it into account. Planning entity __hash__(self) implementations must remain constant. Therefore entity __hash__(self) must not depend on any planning variables. Pay special attention when using data structures with auto-generated __hash__(self) as entities, such as Python @dataclass. Planning entity difficulty is not yet supported, but will be in a future version. A planning variable is a Python property (so a getter and setter) on a planning entity. It points to a planning value, which changes during planning. For example, a Queen's row property is a genuine planning variable. Note that even though a Queen's row property changes to another Row during planning, no Row instance itself is changed. Normally planning variables are genuine, but advanced cases can also have shadows. A genuine planning variable getter needs to be annotated with the @planning_variable annotation, which needs a non-empty variable_type and value_range_provider_refs property. from optapy import planning_entity, planning_variable @planning_entity class Queen: # ... row: Row # Alternatively, @planning_variable(Row, [\"row_range\"]) @planning_variable(variable_type = Row, value_range_provider_refs = [\"row_range\"]) def get_row(self): return self.row def set_row(self, row): self.row = row The variable_type property define the type of planning values this planning variable takes. The variable_type does not need to be decorated with @problem_fact; it can be any Python type. The value_range_provider_refs property defines what are the possible planning values for this planning variable. It references one or more @ValueRangeProvider id's. By default, an initialized planning variable cannot be None, so an initialized solution will never use None for any of its planning variables. In an over-constrained use case, this can be counterproductive. For example: in task assignment with too many tasks for the workforce, we would rather leave low priority tasks unassigned instead of assigning them to an overloaded worker. To allow an initialized planning variable to be None, set nullable to True: @planning_variable(..., nullable = True) def get_worker(self): return self.worker Constraint Streams filter out planning entities with a None planning variable by default. Use forEachIncludingNullVars() to avoid such unwanted behaviour. OptaPy will automatically add the value None to the value range. There is no need to add None in a collection provided by a @value_range_provider. Using a nullable planning variable implies that your score calculation is responsible for punishing (or even rewarding) variables with a None value. Currently chained planning variables are not compatible with nullable. Repeated planning (especially real-time planning) does not mix well with a nullable planning variable. Every time the Solver starts or a problem fact change is made, the Construction Heuristics will try to initialize all the None variables again, which can be a huge waste of time. One way to deal with this is to filter the entity selector of the placer in the construction heuristic. ... ... ... ... ... A planning variable is considered initialized if its value is not None or if the variable is nullable. So a nullable variable is always considered initialized. A planning entity is initialized if all of its planning variables are initialized. A solution is initialized if all of its planning entities are initialized. A planning value is a possible value for a genuine planning variable. Usually, a planning value is a problem fact, but it can also be any object, for example an int. It can even be another planning entity or even an interface implemented by both a planning entity and a problem fact. A planning value range is the set of possible planning values for a planning variable. This set can be a countable (for example row 1, 2, 3 or 4) or uncountable (for example any float between 0.0 and 1.0). The value range of a planning variable is defined with the @value_range_provider decorator. A @value_range_provider decorator always has a property range_id, which is referenced by the @planning_variable's property value_range_provider_refs. This annotation can be located on two types of methods: On the Solution: All planning entities share the same value range. On the planning entity: The value range differs per planning entity. This is less common. A @value_range_provider annotation needs to be on a member in a class with a @planning_solution or a @planning_entity annotation. It is ignored on parent classes or subclasses without those annotations. The return type of that method can be two types: List: The value range is defined by a list of its possible values. ValueRange: The value range is defined by its bounds. This is less common. All instances of the same planning entity class share the same set of possible planning values for that planning variable. This is the most common way to configure a value range. The @planning_solution implementation has method that returns a list (or a ValueRange). Any value from that list is a possible planning value for this planning variable. @planning_variable(Row, value_range_provider_refs = {\"row_range\"}) def get_row(self): return self.row from optapy import planning_solution, value_range_provider, problem_fact_collection_property @planning_solution class NQueens: # ... @value_range_provider(range_id = \"row_range\") def get_row_list(self): return self.row_list That list (or ValueRange) must not contain the value null, not even for a nullable planning variable. Each planning entity has its own value range (a set of possible planning values) for the planning variable. For example, if a teacher can never teach in a room that does not belong to his department, lectures of that teacher can limit their room value range to the rooms of his department. @planning_variable(value_range_provider_refs = [\"department_room_range\"]) def get_room(self): return self.room @value_range_provider(range_id = \"department_room_range\") def get_possible_room_list(self): return self.course.teacher.department.room_list Never use this to enforce a soft constraint (or even a hard constraint when the problem might not have a feasible solution). For example: Unless there is no other way, a teacher cannot teach in a room that does not belong to his department. In this case, the teacher should not be limited in his room value range (because sometimes there is no other way). By limiting the value range specifically of one planning entity, you are effectively creating a built-in hard constraint. This can have the benefit of severely lowering the number of possible solutions; however, it can also take away the freedom of the optimization algorithms to temporarily break that constraint in order to escape from a local optimum. A planning entity should not use other planning entities to determine its value range. That would only try to make the planning entity solve the planning problem itself and interfere with the optimization algorithms. Every entity has its own list instance, unless multiple entities have the same value range. For example, if teacher A and B belong to the same department, they use the same list instance. Furthermore, each list contains a subset of the same set of planning value instances. For example, if department A and B can both use room X, then their list instances contain the same Room instance. A @value_range_provider on the planning entity consumes more memory than @value_range_provider on the Solution and disables certain automatic performance optimizations. A @value_range_provider on the planning entity is not currently compatible with a chained variable. Instead of a Collection, you can also return a ValueRange or CountableValueRange, built by the ValueRangeFactory: from optapy import planning_solution, value_range_provider from optapy.types import CountableValueRange, ValueRangeFactory @value_range_provider(range_id = \"delay_range\", value_range_type = CountableValueRange) def get_delay_range(self): return ValueRangeFactory.createIntValueRange(0, 5000) A ValueRange uses far less memory, because it only holds the bounds. In the example above, a list would need to hold all 5000 ints, instead of just the two bounds. Furthermore, an incrementUnit can be specified, for example if you have to buy stocks in units of 200 pieces: from optapy import planning_solution, value_range_provider from optapy.types import CountableValueRange, ValueRangeFactory @value_range_provider(range_id = \"stock_amount_range\", value_range_type = CountableValueRange) def get_stock_amount_range(self) { # Range: 0, 200, 400, 600, ..., 9999600, 9999800, 10000000 return ValueRangeFactory.createIntValueRange(0, 10000000, 200); } Return CountableValueRange instead of ValueRange whenever possible (so OptaPy knows that it’s countable). The ValueRangeFactory has creation methods for several value class types: boolean: A boolean range. int: A 32bit integer range. long: A 64bit integer range. double: A 64bit floating point range which only supports random selection (because it does not implement CountableValueRange). BigInteger: An arbitrary-precision integer range. BigDecimal: A decimal point range. By default, the increment unit is the lowest non-zero value in the scale of the bounds. Temporal (such as LocalDate, LocalDateTime, …​): A time range. Value range providers can be combined, for example: @planning_variable(value_range_provider_refs = [\"company_car_range\", \"personal_car_range\"]) def get_car(self): return self.car } @value_range_provider(id = \"company_car_range\") def get_company_car_list(self): return self.company_car_list @value_range_provider(id = \"personal_car_range\") def get_personal_car_list(self): return self.personal_car_list Planning value difficulty is not yet supported, but will be in a future version. In some use cases, such as Vehicle Routing and Task Assignment, it is more convenient to model the planning variables as a list. For example, the list of customers a vehicle visits, or the list of tasks a person does. In OptaPy, this is accomplished by using planning list variables. For a planning list variable with value range \"value_range\": The order of elements inside the list is significant All values in \"value_range\" appear in exactly one planning entity’s planning list variable To declare a planning list variable, use the @planning_list_variable decorator: from optapy import planning_entity, planning_list_variable @planning_entity class Vehicle: def __init__(self, _id, capacity, depot, customer_list=None): self.id = _id self.capacity = capacity self.depot = depot if customer_list is None: self.customer_list = [] else: self.customer_list = customer_list @planning_list_variable(Customer, ['customer_range']) def get_customer_list(self): return self.customer_list ... The getter for @planning_list_variable can never return None. Some use cases, such as TSP and Vehicle Routing, require chaining. This means the planning entities point to each other and form a chain. By modeling the problem as a set of chains (instead of a set of trees/loops), the search space is heavily reduced. Planning list variables can also be used for these use cases A planning variable that is chained either: Directly points to a problem fact (or planning entity), which is called an anchor. Points to another planning entity with the same planning variable, which recursively points to an anchor. Here are some examples of valid and invalid chains: Every initialized planning entity is part of an open-ended chain that begins from an anchor. A valid model means that: A chain is never a loop. The tail is always open. Every chain always has exactly one anchor. The anchor is never an instance of the planning entity class that contains the chained planning variable. A chain is never a tree, it is always a line. Every anchor or planning entity has at most one trailing planning entity. Every initialized planning entity is part of a chain. An anchor with no planning entities pointing to it, is also considered a chain. A planning problem instance given to the Solver must be valid. If your constraints dictate a closed chain, model it as an open-ended chain (which is easier to persist in a database) and implement a score constraint for the last entity back to the anchor. The optimization algorithms and built-in Moves do chain correction to guarantee that the model stays valid: A custom Move implementation must leave the model in a valid state. For example, in TSP the anchor is a Domicile (in vehicle routing it is Vehicle): from optapy import problem_fact, planning_entity, planning_variable from optapy.types import PlanningVariableGraphType @problem_fact class Standstill: def get_city(self): raise NotImplementedError() @problem_fact class Domicile(Standstill): # ... def get_city(self): return self.city @planning_entity class Visit(Standstill): # ... @planning_variable(Standstill, value_range_provider_refs=['domicile_range', 'visit_range'], graph_type=PlanningVariableGraphType.CHAINED) def get_previous_standstill(self): return self.previous_standstill def set_previous_standstill(self, previous_standstill): self.previous_standstill = previous_standstill Notice how two value range providers are usually combined: The value range provider that holds the anchors, for example domicile_list. The value range provider that holds the initialized planning entities, for example visit_list. A dataset for a planning problem needs to be wrapped in a class for the Solver to solve. That solution class represents both the planning problem and (if solved) a solution. It is decorated with a @planning_solution decorator. For example in n queens, the solution class is the NQueens class, which contains a Column list, a Row list, and a Queen list. A planning problem is actually an unsolved planning solution or - stated differently - an uninitialized solution. For example in n queens, that NQueens class has the @planning_solution annotation, yet every Queen in an unsolved NQueens class is not yet assigned to a Row (their row property is null). That’s not a feasible solution. It’s not even a possible solution. It’s an uninitialized solution. A solution class holds all problem facts, planning entities and a score. It is annotated with a @PlanningSolution annotation. For example, an NQueens instance holds a list of all columns, all rows and all Queen instances: from optapy import planning_solution from optapy.score import SimpleScore @planning_solution class NQueens: # Problem facts n: int column_list: list[Column] row_list: list[Row] # Planning entities queen_list: list[Queen] score: SimpleScore ... The solver configuration needs to declare the planning solution class: ... optapy.examples.domain.NQueens ... OptaPy needs to extract the entity instances from the solution instance. It gets those collection(s) by calling every getter that is annotated with @planning_entity_collection_property: from optapy import planning_solution, planning_entity_collection_property @planning_solution class NQueens : # ... queen_list: list[Queen] @planning_entity_collection_property(Queen) def get_queen_list(self): return self.queen_list There can be multiple @planning_entity_collection_property decorated getters. Those can even return a list with the same entity class type. A @planning_entity_collection_property annotation needs to be on a getter in a class with a @planning_solution decorator. It is ignored on parent classes or subclasses without that decorator. In rare cases, a planning entity might be a singleton: use planning_entity_property on its getter instead. A @planning_solution class requires a score property (or field), which is annotated with a @planning_score annotation. The score property is None if the score hasn’t been calculated yet. The score property is typed to the specific Score implementation of your use case. For example, NQueens uses a SimpleScore: from optapy import planning_solution, planning_score from optapy.score import SimpleScore @planning_solution class NQueens: # ... score: SimpleScore @planning_score(SimpleScore) def get_score(self): return self.score def set_score(self, score): self.score = score Most use cases use a HardSoftScore instead: @planning_solution class CloudBalance: # ... score: HardSoftScore @planning_score(HardSoftScore) def get_score(self): return self.score def set_score(self, score): self.score = score Some use cases use other score types. For Constraint Streams score calculation, OptaPlanner needs to extract the problem fact instances from the solution instance. It gets those collection(s) by calling every method (or field) that is annotated with @problem_fact_collection_property. All objects returned by those methods are available to use by Constraint Streams. For example in NQueens all Column and Row instances are problem facts. from optapy import planning_solution, problem_fact_collection_property @planning_solution class NQueens: # ... column_list: list[Column] row_list: list[Row] @problem_fact_collection_property(Column) def get_column_list(self): return self.column_list @problem_fact_collection_property(Row) def get_row_list(self): return self.row_list All planning entities are automatically inserted into the working memory. Do not add @problem_fact_collection_property on their properties. The problem facts methods are not called often: at most only once per solver phase per solver thread. There can be multiple @problem_fact_collection_property annotated members. Those can even return a list with the same class type, but they shouldn’t return the same instance twice. A @problem_fact_collection_property annotation needs to be on a member in a class with a @planning_solution annotation. It is ignored on parent classes or subclasses without that annotation. In rare cases, a problem fact might be a singleton: use @problem_fact_property on its method instead. A cached problem fact is a problem fact that does not exist in the real domain model, but is calculated before the Solver really starts solving. The problem facts methods have the opportunity to enrich the domain model with such cached problem facts, which can lead to simpler and faster score constraints. For example in examination, a cached problem fact TopicConflict is created for every two Topics which share at least one Student. @problem_fact_collection_property(TopicConflict) def calculate_topic_conflict_list(self): list[TopicConflict]: topic_conflict_list = [] for left_topic in self.topic_list: for right_topic in self.topic_list: if left_topic.topic_id 0: topic_conflict_list.append(TopicConflict(left_topic, right_topic, student_size)) return topic_conflict_list; Where a score constraint needs to check that no two exams with a topic that shares a student are scheduled close together (depending on the constraint: at the same time, in a row, or in the same day), the TopicConflict instance can be used as a problem fact, rather than having to combine every two Student instances. Most (if not all) optimization algorithms clone the solution each time they encounter a new best solution (so they can recall it later) or to work with multiple solutions in parallel. There are many ways to clone, such as a shallow clone, deep clone, …​ This context focuses on a planning clone. A planning clone of a solution must fulfill these requirements: The clone must represent the same planning problem. Usually it reuses the same instances of the problem facts and problem fact collections as the original. The clone must use different, cloned instances of the entities and entity collections. Changes to an original solution entity’s variables must not affect its clone. Implementing a planning clone method is hard, therefore you do not need to implement it. This SolutionCloner is used by default. It works well for most use cases. When the FieldAccessingSolutionCloner clones one of your collections or maps, it may not recognize the implementation and replace it with list, set or map (whichever is more applicable). The FieldAccessingSolutionCloner does not clone problem facts by default. If any of your problem facts needs to be deep cloned for a planning clone, for example if the problem fact references a planning entity or the planning solution, mark its class with a @deep_planning_clone decorator: from optapy import problem_fact, deep_planning_clone @problem_fact @deep_planning_clone class SeatDesignationDependency: left_seat_designation: SeatDesignation # planning entity right_seat_designation: SeatDesignation # planning entity ... In the example above, because SeatDesignationDependency references the planning entity SeatDesignation (which is deep planning cloned automatically), it should also be deep planning cloned. Alternatively, the @deep_planning_clone decorator also works on a getter method to planning clone it. If that property is a list or a map, it will shallow clone it and deep planning clone any element thereof that is an instance of a class that has a @deep_planning_clone decorator. Create a @planning_solution class instance to represent your planning problem’s dataset, so it can be set on the Solver as the planning problem to solve. For example in n queens, an NQueens instance is created with the required Column and Row instances and every Queen set to a different column and every row set to null. def create_n_queens(n: int) -> NQueens: n_queens = NQueens() n_queens.n = n n_queens.column_list = create_column_list(n_queens) n_queens.row_list = create_row_list(n_queens) n_queens.queen_list = create_queen_list(n_queens) return n_queens def create_queen_list(n_queens: NQueens) -> list[Queen]: n = n_queens.n queen_list = [] queen_id = 0 for column in n_queens.column_list: queen = Queen() queen.queen_id = id queen_id += 1 queen.column = column; # Notice that we leave the PlanningVariable properties as None queen_list.append(queen); return queen_list; Figure 1. Uninitialized Solution for the Four Queens Puzzle Usually, most of this data comes from your data layer, and your solution implementation just aggregates that data and creates the uninitialized planning entity instances to plan: def create_lecture_list(schedule: CourseSchedule): course_list = schedule.course_list lecture_list = [] lecture_id = 0 for course in course_list: for i in range(course.lecture_size): lecture = Lecture() lecture.lecture_id = lecture_id lecture_id += 1 lecture.course = course lecture.lecture_index_in_course = i # Notice that we leave the PlanningVariable properties (period and room) as None lecture_list.append(lecture) schedule.lecture_list = lecture_list A Solver solves your planning problem. A Solver can only solve one planning problem instance at a time. It is built with a SolverFactory, there is no need to implement it yourself. A Solver should only be accessed from a single thread, except for the methods that are specifically documented in javadoc as being thread-safe. The solve() method hogs the current thread. This can cause HTTP timeouts for REST services and it requires extra code to solve multiple datasets in parallel. To avoid such issues, use a SolverManager instead. Solving a problem is quite easy once you have: A Solver built from a solver configuration A @planning_solution that represents the planning problem instance Just provide the planning problem as argument to the solve() method and it will return the best solution found: problem = ... best_solution = solver.solve(problem) For example in n queens, the solve() method will return an NQueens instance with every Queen assigned to a Row. Figure 2. Best Solution for the Four Queens Puzzle in 8ms (Also an Optimal Solution) The solve(Solution) method can take a long time (depending on the problem size and the solver configuration). The Solver intelligently wades through the search space of possible solutions and remembers the best solution it encounters during solving. Depending on a number of factors (including problem size, how much time the Solver has, the solver configuration, …​), that best solution might or might not be an optimal solution. The solution instance given to the method solve(solution) is changed by the Solver, but do not mistake it for the best solution. The solution instance returned by the methods solve(solution) or getBestSolution() is most likely a planning clone of the instance given to the method solve(solution), which implies it is a different instance. The solution instance given to the solve(Solution) method does not need to be uninitialized. It can be partially or fully initialized, which is often the case in repeated planning. The environment mode allows you to detect common bugs in your implementation. It does not affect the logging level. You can set the environment mode in the solver configuration XML file: FAST_ASSERT ... A solver has a single Random instance. Some solver configurations use the Random instance a lot more than others. For example, Simulated Annealing depends highly on random numbers, while Tabu Search only depends on it to deal with score ties. The environment mode influences the seed of that Random instance. These are the environment modes: The FULL_ASSERT mode turns on all assertions (such as assert that the incremental score calculation is uncorrupted for each move) to fail-fast on a bug in a Move implementation, a constraint, the engine itself, …​ This mode is reproducible (see the reproducible mode). It is also intrusive because it calls the method calculateScore() more frequently than a non-assert mode. The FULL_ASSERT mode is horribly slow (because it does not rely on incremental score calculation). The NON_INTRUSIVE_FULL_ASSERT turns on several assertions to fail-fast on a bug in a Move implementation, a constraint, the engine itself, …​ This mode is reproducible (see the reproducible mode). It is non-intrusive because it does not call the method calculateScore() more frequently than a non assert mode. The NON_INTRUSIVE_FULL_ASSERT mode is horribly slow (because it does not rely on incremental score calculation). The FAST_ASSERT mode turns on most assertions (such as assert that an undoMove’s score is the same as before the Move) to fail-fast on a bug in a Move implementation, a constraint, the engine itself, …​ This mode is reproducible (see the reproducible mode). It is also intrusive because it calls the method calculateScore() more frequently than a non assert mode. The FAST_ASSERT mode is slow. It is recommended to write a test case that does a short run of your planning problem with the FAST_ASSERT mode on. The reproducible mode is the default mode because it is recommended during development. In this mode, two runs in the same OptaPlanner version will execute the same code in the same order. Those two runs will have the same result at every step, except if the note below applies. This enables you to reproduce bugs consistently. It also allows you to benchmark certain refactorings (such as a score constraint performance optimization) fairly across runs. Despite the reproducible mode, your application might still not be fully reproducible because of: Use of set (or another Collection which has an inconsistent order between Python runs) for collections of planning entities or planning values (but not normal problem facts), especially in the solution implementation. Combining a time gradient dependent algorithms (most notably Simulated Annealing) together with time spent termination. A sufficiently large difference in allocated CPU time will influence the time gradient values. Replace Simulated Annealing with Late Acceptance. Or instead, replace time spent termination with step count termination. The reproducible mode can be slightly slower than the non-reproducible mode. If your production environment can benefit from reproducibility, use this mode in production. In practice, this mode uses the default, fixed random seed if no seed is specified, and it also disables certain concurrency optimizations (such as work stealing). The non-reproducible mode can be slightly faster than the reproducible mode. Avoid using it during development as it makes debugging and bug fixing painful. If your production environment doesn’t care about reproducibility, use this mode in production. In practice, this mode uses no fixed random seed if no seed is specified. The best way to illuminate the black box that is a Solver, is to play with the logging level: error: Log errors, except those that are thrown to the calling code as a RuntimeException. If an error happens, OptaPy normally fails fast. It does not log it as an error itself to avoid duplicate log messages. Meanwhile, the code is disrupted from doing further harm or obfuscating the error. warn: Log suspicious circumstances. info: Log every phase and the solver itself. See scope overview. debug: Log every step of every phase. See scope overview. trace: Log every move of every step of every phase. See scope overview. Turning on trace logging, will slow down performance considerably: it is often four times slower. However, it is invaluable during development to discover a bottleneck. Even debug logging can slow down performance considerably for fast stepping algorithms (such as Late Acceptance and Simulated Annealing), but not for slow stepping algorithms (such as Tabu Search). Both cause congestion in multithreaded solving with most appenders, see below.. For example, set it to debug logging, to see when the phases end and how fast steps are taken: INFO Solving started: time spent (3), best score (-4init/0), random (JDK with seed 0). DEBUG CH step (0), time spent (5), score (-3init/0), selected move count (1), picked move (Queen-2 {null -> Row-0}). DEBUG CH step (1), time spent (7), score (-2init/0), selected move count (3), picked move (Queen-1 {null -> Row-2}). DEBUG CH step (2), time spent (10), score (-1init/0), selected move count (4), picked move (Queen-3 {null -> Row-3}). DEBUG CH step (3), time spent (12), score (-1), selected move count (4), picked move (Queen-0 {null -> Row-1}). INFO Construction Heuristic phase (0) ended: time spent (12), best score (-1), score calculation speed (9000/sec), step total (4). DEBUG LS step (0), time spent (19), score (-1), best score (-1), accepted/selected move count (12/12), picked move (Queen-1 {Row-2 -> Row-3}). DEBUG LS step (1), time spent (24), score (0), new best score (0), accepted/selected move count (9/12), picked move (Queen-3 {Row-3 -> Row-2}). INFO Local Search phase (1) ended: time spent (24), best score (0), score calculation speed (4000/sec), step total (2). INFO Solving ended: time spent (24), best score (0), score calculation speed (7000/sec), phase total (2), environment mode (REPRODUCIBLE). All time spent values are in milliseconds. Configure the logging level by explicitly calling logging.getLogger('optapy').setLevel(logging.LEVEL): import logging logging.getLogger('optapy').setLevel(logging.DEBUG) By default, INFO logging is used. OptaPy currently does not support metric export. Many heuristics and metaheuristics depend on a pseudorandom number generator for move selection, to resolve score ties, probability based move acceptance, …​ During solving, the same Random instance is reused to improve reproducibility, performance and uniform distribution of random values. To change the random seed of that Random instance, specify a randomSeed: 0 ... To change the pseudorandom number generator implementation, specify a randomType: MERSENNE_TWISTER ... The following types are supported: JDK (default): Standard implementation (java.util.Random). MERSENNE_TWISTER: Implementation by Commons Math. WELL512A, WELL1024A, WELL19937A, WELL19937C, WELL44497A and WELL44497B: Implementation by Commons Math. For most use cases, the randomType has no significant impact on the average quality of the best solution on multiple datasets. A SolverManager is a facade for one or more Solver instances to simplify solving planning problems in REST and other enterprise services. Unlike the Solver.solve(…​) method: SolverManager.solve(…​) returns immediately: it schedules a problem for asynchronous solving without blocking the calling thread. This avoids timeout issues of HTTP and other technologies. SolverManager.solve(…​) solves multiple planning problems of the same domain, in parallel. Internally a SolverManager manages a thread pool of solver threads, which call Solver.solve(…​), and a thread pool of consumer threads, which handle best solution changed events. Build a SolverManager instance with the solver_manager_create(…​) method: from optapy import solver_manager_create, solver_config_create_from_xml_file from optapy.types import Duration solver_config = solver_config_create_from_xml_file(\"solverConfig.xml\") solver_manager = solver_manager_create(solver_config) Each problem submitted to the SolverManager.solve(…​) methods needs a unique problem ID. Later calls to getSolverStatus(problemId) or terminateEarly(problemId) use that problem ID to distinguish between the planning problems. The problem ID must be an immutable class, such as int, str or uuid. To retrieve the best solution, after solving terminates normally, use SolverJob.getFinalBestSolution(): import uuid problem1 = ... problem_id = uuid.uuid4() # Returns immediately solver_job = solver_manager.solve(problem_id, problem1) ... solution1 = solver_job.getFinalBestSolution() However, there are better approaches, both for solving batch problems before an end-user needs the solution as well as for live solving while an end-user is actively waiting for the solution, as explained below. The current SolverManager implementation runs on a single computer node, but future work aims to distribute solver loads across a cloud. At night, batch solving is a great approach to deliver solid plans by breakfast, because: There are typically few or no problem changes in the middle of the night. Some organizations even enforce a deadline, for example, submit all day off requests before midnight. The solvers can run for much longer, often hours, because nobody’s waiting for it and CPU resources are often cheaper. To solve a multiple datasets in parallel (limited by parallelSolverCount), call solve(…​) for each dataset: from optapy.types import SolverManager class TimeTableService: solver_manager: SolverManager # Returns immediately, call it for every dataset def solve_batch(self, time_table_id: int): solver_manager.solve(time_table_id, # Called once, when solving starts lambda the_id: self.find_by_id(the_id), # Called once, when solving ends lambda solution: self.save(solution)) def find_by_id(self, time_table_id: int) -> TimeTable: ... def save(self, time_table: TimeTable) -> None: ... A solid plan delivered by breakfast is great, even if you need to react on problem changes during the day. When a solver is running while an end-user is waiting for that solution, the user might need to wait for several minutes or hours before receiving a result. To assure the user that everything is going well, show progress by displaying the best solution and best score attained so far. To handle intermediate best solutions, use solveAndListen(…​): from optapy.types import SolverManager class TimeTableService: solver_manager: SolverManager # Returns immediately def solve_live(self, time_table_id: int) -> None: solver_manager.solveAndListen(time_table_id, # Called once, when solving starts lambda the_id: self.find_by_id(time_table_id), # Called multiple times, for every best solution change lambda solution: self.save(solution)) def find_by_id(self, time_table_id: int): ... def save(self, time_table: TimeTable) -> None: ... def stop_solving(self, time_table_id: int): solver_manager.terminateEarly(time_table_id) This implementation is using the database to communicate with the UI, which polls the database. More advanced implementations push the best solutions directly to the UI or a messaging queue. If the user is satisfied with the intermediate best solution and does not want to wait any longer for a better one, call SolverManager.terminateEarly(problemId).","title":"OptaPy configuration","component":"docs","version":"latest","name":"planner-configuration","url":"/docs/latest/planner-configuration/planner-configuration.html","titles":[{"text":"1. Overview","hash":"optapyConfigurationOverview","id":1},{"text":"2. Solver configuration","hash":"solverConfiguration","id":2},{"text":"2.1. Solver configuration by XML","hash":"solverConfigurationByXML","id":3},{"text":"2.2. Solver configuration by Python API","hash":"solverConfigurationByPythonAPI","id":4},{"text":"3. Model a planning problem","hash":"modelAPlanningProblem","id":5},{"text":"3.1. Is this class a problem fact or planning entity?","hash":"isThisClassAProblemFactOrPlanningEntity","id":6},{"text":"3.2. Problem fact","hash":"problemFact","id":7},{"text":"3.3. Planning entity","hash":"planningEntity","id":8},{"text":"3.3.1. Planning entity decorator","hash":"planningEntityDecorator","id":9},{"text":"3.3.2. Planning entity difficulty","hash":"planningEntityDifficulty","id":10},{"text":"3.4. Planning variable (genuine)","hash":"planningVariable","id":11},{"text":"3.4.1. Planning variable decorator","hash":"planningVariableDecorator","id":12},{"text":"3.4.2. Nullable planning variable","hash":"nullablePlanningVariable","id":13},{"text":"3.4.3. When is a planning variable considered initialized?","hash":"whenIsAPlanningVariableInitialized","id":14},{"text":"3.4.4. Planning value","hash":"planningValue","id":15},{"text":"3.4.5. Planning value range provider","hash":"planningValueRangeProvider","id":16},{"text":"Overview","hash":"planningValueRangeProviderOverview","id":17},{"text":"ValueRangeProvider on the solution","hash":"valueRangeProviderOnSolution","id":18},{"text":"ValueRangeProvider on the Planning Entity","hash":"valueRangeProviderOnPlanningEntity","id":19},{"text":"ValueRangeFactory","hash":"valueRangeFactory","id":20},{"text":"Combine ValueRangeProviders","hash":"combineValueRangeProviders","id":21},{"text":"3.4.6. Planning value strength","hash":"planningValueStrength","id":22},{"text":"3.4.7. Planning List Variable","hash":"planningListVariables","id":23},{"text":"3.4.8. Chained planning variable (TSP, VRP, …​)","hash":"chainedPlanningVariable","id":24},{"text":"3.5. Planning problem and planning solution","hash":"planningProblemAndPlanningSolution","id":25},{"text":"3.5.1. Planning problem instance","hash":"planningProblemInstance","id":26},{"text":"3.5.2. Solution class","hash":"solutionClass","id":27},{"text":"3.5.3. Planning entities of a solution (@planning_entity_collection_property)","hash":"planningEntitiesOfASolution","id":28},{"text":"3.5.4. Score of a Solution (@PlanningScore)","hash":"scoreOfASolution","id":29},{"text":"3.5.5. Problem facts of a solution (@problem_fact_collection_property)","hash":"problemFacts","id":30},{"text":"Cached problem fact","hash":"cachedProblemFact","id":31},{"text":"3.5.6. Cloning a solution","hash":"cloningASolution","id":32},{"text":"FieldAccessingSolutionCloner","hash":"fieldAccessingSolutionCloner","id":33},{"text":"3.5.7. Create an uninitialized solution","hash":"createAnUninitializedSolution","id":34},{"text":"4. Use the Solver","hash":"useTheSolver","id":35},{"text":"4.1. The Solver interface","hash":"theSolverInterface","id":36},{"text":"4.2. Solving a problem","hash":"solvingAProblem","id":37},{"text":"4.3. Environment mode: are there bugs in my code?","hash":"environmentMode","id":38},{"text":"4.3.1. FULL_ASSERT","hash":"environmentModeFullAssert","id":39},{"text":"4.3.2. NON_INTRUSIVE_FULL_ASSERT","hash":"environmentModeNonIntrusiveFullAssert","id":40},{"text":"4.3.3. FAST_ASSERT","hash":"environmentModeFastAssert","id":41},{"text":"4.3.4. REPRODUCIBLE (default)","hash":"environmentModeReproducible","id":42},{"text":"4.3.5. NON_REPRODUCIBLE","hash":"environmentModeProduction","id":43},{"text":"4.4. Logging level: what is the Solver doing?","hash":"logging","id":44},{"text":"4.5. Monitoring the solver","hash":"monitoring","id":45},{"text":"4.6. Random number generator","hash":"randomNumberGenerator","id":46},{"text":"5. SolverManager","hash":"solverManager","id":47},{"text":"5.1. Solve batch problems","hash":"solverManagerSolveBatch","id":48},{"text":"5.2. Solve and listen to show progress to the end-user","hash":"solverManagerSolveAndListen","id":49}]},"11":{"id":11,"text":"Every organization faces planning problems: providing products or services with a limited set of constrained resources (employees, assets, time and money). OptaPy optimizes such planning to do more business with less resources. This is known as Constraint Satisfaction Programming (which is part of the Operations Research discipline). OptaPy is a wrapper of the OptaPlanner constraint satisfaction engine which optimizes planning problems. It solves use cases such as: Employee shift rostering: timetabling nurses, repairmen, …​ Agenda scheduling: scheduling meetings, appointments, maintenance jobs, advertisements, …​ Educational timetabling: scheduling lessons, courses, exams, conference presentations, …​ Vehicle routing: planning vehicle routes (trucks, trains, boats, airplanes, …​) for moving freight and/or passengers through multiple destinations using known mapping tools …​ Bin packing: filling containers, trucks, ships, and storage warehouses with items, but also packing information across computer resources, as in cloud computing …​ Job shop scheduling: planning car assembly lines, machine queue planning, workforce task planning, …​ Cutting stock: minimizing waste while cutting paper, steel, carpet, …​ Sport scheduling: planning games and training schedules for football leagues, baseball leagues, …​ Financial optimization: investment portfolio optimization, risk spreading, …​ A planning problem has an optimal goal, based on limited resources and under specific constraints. Optimal goals can be any number of things, such as: Maximized profits - the optimal goal results in the highest possible profit. Minimized ecological footprint - the optimal goal has the least amount of environmental impact. Maximized satisfaction for employees or customers - the optimal goal prioritizes the needs of employees or customers. The ability to achieve these goals relies on the number of resources available, such as: The number of people. Amount of time. Budget. Physical assets, for example, machinery, vehicles, computers, buildings, etc. Specific constraints related to these resources must also be taken into account, such as the number of hours a person works, their ability to use certain machines, or compatibility between pieces of equipment. OptaPy helps PythonTM programmers solve constraint satisfaction problems efficiently. Under the hood, it combines optimization heuristics and metaheuristics with very efficient score calculation. All the use cases above are probably NP-complete/NP-hard, which means in layman’s terms: It’s easy to verify a given solution to a problem in reasonable time. There is no silver bullet to find the optimal solution of a problem in reasonable time (*). (*) At least, none of the smartest computer scientists in the world have found such a silver bullet yet. But if they find one for 1 NP-complete problem, it will work for every NP-complete problem. In fact, there’s a $ 1,000,000 reward for anyone that proves if such a silver bullet actually exists or not. The implication of this is pretty dire: solving your problem is probably harder than you anticipated, because the two common techniques won’t suffice: A Brute Force algorithm (even a smarter variant) will take too long. A quick algorithm, for example in bin packing, putting in the largest items first, will return a solution that is far from optimal. By using advanced optimization algorithms, OptaPy does find a near-optimal solution in reasonable time for such planning problems. Usually, a planning problem has at least two levels of constraints: A (negative) hard constraint must not be broken. For example: 1 teacher cannot teach 2 different lessons at the same time. A (negative) soft constraint should not be broken if it can be avoided. For example: Teacher A does not like to teach on Friday afternoon. Some problems have positive constraints too: A positive soft constraint (or reward) should be fulfilled if possible. For example: Teacher B likes to teach on Monday morning. Some basic problems (such as N queens]) only have hard constraints. Some problems have three or more levels of constraints, for example hard, medium and soft constraints. These constraints define the score calculation (AKA fitness function) of a planning problem. Each solution of a planning problem can be graded with a score. With OptaPy, score constraints are written in an Object Oriented language, such as PythonTM code. Such code is easy, flexible and scalable. A planning problem has a number of solutions. There are several categories of solutions: A possible solution is any solution, whether or not it breaks any number of constraints. Planning problems tend to have an incredibly large number of possible solutions. Many of those solutions are worthless. A feasible solution is a solution that does not break any (negative) hard constraints. The number of feasible solutions tends to be relative to the number of possible solutions. Sometimes there are no feasible solutions. Every feasible solution is a possible solution. An optimal solution is a solution with the highest score. Planning problems tend to have 1 or a few optimal solutions. There is always at least 1 optimal solution, even in the case that there are no feasible solutions and the optimal solution isn’t feasible. The best solution found is the solution with the highest score found by an implementation in a given amount of time. The best solution found is likely to be feasible and, given enough time, it’s an optimal solution. Counterintuitively, the number of possible solutions is huge (if calculated correctly), even with a small dataset. As you can see in the examples, most instances have a lot more possible solutions than the minimal number of atoms in the known universe (10^80). Because there is no silver bullet to find the optimal solution, any implementation is forced to evaluate at least a subset of all those possible solutions. OptaPy supports several optimization algorithms to efficiently wade through that incredibly large number of possible solutions. Depending on the use case, some optimization algorithms perform better than others, but it’s impossible to tell in advance. With OptaPy, it is easy to switch the optimization algorithm, by changing the solver configuration in a few lines of code. OptaPy is open source software, released under the Apache License 2.0. This license is very liberal and allows reuse for commercial purposes. Read the layman’s explanation. OptaPy is a solver for Python that uses a Java Virtual Machine underneath. To use OptaPy, install both Python 3.9 or later and Java Development Kit (JDK) 11 or later. OptaPy is available in the Python Package Index. OptaPy works with CPython. OptaPy is currently an alpha release under active development. Breaking changes may happen between releases while in alpha. OptaPlanner releases every month. Since OptaPy is a wrapper for OptaPlanner, it shares its release notes. Read the release notes of each release on our website. OptaPy is currently an alpha release under active development. Breaking changes may happen between releases while in alpha. For news and articles, check our blog, twitter (including Geoffrey’s twitter) and facebook. If you’re happy with OptaPy, make us happy by posting a tweet or blog article about it. Public questions are welcome on here. Bugs and feature requests are welcome in our issue tracker. Pull requests are very welcome on GitHub and get priority treatment! By open sourcing your improvements, you’ll benefit from our peer review and from our improvements made on top of your improvements. OptaPy is available in the Python Package Index (PyPI) as the optapy project. To install, run the following command: pip install optapy Prerequisites Set up Git. Authenticate on GitHub using either HTTPS or SSH. See GitHub for more information about setting up and authenticating Git. Install the python build module Build and run the examples from source. Clone optapy from GitHub (or alternatively, download the zipball): $ git clone https://github.com/optapy/optapy.git ... Build it with Python: $ cd optapy-core $ python -m build ... The first time, the build might take a long time, because it needs to download jars. Install the built package to a virtual environment $ cp dist/optapy-*-py3-none-any.whl path/to/my/application $ cd path/to/my/application $ source my-application-venv/bin/activate $ pip install optapy-*-py3-none-any.whl Edit the sources in your favorite IDE.","title":"OptaPy Introduction","component":"docs","version":"latest","name":"planner-introduction","url":"/docs/latest/planner-introduction/planner-introduction.html","titles":[{"text":"1. What is OptaPy","hash":"whatIsOptaPy","id":1},{"text":"2. What is a planning problem?","hash":"whatIsAPlanningProblem","id":2},{"text":"2.1. A planning problem is NP-complete or NP-hard","hash":"aPlanningProblemIsNPCompleteOrNPHard","id":3},{"text":"2.2. A planning problem has (hard and soft) constraints","hash":"aPlanningProblemHasConstraints","id":4},{"text":"2.3. A planning problem has a huge search space","hash":"aPlanningProblemHasAHugeSearchSpace","id":5},{"text":"3. Requirements","hash":"requirements","id":6},{"text":"4. Governance","hash":"governance","id":7},{"text":"4.1. Status of OptaPy","hash":"statusOfOptaPy","id":8},{"text":"4.2. Release notes","hash":"releaseNotes","id":9},{"text":"4.3. Backwards compatibility","hash":"backwardsCompatibility","id":10},{"text":"4.4. Community and support","hash":"communityAndSupport","id":11},{"text":"5. Use OptaPy with pip","hash":"pip","id":12},{"text":"5.1. Build OptaPy from source","hash":"buildFromSource","id":13}]},"12":{"id":12,"text":"This guide walks you through the process of creating a simple Python application with OptaPy’s constraint solving Artificial Intelligence (AI). Feel free to follow along in the OptaPy Jupyter notebook. You will build a command-line application that optimizes a school timetable for students and teachers: Create a new Python virtual environment. python3 -m venv optapy-env Activate the Python virtual environment. source optapy-env/bin/activate Use pip to install OptaPy. python3 -m pip install optapy In school timetabling, we need to assign a list of lessons to timeslots and rooms. Additionally, there are some constraints: A room can have at most one lesson at the same time. A teacher can teach at most one lesson at the same time. A student can attend at most one lesson at the same time. A teacher prefers to teach all lessons in the same room. A teacher prefers to teach sequential lessons and dislikes gaps between lessons. A student dislikes sequential lessons on the same subject. The Objects used in constraints are known as the domain of the problem. In school timetabling, the domain consist of lessons, rooms and timeslots. Problem facts do not change throughout solving. Rooms and timeslots are examples of problem facts. Create a domain.py file with the following code to create the Room class: from optapy import problem_fact, planning_id @problem_fact class Room: def __init__(self, id, name): self.id = id self.name = name @planning_id def get_id(self): return self.id def __str__(self): return f\"Room(id={self.id}, name={self.name})\" The @problem_fact decorator registers the class as a problem fact, which allows it to be used in constraints. The @planning_id decorator registers getId as the planning ID for Room. OptaPy requires a planning ID for some functionality, such as generating unique pairs. The planning ID should be unique for instances of the same class. Now, in domain.py, let’s add the following code to create the Timeslot class: @problem_fact class Timeslot: def __init__(self, id, day_of_week, start_time, end_time): self.id = id self.day_of_week = day_of_week self.start_time = start_time self.end_time = end_time @planning_id def get_id(self): return self.id def __str__(self): return ( f\"Timeslot(\" f\"id={self.id}, \" f\"day_of_week={self.day_of_week}, \" f\"start_time={self.start_time}, \" f\"end_time={self.end_time})\" ) Planning entities change throughout solving. Lesson is a planning entity, since its room and timeslot properties change throughout solving. Since the room and timeslot properties change throughout solving, they are known as planning variables. Let’s add the following code to domain.py to create the Lesson class. from optapy import planning_entity, planning_variable @planning_entity class Lesson: def __init__(self, id, subject, teacher, student_group, timeslot=None, room=None): self.id = id self.subject = subject self.teacher = teacher self.student_group = student_group self.timeslot = timeslot self.room = room @planning_id def get_id(self): return self.id @planning_variable(Timeslot, [\"timeslotRange\"]) def get_timeslot(self): return self.timeslot def set_timeslot(self, new_timeslot): self.timeslot = new_timeslot @planning_variable(Room, [\"roomRange\"]) def get_room(self): return self.room def set_room(self, new_room): self.room = new_room def __str__(self): return ( f\"Lesson(\" f\"id={self.id}, \" f\"timeslot={self.timeslot}, \" f\"room={self.room}, \" f\"teacher={self.teacher}, \" f\"subject={self.subject}, \" f\"student_group={self.student_group}\" f\")\" ) The @planning_entity decorator registers the class as a planning entity, which allows OptaPy to assign its planning variables and for it to be used in constraints. The @planning_variable(variable_type, [value_range_provider_refs…​]) decorator registers a method as the getter of a planning variable. The getter must be named get and the setter must be named set. The first argument, variable_type, tells OptaPy what type of values OptaPy can assign to this planning variable. The second argument, value_range_provider_refs, tells OptaPy what value ranges it takes its values from. We will explain value ranges later in this example. Constraints define the score calculation, or the fitness function, of a planning problem. Each solution of a planning problem is graded with a score. A score represents the quality of a specific solution. The higher the score the better. OptaPy looks for the best solution, which is the solution with the highest score found in the available time. It might or might not be the optimal solution. Because this use case has hard and soft constraints, use the HardSoftScore class to represent the score: Hard constraints must not be broken. For example: A room can have at most one lesson at the same time. Soft constraints should not be broken. For example: A teacher prefers to teach in a single room. Hard constraints are weighted against other hard constraints. Soft constraints are weighted too, against other soft constraints. Hard constraints always outweigh soft constraints, regardless of their respective weights. To calculate the score, create a constraint provider function in the file constraints.py: from domain import Lesson, Room from optapy import constraint_provider from optapy.constraint import Joiners, ConstraintFactory from optapy.score import HardSoftScore @constraint_provider def define_constraints(constraint_factory: ConstraintFactory): return [ # Hard constraints room_conflict(constraint_factory), teacher_conflict(constraint_factory), student_group_conflict(constraint_factory), # Soft constraints are only implemented in the optapy-quickstarts code ] def room_conflict(constraint_factory: ConstraintFactory): # A room can accommodate at most one lesson at the same time. return constraint_factory.for_each(Lesson) \\ .join(Lesson, # ... in the same timeslot ... Joiners.equal(lambda lesson: lesson.timeslot), # ... in the same room ... Joiners.equal(lambda lesson: lesson.room), # ... and the pair is unique (different id, no reverse pairs) ... Joiners.less_than(lambda lesson: lesson.id) ) \\ .penalize(\"Room conflict\", HardSoftScore.ONE_HARD) def teacher_conflict(constraint_factory: ConstraintFactory): # A teacher can teach at most one lesson at the same time. return constraint_factory.for_each(Lesson) \\ .join(Lesson, Joiners.equal(lambda lesson: lesson.timeslot), Joiners.equal(lambda lesson: lesson.teacher), Joiners.less_than(lambda lesson: lesson.id) ) \\ .penalize(\"Teacher conflict\", HardSoftScore.ONE_HARD) def student_group_conflict(constraint_factory: ConstraintFactory): # A student can attend at most one lesson at the same time. return constraint_factory.for_each(Lesson) \\ .join(Lesson, Joiners.equal(lambda lesson: lesson.timeslot), Joiners.equal(lambda lesson: lesson.student_group), Joiners.less_than(lambda lesson: lesson.id) ) \\ .penalize(\"Student group conflict\", HardSoftScore.ONE_HARD) The @constraint_provider decorator allows OptaPy to use a function as a constraint provider. The function must take exactly one argument; the passed argument is a ConstraintFactory used for creating constraints. For more information, see Constraint Streams in the OptaPy documentation. A TimeTable class wraps all Timeslot, Room, and Lesson instances of a single data set. Furthermore, because it contains all lessons, each with a specific planning variable state, the TimeTable class is a planning solution and has a score: If lessons are still unassigned, then it is an uninitialized solution, for example, a solution with the score -4init/0hard/0soft. If it breaks hard constraints, then it is an infeasible solution, for example, a solution with the score -2hard/-3soft. If it adheres to all hard constraints, then it is a feasible solution, for example, a solution with the score 0hard/-7soft. In domain.py, add the following code to create the TimeTable class: from optapy import planning_solution, planning_entity_collection_property, \\ problem_fact_collection_property, \\ value_range_provider, planning_score from optapy.score import HardSoftScore def format_list(a_list): return ',\\n'.join(map(str, a_list)) @planning_solution class TimeTable: def __init__(self, timeslot_list, room_list, lesson_list, score=None): self.timeslot_list = timeslot_list self.room_list = room_list self.lesson_list = lesson_list self.score = score @problem_fact_collection_property(Timeslot) @value_range_provider(\"timeslotRange\") def get_timeslot_list(self): return self.timeslot_list @problem_fact_collection_property(Room) @value_range_provider(\"roomRange\") def get_room_list(self): return self.room_list @planning_entity_collection_property(Lesson) def get_lesson_list(self): return self.lesson_list @planning_score(HardSoftScore) def get_score(self): return self.score def set_score(self, score): self.score = score def __str__(self): return ( f\"TimeTable(\" f\"timeslot_list={format_list(self.timeslot_list)},\\n\" f\"room_list={format_list(self.room_list)},\\n\" f\"lesson_list={format_list(self.lesson_list)},\\n\" f\"score={str(self.score.toString()) if self.score is not None else 'None'}\" f\")\" ) The @planning_solution decorator tells OptaPy that the class TimeTable holds the input and output data. The @problem_fact_collection_property(fact_type) decorator tells OptaPy the function that provides problem facts. The fact_type argument tells OptaPy what type of fact it provides (for instance, Rooms). The @value_range_provider(range_id) decorator tells OptaPy the function that provides a value range, which is used to get possible values of planning variables. Its argument, range_id is a string which is used in @planning_variable decorators to link the two (for example, @planning_variable(Room, ['roomRange']) is linked to @value_range_provider('roomRange'). The @planning_entity_collection_property(entity_type) decorator tells OptaPy the function that provides planning entities. The entity_type argument tells OptaPy what type of entities it provides (for instance, Lessons). The @planning_score(score_type) decorator tells OptaPy the function that returns the score. It must be named get and have a corresponding a setter set. The score_type argument tells OptaPy what type of score to use (for instance, HardSoftScore). The type should be taken from the optapy.score module. To solve, we first need to create an instance of our problem. Add the following code to domain.py: from datetime import time def generate_problem(): timeslot_list = [ Timeslot(1, \"MONDAY\", time(hour=8, minute=30), time(hour=9, minute=30)), Timeslot(2, \"MONDAY\", time(hour=9, minute=30), time(hour=10, minute=30)), Timeslot(3, \"MONDAY\", time(hour=10, minute=30), time(hour=11, minute=30)), Timeslot(4, \"MONDAY\", time(hour=13, minute=30), time(hour=14, minute=30)), Timeslot(5, \"MONDAY\", time(hour=14, minute=30), time(hour=15, minute=30)), Timeslot(6, \"TUESDAY\", time(hour=8, minute=30), time(hour=9, minute=30)), Timeslot(7, \"TUESDAY\", time(hour=9, minute=30), time(hour=10, minute=30)), Timeslot(8, \"TUESDAY\", time(hour=10, minute=30), time(hour=11, minute=30)), Timeslot(9, \"TUESDAY\", time(hour=13, minute=30), time(hour=14, minute=30)), Timeslot(10, \"TUESDAY\", time(hour=14, minute=30), time(hour=15, minute=30)), ] room_list = [ Room(1, \"Room A\"), Room(2, \"Room B\"), Room(3, \"Room C\") ] lesson_list = [ Lesson(1, \"Math\", \"A. Turing\", \"9th grade\"), Lesson(2, \"Math\", \"A. Turing\", \"9th grade\"), Lesson(3, \"Physics\", \"M. Curie\", \"9th grade\"), Lesson(4, \"Chemistry\", \"M. Curie\", \"9th grade\"), Lesson(5, \"Biology\", \"C. Darwin\", \"9th grade\"), Lesson(6, \"History\", \"I. Jones\", \"9th grade\"), Lesson(7, \"English\", \"I. Jones\", \"9th grade\"), Lesson(8, \"English\", \"I. Jones\", \"9th grade\"), Lesson(9, \"Spanish\", \"P. Cruz\", \"9th grade\"), Lesson(10, \"Spanish\", \"P. Cruz\", \"9th grade\"), Lesson(11, \"Math\", \"A. Turing\", \"10th grade\"), Lesson(12, \"Math\", \"A. Turing\", \"10th grade\"), Lesson(13, \"Math\", \"A. Turing\", \"10th grade\"), Lesson(14, \"Physics\", \"M. Curie\", \"10th grade\"), Lesson(15, \"Chemistry\", \"M. Curie\", \"10th grade\"), Lesson(16, \"French\", \"M. Curie\", \"10th grade\"), Lesson(17, \"Geography\", \"C. Darwin\", \"10th grade\"), Lesson(18, \"History\", \"I. Jones\", \"10th grade\"), Lesson(19, \"English\", \"P. Cruz\", \"10th grade\"), Lesson(20, \"Spanish\", \"P. Cruz\", \"10th grade\"), ] lesson = lesson_list[0] lesson.set_timeslot(timeslot_list[0]) lesson.set_room(room_list[0]) return TimeTable(timeslot_list, room_list, lesson_list) Next, we need to create a SolverConfig, which tells OptaPy about the problem and what strategies to employ. In main.py, add the following code: from domain import Lesson, TimeTable, generate_problem from constraints import define_constraints import optapy.config from optapy.types import Duration solver_config = optapy.config.solver.SolverConfig() \\ .withEntityClasses(Lesson) \\ .withSolutionClass(TimeTable) \\ .withConstraintProviderClass(define_constraints) \\ .withTerminationSpentLimit(Duration.ofSeconds(30)) For the SolverConfig above, we use the default strategies, use the model we defined above, and set it terminate after 30 seconds. Finally, we pass the SolverConfig and the problem instance to the solve function, which returns the last best solution found. Add the following code to main.py: from optapy import solver_factory_create solution = solver_factory_create(solver_config) \\ .buildSolver() \\ .solve(generate_problem()) print(solution) The solution returned is a TimeTable instance of the best solution found. When the solution is formatted into a table, it should look similar to this: |------------|------------|------------|------------| | | Room A | Room B | Room C | |------------|------------|------------|------------| | MON 08:30: | | Math | History | | | | A. Turing | I. Jones | | | | 9th grade | 10th grade | |------------|------------|------------|------------| | MON 09:30: | | Math | History | | | | A. Turing | I. Jones | | | | 10th grade | 9th grade | |------------|------------|------------|------------| | MON 10:30: | | Math | English | | | | A. Turing | I. Jones | | | | 10th grade | 9th grade | |------------|------------|------------|------------| | MON 13:30: | Math | Spanish | | | | A. Turing | P. Cruz | | | | 10th grade | 9th grade | | |------------|------------|------------|------------| | MON 14:30: | Math | English | | | | A. Turing | P. Cruz | | | | 9th grade | 10th grade | | |------------|------------|------------|------------| | TUE 08:30: | Physics | Spanish | | | | M. Curie | P. Cruz | | | | 9th grade | 10th grade | | |------------|------------|------------|------------| | TUE 09:30: | Chemistry | | English | | | M. Curie | | I. Jones | | | 10th grade | | 9th grade | |------------|------------|------------|------------| | TUE 10:30: | Physics | Spanish | | | | M. Curie | P. Cruz | | | | 10th grade | 9th grade | | |------------|------------|------------|------------| | TUE 13:30: | French | | Biology | | | M. Curie | | C. Darwin | | | 10th grade | | 9th grade | |------------|------------|------------|------------| | TUE 14:30: | Chemistry | Geography | | | | M. Curie | C. Darwin | | | | 9th grade | 10th grade | | |------------|------------|------------|------------| To run the application, execute the main file. python3 main.py","title":"Quickstart","component":"docs","version":"latest","name":"quickstart","url":"/docs/latest/quickstart/quickstart.html","titles":[{"text":"1. What you will build","hash":"_what_you_will_build","id":1},{"text":"2. Setup","hash":"_setup","id":2},{"text":"3. School timetabling","hash":"_school_timetabling","id":3},{"text":"4. Modelling the domain","hash":"_modelling_the_domain","id":4},{"text":"4.1. Problem Facts","hash":"_problem_facts","id":5},{"text":"4.2. Planning Entities","hash":"_planning_entities","id":6},{"text":"5. Constraints","hash":"_constraints","id":7},{"text":"6. Gather the domain objects in a planning solution","hash":"_gather_the_domain_objects_in_a_planning_solution","id":8},{"text":"7. Solving","hash":"_solving","id":9},{"text":"8. Run the application","hash":"_run_the_application","id":10}]},"13":{"id":13,"text":"The problem facts used to create a solution may change before or during the execution of that solution. Delaying planning in order to lower the risk of problem facts changing is not ideal, as an incomplete plan is preferable to no plan. The following examples demonstrate situations where planning solutions need to be altered due to unpredictable changes: Unforeseen fact changes An employee assigned to a shift calls in sick. An airplane scheduled to take off has a technical delay. One of the machines or vehicles break down. Unforeseen fact changes benefit from using backup planning. Cannot assign all entities immediately Leave some unassigned. For example: There are 10 shifts at the same time to assign but only nine employees to handle shifts. For this type of planning, use overconstrained planning. Unknown long term future facts For example: Hospital admissions for the next two weeks are reliable, but those for week three and four are less reliable, and for week five and beyond are not worth planning yet. This problem benefits from continuous planning. Constantly changing problem facts Use real-time planning. More CPU time results in a better planning solution. OptaPy allows you to start planning earlier, despite unforeseen changes, as the optimization algorithms support planning a solution that has already been partially planned. This is known as repeated planning. Backup planning adds extra score constraints to create space in the planning for when things go wrong. That creates a backup plan within the plan itself. An example of backup planning is as follows: Create an extra score constraint. For example: Assign an employee as the spare employee (one for every 10 shifts at the same time). Keep one hospital bed open in each department. Change the planning problem when an unforeseen event occurs. For example, if an employee calls in sick: Delete the sick employee and leave their shifts unassigned. Restart the planning, starting from that solution, which now has a different score. The construction heuristics fills in the newly created gaps (probably with the spare employee) and the metaheuristics will improve it even further. When there is no feasible solution to assign all planning entities, it is preferable to assign as many entities as possible without breaking hard constraints. This is called overconstrained planning. By default, OptaPy assigns all planning entities, overloads the planning values, and therefore breaks hard constraints. There are two ways to avoid this: Use nullable planning variables, so that some entities are unassigned. Add virtual values to catch the unassigned entities. If we handle overconstrained planning with nullable variables, the overload entities will be left unassigned: To implement this: Add a score level (usually a medium level between the hard and soft level) by switching Score type. Make the planning variable nullable. Add a score constraint on the new level (usually a medium constraint) to penalize the number of unassigned entities (or a weighted sum of them). In overconstrained planning it is often useful to know which resources are lacking. In overconstrained planning with virtual values, the solution indicates which resources to buy. To implement this: Add an additional score level (usually a medium level between the hard and soft level) by switching Score type. Add a number of virtual values. It can be difficult to determine a good formula to calculate that number: Do not add too many, as that will decrease solver efficiency. Importantly, do not add too few as that will lead to an infeasible solution. Add a score constraint on the new level (usually a medium constraint) to penalize the number of virtual assigned entities (or a weighted sum of them). Optionally, change all soft constraints to ignore virtual assigned entities. Continuous planning is the technique of planning one or more upcoming planning periods at the same time and repeating that process monthly, weekly, daily, hourly, or even more frequently. However, as time is infinite, planning all future time periods is impossible. In the employee rostering example above, we re-plan every four days. Each time, we actually plan a window of 12 days, but we only publish the first four days, which is stable enough to share with the employees, so they can plan their social life accordingly. In the hospital bed planning example above, notice the difference between the original planning of November 1st and the new planning of November 5th: some problem facts (F, H, I, J, K) changed in the meantime, which results in unrelated planning entities (G) changing too. The planning window can be split up in several stages: History Immutable past time periods. It contains only pinned entities. Recent historic entities can also affect score constraints that apply to movable entities. For example, in nurse rostering, a nurse that has worked the last three historic weekends in a row should not be assigned to three more weekends in a row, because she requires a one free weekend per month. Do not load all historic entities in memory: even though pinned entities do not affect solving performance, they can cause out of memory problems when the data grows to years. Only load those that might still affect the current constraints with a good safety margin. Published Upcoming time periods that have been published. They contain only pinned and/or semi-movable planning entities. The published schedule has been shared with the business. For example, in nurse rostering, the nurses will use this schedule to plan their personal lives, so they require a publish notice of for example 3 weeks in advance. Normal planning will not change that part of schedule. Changing that schedule later is disruptive, but were exceptions force us to do them anyway (for example someone calls in sick), do change this part of the planning while minimizing disruption with non-disruptive replanning. Draft Upcoming time periods after the published time periods that can change freely. They contain movable planning entities, except for any that are pinned for other reasons (such as being pinned by a user). The first part of the draft, called the final draft, will be published, so these planning entities can change one last time. The publishing frequency, for example once per week, determines the number of time periods that change from draft to published. The latter time periods of the draft are likely change again in later planning efforts, especially if some of the problem facts change by then (for example nurse Ann doesn’t want to work on one of those days). Despite that these latter planning entities might still change a lot, we can’t leave them out for later, because we would risk painting ourselves into a corner. For example, in employee rostering we could have all our rare skilled employees working the last 5 days of the week that gets published, which won’t reduce the score of that week, but will make it impossible for us to deliver a feasible schedule the next week. So the draft length needs to be longer than the part that will be published first. That draft part is usually not shared with the business yet, because it is too volatile and it would only raise false expectations. However, it is stored in the database and used as a starting point for the next solver. Unplanned (out of scope) Planning entities that are not in the current planning window. If the planning window is too small to plan all entities, you’re dealing with overconstrained planning. If time is a planning variable, the size of the planning window is determined dynamically, in which case the unplanned stage is not applicable. A pinned planning entity doesn’t change during solving. This is commonly used by users to pin down one or more specific assignments and force OptaPlanner to schedule around those fixed assignments. To pin some planning entities down, add an @planning_pin annotation on a bool getter of the planning entity class. That boolean is True if the entity is pinned down to its current planning values and False otherwise. Add the @planning_pin annotation on a bool: from optapy import planning_entity, planning_pin @planning_entity class Lecture: pinned: bool # ... @planning_pin def is_pinned(self): return self.pinned ... In the example above, if pinned is True, the lecture will not be assigned to another period or room (even if the current period and rooms fields are None). Alternatively, to pin some planning entities down, create a predicate function that returns True if an entity is pinned, and False if it is movable. This is more flexible and more verbose than the @planning_pin approach. For example on the nurse rostering example: Create the predicate function: def shift_pinning_filter(solution, shift): return not solution.schedule_state.is_draft(shift) Configure the pinning_filter of the @planning_entity: from optapy import planning_entity @planning_entity(pinning_filter=shift_pinning_filter) class Lecture: ... Replanning an existing plan can be very disruptive. If the plan affects humans (such as employees, drivers, …​), very disruptive changes are often undesirable. In such cases, nonvolatile replanning helps by restricting planning freedom: the gain of changing a plan must be higher than the disruption it causes. This is usually implemented by taxing all planning entities that change. In the machine reassignment example, the entity has both the planning variable machine and its original value original_machine: from optapy import planning_entity, planning_variable @planning_entity(...) class ProcessAssignment: process: MrProcess original_machine: Machine machine: Machine @planning_variable(...) def get_machine(self) -> Machine: ... def is_moved(self) -> bool: return (self.original_machine is not None and self.original_machine != self.machine) ... During planning, the planning variable machine changes. By comparing it with the originalMachine, a change in plan can be penalized: from optapy import get_class from optapy.constraint import ConstraintFactory, Constraint ProcessAssignmentClass = get_class(ProcessAssignment) def process_moved(constraint_factory: ConstraintFactory): return constraint_factory.forEach(ProcessAssignmentClass) \\ .filter(lambda process_assignment: process_assignment.is_moved()) \\ .penalize(\"process_moved\", HardSoftScore.ofSoft(1000)) The soft penalty of -1000 means that a better solution is only accepted if it improves the soft score for at least 1000 points per variable changed (or if it improves the hard score). To do real-time planning, combine the following planning techniques: Backup planning - adding extra score constraints to allow for unforeseen changes. Continuous planning - planning for one or more future planning periods. Short planning windows. This lowers the burden of real-time planning. As time passes, the problem itself changes. Consider the vehicle routing use case: In the example above, three customers are added at different times (07:56, 08:02 and 08:45), after the original customer set finished solving at 07:55, and in some cases, after the vehicles have already left. OptaPlanner can handle such scenarios with ProblemChange (in combination with pinned planning entities). While the Solver is solving, one of the problem facts may be changed by an outside event. For example, an airplane is delayed and needs the runway at a later time. Do not change the problem fact instances used by the Solver while it is solving (from another thread or even in the same thread), as that will corrupt it. Add a ProblemChange to the Solver, which it executes in the solver thread as soon as possible. For example: class Solver: # ... def addProblemChange(self, problem_change: Callable[[Solution, ProblemChangeDirector], None]) -> None: ... def isEveryProblemChangeProcessed(self) -> bool: ... ... Similarly, you can pass the ProblemChange to the SolverManager: class SolverManager: # ... def addProblemChange(self, problem_id: ProblemId, problem_change: ProblemChange) -> CompletableFuture[None]: ... ... and the SolverJob: class SolverJob: # ... def addProblemChange(self, problem_change: ProblemChange) -> CompletableFuture[None]: ... ... Notice the method returns CompletableFuture[None], which is completed when a user-defined Consumer accepts the best solution containing this problem change. class ProblemChange: def doChange(self, working_solution: Solution, problem_change_director: ProblemChangeDirector) -> None: ... ... The ScoreDirector must be updated with any change on the problem facts of planning entities in a ProblemChange. To write a ProblemChange correctly, it is important to understand the behavior of a planning clone. A planning clone of a solution must fulfill these requirements: The clone must represent the same planning problem. Usually it reuses the same instances of the problem facts and problem fact collections as the original. The clone must use different, cloned instances of the entities and entity collections. Changes to an original Solution entity’s variables must not affect its clone. Consider the following example of a ProblemChange implementation in the cloud balancing use case: from optapy import problem_change @problem_change class DeleteComputerProblemChange: def __init__(self, deleted_computer): self.deleted_computer = deleted_computer def doChange(self, cloud_balance, problem_change_director): working_computer = problem_change_director.lookUpWorkingObject(self.deleted_computer); if working_computer is None: raise ValueError(f\"A computer ({self.deleted_computer} does not exist. Maybe it has been already deleted.\") # First remove the problem fact from all planning entities that use it for process in cloud_balance.process_list: if process.computer == working_computer: problem_change_director.changeVariable(process, \"computer\", lambda working_process: working_process.set_computer(None)) # A SolutionCloner does not clone problem fact lists (such as computer_list) # Shallow clone the computer_list so only working_solution is affected, not best_solution or gui_solution computer_list = cloud_balance.computer_list.copy() cloud_balance.computer_list =computer_list # Remove the problem fact itself problem_change_director.removeProblemFact(working_computer, lambda working_computer_list: working_computer_list.remove(self.deleted_computer)) def delete_computer(computer: CloudComputer) -> None: solver.addProblemChange(DeleteComputerProblemChange(computer)) Any change in a @problem_change must be done on the working_solution (the first parameter in the doChange method). The working_solution is a planning clone of the BestSolutionChangedEvent's best_solution. The working_solution in the Solver is never the same solution instance as in the rest of your application: it is a planning clone. A planning clone also clones the planning entities and planning entity collections. Thus, any change on the planning entities must happen on the working_solution instance passed to the ProblemChange.doChange(working_solution: Solution, problem_change_director: ProblemChangeDirector) method. Use the method ProblemChangeDirector.lookUpWorkingObject() to translate and retrieve the working solution’s instance of an object. This requires annotating a property of that class as the @planning_id. A planning clone does not clone the problem facts, nor the problem fact collections. Therefore the working_solution and the best_solution share the same problem fact instances and the same problem fact list instances. Any problem fact or problem fact list changed by a ProblemChange must be problem cloned first (which can imply rerouting references in other problem facts and planning entities). Otherwise, if the working_solution and best_solution are used in different threads (for example a solver thread and a GUI event thread), a race condition can occur. Many types of changes can leave a planning entity uninitialized, resulting in a partially initialized solution. This is acceptable, provided the first solver phase can handle it. All construction heuristics solver phases can handle a partially initialized solution, so it is recommended to configure such a solver phase as the first phase. The process occurs as follows: The Solver stops. Runs the ProblemChange. restarts. This is a warm start because its initial solution is the adjusted best solution of the previous run. Each solver phase runs again. This implies the construction heuristic runs again, but because little or no planning variables are uninitialized (unless you have a nullable planning variable), it finishes much quicker than in a cold start. Each configured Termination resets (both in solver and phase configuration), but a previous call to terminateEarly() is not undone. Termination is not usually configured (except in daemon mode); instead, Solver.terminateEarly() is called when the results are needed. Alternatively, configure a Termination and use the daemon mode in combination with BestSolutionChangedEvent as described in the following section. In real-time planning, it is often useful to have a solver thread wait when it runs out of work, and immediately resume solving a problem once new problem fact changes are added. Putting the Solver in daemon mode has the following effects: If the Solver's Termination terminates, it does not return from solve(), but blocks its thread instead (which frees up CPU power). Except for terminateEarly(), which does make it return from solve(), freeing up system resources and allowing an application to shutdown gracefully. If a Solver starts with an empty planning entity collection, it waits in the blocked state immediately. If a ProblemChange is added, it goes into the running state, applies the ProblemChange and runs the Solver again. To use the Solver in daemon mode: Enable daemon mode on the Solver: true ... Do not forget to call Solver.terminateEarly() when your application needs to shutdown to avoid killing the solver thread unnaturally. Subscribe to the BestSolutionChangedEvent to process new best solutions found by the solver thread. A BestSolutionChangedEvent does not guarantee that every ProblemChange has been processed already, nor that the solution is initialized and feasible. To ignore BestSolutionChangedEvents with such invalid solutions, do the following: def best_solution_changed(event: BestSolutionChangedEvent[CloudBalance]) -> None: if (event.isEveryProblemChangeProcessed() and # Ignore infeasible (including uninitialized) solutions event.getNewBestScore().isFeasible()): ... Use Score.isSolutionInitialized() instead of Score.isFeasible() to only ignore uninitialized solutions, but do accept infeasible solutions too. In multi-stage planning, complex planning problems are broken down in multiple stages. A typical example is train scheduling, where one department decides where and when a train will arrive or depart and another department assigns the operators to the actual train cars or locomotives. Each stage has its own solver configuration (and therefore its own SolverFactory): Planning problems with different publication deadlines must use multi-stage planning. But problems with the same publication deadline, solved by different organizational groups are also initially better off with multi-stage planning, because of Conway’s law and the high risk associated with unifying such groups. Similarly to Partitioned Search, multi-stage planning leads to suboptimal results. Nevertheless, it might be beneficial in order to simplify the maintenance, ownership, and help to start a project. Do not confuse multi-stage planning with multi-phase solving.","title":"Repeated planning","component":"docs","version":"latest","name":"repeated-planning","url":"/docs/latest/repeated-planning/repeated-planning.html","titles":[{"text":"1. Introduction to repeated planning","hash":"introductionToRepeatedPlanning","id":1},{"text":"2. Backup planning","hash":"backupPlanning","id":2},{"text":"3. Overconstrained planning","hash":"overconstrainedPlanning","id":3},{"text":"3.1. Overconstrained planning with nullable variables","hash":"overconstrainedPlanningWithNullableVariables","id":4},{"text":"3.2. Overconstrained planning with virtual values","hash":"overconstrainedPlanningWithVirtualValues","id":5},{"text":"4. Continuous planning (windowed planning)","hash":"continuousPlanning","id":6},{"text":"4.1. Pinned planning entities","hash":"pinnedPlanningEntities","id":7},{"text":"4.1.1. Pin down planning entities with @planning_pin","hash":"pinDownPlanningEntities","id":8},{"text":"4.1.2. Configure a PinningFilter","hash":"configureAPinningFilter","id":9},{"text":"4.2. Nonvolatile replanning to minimize disruption (semi-movable planning entities)","hash":"nonvolatileReplanning","id":10},{"text":"5. Real-time planning","hash":"realTimePlanning","id":11},{"text":"5.1. ProblemChange","hash":"problemChange","id":12},{"text":"5.1.1. Cloud balancing ProblemChange example","hash":"problemChangeExample","id":13},{"text":"5.1.2. Cloning solutions to avoid race conditions in real-time planning","hash":"cloningSolutionsToAvoidRaceConditions","id":14},{"text":"5.2. Daemon: solve() does not return","hash":"daemon","id":15},{"text":"6. Multi-stage planning","hash":"multiStagePlanning","id":16}]},"14":{"id":14,"text":"Every @planning_solution class has a score. The score is an objective way to compare two solutions. The solution with the higher score is better. The Solver aims to find the solution with the highest Score of all possible solutions. The best solution is the solution with the highest Score that Solver has encountered during solving, which might be the optimal solution. OptaPy cannot automatically know which solution is best for your business, so you need to tell it how to calculate the score of a given @planning_solution instance according to your business needs. If you forget or are unable to implement an important business constraint, the solution is probably useless: To implement a verbal business constraint, it needs to be formalized as a score constraint. Luckily, defining constraints in OptaPy is very flexible through the following score techniques: Score signum (positive or negative): maximize or minimize a constraint type Score weight: put a cost/profit on a constraint type Score level (hard, soft, …​): prioritize a group of constraint types Take the time to acquaint yourself with the first three techniques. Once you understand them, formalizing most business constraints becomes straightforward. Do not presume that your business knows all its score constraints in advance. Expect score constraints to be added, changed or removed after the first releases. All score techniques are based on constraints. A constraint can be a simple pattern (such as Maximize the apple harvest in the solution) or a more complex pattern. A positive constraint is a constraint you want to maximize. A negative constraint is a constraint you want to minimize The image above illustrates that the optimal solution always has the highest score, regardless if the constraints are positive or negative. Most planning problems have only negative constraints and therefore have a negative score. In that case, the score is the sum of the weight of the negative constraints being broken, with a perfect score of 0. For example in n queens, the score is the negative of the number of queen pairs which can attack each other. Negative and positive constraints can be combined, even in the same score level. When a constraint activates (because the negative constraint is broken or the positive constraint is fulfilled) on a certain planning entity set, it is called a constraint match. Not all score constraints are equally important. If breaking one constraint is equally bad as breaking another constraint x times, then those two constraints have a different weight (but they are in the same score level). For example in vehicle routing, you can make one unhappy driver constraint match count as much as two fuel tank usage constraint matches: Score weighting is easy in use cases where you can put a price tag on everything. In that case, the positive constraints maximize revenue and the negative constraints minimize expenses, so together they maximize profit. Alternatively, score weighting is also often used to create social fairness. For example, a nurse, who requests a free day, pays a higher weight on New Years eve than on a normal day. The weight of a constraint match can depend on the planning entities involved. For example in cloud balancing, the weight of the soft constraint match for an active Computer is the maintenance cost of that Computer (which differs per computer). Putting a good weight on a constraint is often a difficult analytical decision, because it is about making choices and trade-offs against other constraints. Different stakeholders have different priorities. A non-accurate weight is less damaging than mediocre algorithms: Most use cases use a Score with int weights, such as HardSoftScore. Sometimes a score constraint outranks another score constraint, no matter how many times the latter is broken. In that case, those score constraints are in different levels. For example, a nurse cannot do two shifts at the same time (due to the constraints of physical reality), so this outranks all nurse happiness constraints. Most use cases have only two score levels, hard and soft. The levels of two scores are compared lexicographically. The first score level gets compared first. If those differ, the remaining score levels are ignored. For example, a score that breaks 0 hard constraints and 1000000 soft constraints is better than a score that breaks 1 hard constraint and 0 soft constraints. If there are two (or more) score levels, for example HardSoftScore, then a score is feasible if no hard constraints are broken. By default, OptaPy will always assign all planning variables a planning value. If there is no feasible solution, this means the best solution will be infeasible. To instead leave some of the planning entities unassigned, apply overconstrained planning. For each constraint, you need to pick a score level, a score weight and a score signum. For example: -1soft which has score level of soft, a weight of 1 and a negative signum. Do not use a big constraint weight when your business actually wants different score levels. That hack, known as score folding, is broken: Your business might tell you that your hard constraints all have the same weight, because they cannot be broken (so the weight does not matter). This is not true because if no feasible solution exists for a specific dataset, the least infeasible solution allows the business to estimate how many business resources they are lacking. For example in cloud balancing, how many new computers to buy. Furthermore, it will likely create a score trap. For example in cloud balance if a Computer has seven CPU too little for its Processes, then it must be weighted seven times as much as if it had only one CPU too little. Three or more score levels are also supported. For example: a company might decide that profit outranks employee satisfaction (or vice versa), while both are outranked by the constraints of physical reality. To model fairness or load balancing, there is no need to use lots of score levels (even though OptaPy can handle many score levels). Most use cases use a Score with two or three weights, such as HardSoftScore and HardMediumSoftScore. All the score techniques mentioned above, can be combined seamlessly: A score is represented by the Score interface, which naturally extends Comparable: class Score: def compareTo(self, other): ... ... The Score implementation to use depends on your use case. Your score might not efficiently fit in a single long value. OptaPy has several built-in Score implementations, but you can implement a custom Score too. Most use cases tend to use the built-in HardSoftScore. All Score implementations also have an initScore (which is an int). It is mostly intended for internal use in OptaPy: it is the negative number of uninitialized planning variables. From a user’s perspective this is 0, unless a Construction Heuristic is terminated before it could initialize all planning variables (in which case Score.isSolutionInitialized() returns false). The Score implementation (for example HardSoftScore) must be the same throughout a Solver runtime. The Score implementation is configured in the solution domain class: @planning_solution class CloudBalance: ... @planning_score(HardSoftScore) def get_score(self): return self.score def set_score(self, score): self.score = score Avoid the use of float in score calculation. Use BigDecimal or scaled long instead. Floating point numbers cannot represent a decimal number correctly. For example: a float cannot hold the value 0.05 correctly. Instead, it holds the nearest representable value. Arithmetic (including addition and subtraction) with floating point numbers, especially for planning problems, leads to incorrect decisions: Additionally, floating point number addition is not associative: # prints False print(f'{((0.01 + 0.02) + 0.03) == (0.01 + (0.02 + 0.03))}') This leads to score corruption. Decimal numbers (BigDecimal) have none of these problems. BigDecimal arithmetic is considerably slower than int, long or double arithmetic. In experiments we have seen the score calculation take five times longer. Therefore, in many cases, it can be worthwhile to multiply all numbers for a single score weight by a plural of ten, so the score weight fits in a scaled int or long. For example, if we multiply all weights by 1000, a fuel_cost of 0.07 becomes a fuel_cost_millis of 70 and no longer uses a decimal score weight. Depending on the number of score levels and type of score weights you need, choose a Score type. Most use cases use a HardSoftScore. All score types are available in the optapy.score package: from optapy.score import HardSoftScore A SimpleScore has a single int value, for example -123. It has a single score level. @planning_score(SimpleScore) def get_score(self): ... A HardSoftScore has a hard int value and a soft int value, for example -123hard/-456soft. It has two score levels (hard and soft). @planning_score(HardSoftScore) def get_score(self): ... A HardMediumSoftScore which has a hard int value, a medium int value and a soft int value, for example -123hard/-456medium/-789soft. It has three score levels (hard, medium and soft). The hard level determines if the solution is feasible, and the medium level and soft level score values determine how well the solution meets business goals. Higher medium values take precedence over soft values irrespective of the soft value. @planning_score(HardMediumSoftScore) def get_score(self): ... A BendableScore has a configurable number of score levels. It has an array of hard int values and an array of soft int values, for example with two hard levels and three soft levels, the score can be [-123/-456]hard/[-789/-012/-345]soft. In that case, it has five score levels. A solution is feasible if all hard levels are at least zero. A BendableScore with one hard level and one soft level is equivalent to a HardSoftScore, while a BendableScore with one hard level and two soft levels is equivalent to a HardMediumSoftScore. @planning_score(BendableScore, bendable_hard_levels_size=2, bendable_soft_levels_size=3) def get_score(self): ... The number of hard and soft score levels need to be set at compilation time. It is not flexible to change during solving. Do not use a BendableScore with seven levels just because you have seven constraints. It is extremely rare to use a different score level for each constraint, because that means one constraint match on soft 0 outweighs even a million constraint matches of soft 1. Usually, multiple constraints share the same level and are weighted against each other. Use explaining the score to get the weight of individual constraints in the same level. There are several ways to calculate the Score of a solution: Easy Python score calculation: Implement all constraints together in a single function in Python. Does not scale. Constraint streams score calculation: Implement each constraint as a separate Constraint Stream in Python. Fast and scalable. Incremental Python score calculation (not recommended): Implement multiple low-level methods in Python. Fast and scalable. Very difficult to implement and maintain. Every score calculation type can work with any Score definition (such as HardSoftScore or HardMediumSoftScore). All score calculation types are Object Oriented and can reuse existing Python code. The score calculation must be read-only. It must not change the planning entities or the problem facts in any way. For example, it must not call a setter method on a planning entity in the score calculation. OptaPy does not recalculate the score of a solution if it can predict it (unless an environmentMode assertion is enabled). For example, after a winning step is done, there is no need to calculate the score because that move was done and undone earlier. As a result, there is no guarantee that changes applied during score calculation actually happen. To update planning entities when the planning variable change, use shadow variables instead. An easy way to implement your score calculation in Python. Advantages: Plain old Python: no learning curve Opportunity to delegate score calculation to an existing code base or legacy system Disadvantages: Slower Does not scale because there is no incremental score calculation Create a function that takes a solution and return a score, and decorate it with @easy_score_calculator: from optapy import easy_score_calculator @easy_score_calculator def fun(solution: SolutionType) -> Score: ... For example in n queens: from optapy import easy_score_calculator from optapy.score import SimpleScore @easy_score_calculator def n_queens_easy_score_calculator(n_queens: NQueens) -> SimpleScore: n = n_queens.get_n() queen_list = n_queens.get_queen_list() score = 0 for i in range(n): for j in range(i + 1, n): left_queen = queen_list[i] right_queen = queen_list[j] if left_queen.row is not None and right_queen.row is not None: if left_queen.row_index == right_queen.row_index: score -= 1 if left_queen.get_ascending_diagonal_index() == right_queen.get_ascending_diagonal_index(): score -= 1 if left_queen.get_descending_diagonal_index() == right_queen.get_descending_diagonal_index(): score -= 1 return SimpleScore.valueOf(score) Configure it in the solver configuration: n_queens_easy_score_calculator A way to implement your score calculation incrementally in Java. Advantages: Very fast and scalable Currently the fastest if implemented correctly Disadvantages: Hard to write A scalable implementation heavily uses maps, indexes, …​ (things Constraint Streams can do for you) You have to learn, design, write and improve all these performance optimizations yourself Hard to read Regular score constraint changes can lead to a high maintenance cost Implement all the methods of the interface IncrementalScoreCalculator: class IncrementalScoreCalculator: def resetWorkingSolution(self, working_solution: SolutionType) -> None: ... def beforeEntityAdded(self, entity) -> None: ... def afterEntityAdded(self, entity) -> None: ... def beforeVariableChanged(self, entity, variable_name: str) -> None: ... def afterVariableChanged(self, entity, variable_name: str) -> None: ... def beforeEntityRemoved(self, entity) -> None: ... def afterEntityRemoved(self, entity) -> None: ... def calculateScore(self) -> Score: ... } For example in n queens: from optapy import incremental_score_calculator from optapy.score import SimpleScore @incremental_score_calculator class NQueensIncrementalScoreCalculator: score: int row_index_map: dict ascending_diagonal_index_map: dict descending_diagonal_index_map: dict def resetWorkingSolution(self, working_solution: Solution): n = working_solution.n self.row_index_map = dict() self.ascending_diagonal_index_map = dict() self.descending_diagonal_index_map = dict() for i in range(n): self.row_index_map[i] = list() self.ascending_diagonal_index_map[i] = list() self.descending_diagonal_index_map[i] = list() if i != 0: self.ascending_diagonal_index_map[n - 1 + i] = list() self.descending_diagonal_index_map[-i] = list() self.score = 0 for queen in working_solution.queen_list: self.insert(queen) def beforeEntityAdded(self, entity: any): pass def afterEntityAdded(self, entity: any): self.insert(entity) def beforeVariableChanged(self, entity: any, variable_name: str): self.retract(entity) def afterVariableChanged(self, entity: any, variable_name: str): self.insert(entity) def beforeEntityRemoved(self, entity: any): self.retract(entity) def afterEntityRemoved(self, entity: any): pass def insert(self, queen: Queen): row = queen.row if row is not None: row_index = queen.row row_index_list = self.row_index_map[row_index] self.score -= len(row_index_list) row_index_list.append(queen) ascending_diagonal_index_list = self.ascending_diagonal_index_map[queen.getAscendingDiagonalIndex()] self.score -= len(ascending_diagonal_index_list) ascending_diagonal_index_list.append(queen) descending_diagonal_index_list = self.descending_diagonal_index_map[queen.getDescendingDiagonalIndex()] self.score -= len(descending_diagonal_index_list) descending_diagonal_index_list.append(queen) def retract(self, queen: Queen): row = queen.row if row is not None: row_index = queen.row row_index_list = self.row_index_map[row_index] row_index_list.remove(queen) self.score += len(row_index_list) ascending_diagonal_index_list = self.ascending_diagonal_index_map[queen.getAscendingDiagonalIndex()] ascending_diagonal_index_list.remove(queen) self.score += len(ascending_diagonal_index_list) descending_diagonal_index_list = self.descending_diagonal_index_map[queen.getDescendingDiagonalIndex()] descending_diagonal_index_list.remove(queen) self.score += len(descending_diagonal_index_list) def calculateScore(self) -> SimpleScore: return SimpleScore.of(self.score) Configure it in the solver configuration: NQueensIncrementalScoreCalculator A piece of incremental score calculator code can be difficult to write and to review. Assert its correctness by using an EasyScoreCalculator to fulfill the assertions triggered by the environmentMode. Optionally, also implement the ConstraintMatchAwareIncrementalScoreCalculator interface to: Explain a score by splitting it up per score constraint with ScoreExplanation.getConstraintMatchTotalMap(). Visualize or sort planning entities by how many constraints each one breaks with ScoreExplanation.getIndictmentMap(). Receive a detailed analysis if the IncrementalScoreCalculator is corrupted in FAST_ASSERT or FULL_ASSERT environmentMode, from optapy.constraint import DefaultConstraintMatchTotal class ConstraintMatchAwareIncrementalScoreCalculator: def resetWorkingSolution(self, working_solution: SolutionType, constraintMatchEnabled: bool) -> None: ... def getConstraintMatchTotals(self) -> list[DefaultConstraintMatchTotal]: ... def getIndictmentMap(self) -> dict | None: return None # Calculate it non-incrementally from getConstraintMatchTotals() For example in machine reassignment, create one ConstraintMatchTotal per constraint type and call addConstraintMatch() for each constraint match: from optapy import incremental_score_calculator from optapy.score import HardSoftScore from optapy.constraint import DefaultConstraintMatchTotal @incremental_score_calculator class MachineReassignmentIncrementalScoreCalculator: ... def resetWorkingSolution(self, working_solution: MachineReassignment, constraint_match_enabled: bool) { # code to reset working solution ... # ignore constraintMatchEnabled, it is always presumed enabled def getConstraintMatchTotals(self): maximum_capacity_match_total = DefaultConstraintMatchTotal('MachineReassignment', \"maximumCapacity\", HardSoftScore.ZERO) ... for (machine, machine_score_part) in self.machine_score_part_map.items(): for machine_capacity_score_part in machine_score_part.machine_capacity_score_part_list: if (machine_capacity_score_part.maximum_available optapy.examples.cloudbalancing.score.CloudBalancingConstraintProvider ONLY_DOWN Alternatively, you can also specify the trend for each score level separately: optapy.examples.cloudbalancing.score.CloudBalancingConstraintProvider ONLY_DOWN/ONLY_DOWN When you put the environmentMode in FULL_ASSERT (or FAST_ASSERT), it will detect score corruption in the incremental score calculation. However, that will not verify that your score calculator actually implements your score constraints as your business desires. For example, one constraint might consistently match the wrong pattern. To verify the constraints against an independent implementation, configure a assertionScoreDirectorFactory: FAST_ASSERT ... optapy.examples.nqueens.score.n_queens_constraint_provider optapy.examples.nqueens.score.n_queens_easy_score_calculator This way, the n_queens_constraint_provider implementation is validated by the EasyScoreCalculator. The Solver will normally spend most of its execution time running the score calculation (which is called in its deepest loops). Faster score calculation will return the same solution in less time with the same algorithm, which normally means a better solution in equal time. After solving a problem, the Solver will log the score calculation speed per second. This is a good measurement of Score calculation performance, despite that it is affected by non score calculation execution time. It depends on the problem scale of the problem dataset. Normally, even for high scale problems, it is higher than 1, except if you are using an EasyScoreCalculator. When improving your score calculation, focus on maximizing the score calculation speed, instead of maximizing the best score. A big improvement in score calculation can sometimes yield little or no best score improvement, for example when the algorithm is stuck in a local or global optima. If you are watching the calculation speed instead, score calculation improvements are far more visible. Furthermore, watching the calculation speed allows you to remove or add score constraints, and still compare it with the original’s calculation speed. Comparing the best score with the original’s best score is pointless: it’s comparing apples and oranges. When a solution changes, incremental score calculation (AKA delta based score calculation) calculates the delta with the previous state to find the new Score, instead of recalculating the entire score on every solution evaluation. For example, when a single queen A moves from row 1 to 2, it will not bother to check if queen B and C can attack each other, since neither of them changed: Similarly in employee rostering: This is a huge performance and scalability gain. Constraint Streams give you this huge scalability gain without forcing you to write a complicated incremental score calculation algorithm. Just let the rule engine do the hard work. Notice that the speedup is relative to the size of your planning problem (your n), making incremental score calculation far more scalable. Do not call remote services in your score calculation (except if you are bridging EasyScoreCalculator to a legacy system). The network latency will kill your score calculation performance. Cache the results of those remote services if possible. If some parts of a constraint can be calculated once, when the Solver starts, and never change during solving, then turn them into cached problem facts. If you know a certain constraint can never be broken (or it is always broken), do not write a score constraint for it. For example in n queens, the score calculation does not check if multiple queens occupy the same column, because a Queen's column never changes and every solution starts with each Queen on a different column. Do not go overboard with this. If some datasets do not use a specific constraint but others do, just return out of the constraint as soon as you can. There is no need to dynamically change your score calculation based on the dataset. Instead of implementing a hard constraint, it can sometimes be built in. For example, if Lecture A should never be assigned to Room X, but it uses @value_range_provider on Solution, so the Solver will often try to assign it to Room X too (only to find out that it breaks a hard constraint). Use a ValueRangeProvider on the planning entity or filtered selection to define that Course A should only be assigned a Room different than X. This can give a good performance gain in some use cases, not just because the score calculation is faster, but mainly because most optimization algorithms will spend less time evaluating infeasible solutions. However, usually this is not a good idea because there is a real risk of trading short term benefits for long term harm: Many optimization algorithms rely on the freedom to break hard constraints when changing planning entities, to get out of local optima. Both implementation approaches have limitations (feature compatibility, disabling automatic performance optimizations), as explained in their documentation. Verify that your score calculation happens in the correct Number type. If you are making the sum of int values, do not sum it in a float which takes longer. For optimal performance, set the JAVA_HOME environment variable to the latest JDK. For example, in the past we have seen performance increases of 30% by switching from java 1.5 to 1.6. Always remember that premature optimization is the root of all evil. Make sure your design is flexible enough to allow configuration based tweaking. Make sure that none of your score constraints cause a score trap. A trapped score constraint uses the same weight for different constraint matches, when it could just as easily use a different weight. It effectively lumps its constraint matches together, which creates a flatlined score function for that constraint. This can cause a solution state in which several moves need to be done to resolve or lower the weight of that single constraint. Some examples of score traps: You need two doctors at each table, but you are only moving one doctor at a time. So the solver has no incentive to move a doctor to a table with no doctors. Punish a table with no doctors more than a table with only one doctor in that score constraint in the score function. Two exams need to be conducted at the same time, but you are only moving one exam at a time. So the solver has to move one of those exams to another timeslot without moving the other in the same move. Add a coarse-grained move that moves both exams at the same time. For example, consider this score trap. If the blue item moves from an overloaded computer to an empty computer, the hard score should improve. The trapped score implementation fails to do that: The Solver should eventually get out of this trap, but it will take a lot of effort (especially if there are even more processes on the overloaded computer). Before they do that, they might actually start moving more processes into that overloaded computer, as there is no penalty for doing so. Avoiding score traps does not mean that your score function should be smart enough to avoid local optima. Leave it to the optimization algorithms to deal with the local optima. Avoiding score traps means to avoid, for each score constraint individually, a flatlined score function. Always specify the degree of infeasibility. The business will often say \"if the solution is infeasible, it does not matter how infeasible it is.\" While that is true for the business, it is not true for score calculation as it benefits from knowing how infeasible it is. In practice, soft constraints usually do this naturally and it is just a matter of doing it for the hard constraints too. There are several ways to deal with a score trap: Improve the score constraint to make a distinction in the score weight. For example, penalize -1hard for every missing CPU, instead of just -1hard if any CPU is missing. If changing the score constraint is not allowed from the business perspective, add a lower score level with a score constraint that makes such a distinction. For example, penalize -1subsoft for every missing CPU, on top of -1hard if any CPU is missing. The business ignores the subsoft score level. Add coarse-grained moves and union select them with the existing fine-grained moves. A coarse-grained move effectively does multiple moves to directly get out of a score trap with a single move. For example, move multiple items from the same container to another container. Some use cases have a business requirement to provide a fair schedule (usually as a soft score constraint), for example: Fairly distribute the workload amongst the employees, to avoid envy. Evenly distribute the workload amongst assets, to improve reliability. Implementing such a constraint can seem difficult (especially because there are different ways to formalize fairness), but usually the squared workload implementation behaves most desirable. For each employee/asset, count the workload w and subtract w² from the score. As shown above, the squared workload implementation guarantees that if you select two employees from a given solution and make their distribution between those two employees fairer, then the resulting new solution will have a better overall score. Do not just use the difference from the average workload, as that can lead to unfairness, as demonstrated below. Instead of the squared workload, it is also possible to use the variance (squared difference to the average) or the standard deviation (square root of the variance). This has no effect on the score comparison, because the average will not change during planning. It is just more work to implement (because the average needs to be known) and trivially slower (because the calculation is a bit longer). When the workload is perfectly balanced, the user often likes to see a 0 score, instead of the distracting -34soft in the image above (for the last solution which is almost perfectly balanced). To nullify this, either add the average multiplied by the number of entities to the score or instead show the variance or standard deviation in the UI. The easiest way to explain the score during development is to print the return value of explainScore(), but only use that method for diagnostic purposes: print(score_manager.explainScore(solution)) For example in conference scheduling, this prints that talk S51 is responsible for breaking the hard constraint Speaker required room tag: Explanation of score (-1hard/-806soft): Constraint match totals: -1hard: constraint (Speaker required room tag) has 1 matches: -1hard: justifications ([S51]) -340soft: constraint (Theme track conflict) has 32 matches: -20soft: justifications ([S68, S66]) -20soft: justifications ([S61, S44]) ... ... Indictments (top 5 of 72): -1hard/-22soft: justification (S51) has 12 matches: -1hard: constraint (Speaker required room tag) -10soft: constraint (Theme track conflict) ... ... Do not attempt to parse this string or use it in your UI or exposed services. Instead use the ConstraintMatch API below and do it properly. If other parts of your application, for example your web UI, need to calculate the score of a solution, use the ScoreManager API: from optapy import score_manager_create score_manager = score_manager_create(solver_factory) score_explanation = score_manager.explain(cloud_balance) Then use it when you need to calculate the Score of a solution: score = score_explanation.getScore(); Furthermore, the ScoreExplanation can help explain the score through constraint match totals and/or indictments: To break down the score per constraint, get the ConstraintMatchTotals from the ScoreExplanation: constraint_match_totals = score_explanation.getConstraintMatchTotalMap().values() for constraint_match_total in constraint_match_totals: constraint_name = constraint_match_total.getConstraintName() # The score impact of that constraint total_score = constraint_match_total.getScore() for constraint_match in constraint_match_total.getConstraintMatchSet(): justification_list = constraint_match.getJustificationList() score = constraint_match.getScore() ... Each ConstraintMatchTotal represents one constraint and has a part of the overall score. The sum of all the ConstraintMatchTotal.getScore() equals the overall score. Constraint streams supports constraint matches automatically, but incremental Python score calculation requires adding additional methods. To show a heat map in the UI that highlights the planning entities and problem facts have an impact on the Score, get the Indictment map from the ScoreExplanation: indictment_map = score_explanation.getIndictmentMap() for process in cloud_balance.process_list: indictment = indictment_map.get(process); if indictment is None: continue # The score impact of that planning entity total_score = indictment.getScore() for constraint_match in indictment.getConstraintMatchSet(): constraint_name = constraint_match.getConstraintName() score = constraint_match.getScore() ... Each Indictment is the sum of all constraints where that justification object is involved with. The sum of all the Indictment.getScoreTotal() differs from the overall score, because multiple Indictments can share the same ConstraintMatch. Constraint streams supports indictments automatically, but incremental Python score calculation requires adding additional methods.","title":"Score calculation","component":"docs","version":"latest","name":"score-calculation","url":"/docs/latest/score-calculation/score-calculation.html","titles":[{"text":"1. Score terminology","hash":"scoreTerminology","id":1},{"text":"1.1. What is a score?","hash":"whatIsAScore","id":2},{"text":"1.2. Formalize the business constraints","hash":"formalizeTheBusinessConstraints","id":3},{"text":"1.3. Score constraint signum (positive or negative)","hash":"scoreConstraintSignum","id":4},{"text":"1.4. Score constraint weight","hash":"scoreConstraintWeight","id":5},{"text":"1.5. Score constraint level (hard, soft, …​)","hash":"scoreLevel","id":6},{"text":"1.6. Combining score techniques","hash":"combiningScoreTechniques","id":7},{"text":"1.7. Score interface","hash":"scoreInterface","id":8},{"text":"1.8. Avoid floating point numbers in score calculation","hash":"avoidFloatingPointNumbersInScoreCalculation","id":9},{"text":"2. Choose a score type","hash":"scoreType","id":10},{"text":"2.1. SimpleScore","hash":"simpleScore","id":11},{"text":"2.2. HardSoftScore (Recommended)","hash":"hardSoftScore","id":12},{"text":"2.3. HardMediumSoftScore","hash":"hardMediumSoftScore","id":13},{"text":"2.4. BendableScore","hash":"bendableScore","id":14},{"text":"3. Calculate the Score","hash":"calculateTheScore","id":15},{"text":"3.1. Score calculation types","hash":"scoreCalculationTypes","id":16},{"text":"3.2. Easy Python score calculation","hash":"easyPythonScoreCalculation","id":17},{"text":"3.3. Incremental Python score calculation","hash":"incrementalPythonScoreCalculation","id":18},{"text":"3.3.1. ConstraintMatchAwareIncrementalScoreCalculator","hash":"constraintMatchAwareIncrementalScoreCalculator","id":19},{"text":"3.4. InitializingScoreTrend","hash":"initializingScoreTrend","id":20},{"text":"3.5. Invalid score detection","hash":"invalidScoreDetection","id":21},{"text":"4. Score calculation performance tricks","hash":"scoreCalculationPerformanceTricks","id":22},{"text":"4.1. Overview","hash":"scoreCalculationPerformanceTricksOverview","id":23},{"text":"4.2. Score calculation speed","hash":"scoreCalculationSpeed","id":24},{"text":"4.3. Incremental score calculation (with deltas)","hash":"incrementalScoreCalculation","id":25},{"text":"4.4. Avoid calling remote services during score calculation","hash":"avoidCallingRemoteServicesDuringScoreCalculation","id":26},{"text":"4.5. Pointless constraints","hash":"pointlessConstraints","id":27},{"text":"4.6. Built-in hard constraint","hash":"buildInHardConstraint","id":28},{"text":"4.7. Other score calculation performance tricks","hash":"otherScoreCalculationPerformanceTricks","id":29},{"text":"4.8. Score trap","hash":"scoreTrap","id":30},{"text":"4.9. Fairness score constraints","hash":"fairnessScoreConstraints","id":31},{"text":"5. Explaining the score: which constraints are broken?","hash":"explainingTheScore","id":32},{"text":"5.1. Using score calculation outside the Solver","hash":"usingScoreCalculationOutsideTheSolver","id":33},{"text":"5.2. Constraint match total: break down the score by constraint","hash":"constraintMatchTotal","id":34},{"text":"5.3. Indictment heat map: visualize the hot planning entities","hash":"indictmentHeatMap","id":35}]},"15":{"id":15,"text":"A shadow variable is a planning variable whose correct value can be deduced from the state of the genuine planning variables. Even though such a variable violates the principle of normalization by definition, in some use cases it can be very practical to use a shadow variable, especially to express the constraints more naturally. For example in vehicle routing with time windows: the arrival time at a customer for a vehicle can be calculated based on the previously visited customers of that vehicle (and the known travel times between two locations). When the customers for a vehicle change, the arrival time for each customer is automatically adjusted. From a score calculation perspective, a shadow variable is like any other planning variable. From an optimization perspective, OptaPy effectively only optimizes the genuine variables (and mostly ignores the shadow variables): it just assures that when a genuine variable changes, any dependent shadow variables are changed accordingly. Any class that has at least one shadow variable, is a planning entity class (even if it has no genuine planning variables). That class must be defined in the solver configuration and be decorated with @planning_entity. A genuine planning entity class has at least one genuine planning variable, but can have shadow variables too. A shadow planning entity class has no genuine planning variables and at least one shadow planning variable. There are several built-in shadow variables: Two variables are bi-directional if their instances always point to each other (unless one side points to None and the other side does not exist). So if A references B, then B references A. For a non-chained planning variable, the bi-directional relationship must be a many-to-one relationship. To map a bi-directional relationship between two planning variables, annotate the source side (which is the genuine side) as a normal planning variable: from optapy import planning_entity, planning_variable @planning_entity class CloudProcess: @planning_variable(...) def get_computer(self): return self.computer def set_computer(self, computer): ... And then annotate the other side (which is the shadow side) with a @inverse_relation_shadow_variable annotation on a list property: from optapy import planning_entity, inverse_relation_shadow_variable @planning_entity class CloudComputer: # ... @inverse_relation_shadow_variable(source_variable_name = \"computer\") def get_process_list(self): return self.process_list ... Register this class as a planning entity, otherwise OptaPy won’t detect it and the shadow variable won’t update. The source_variable_name parameter is the name of the genuine planning variable on the return type of the getter (so the name of the genuine planning variable on the other side). The shadow property, which is a list, can never be None. If no genuine variable references that shadow entity, then it is an empty list. Furthermore it must be a mutable list because once OptaPy starts initializing or changing genuine planning variables, it will add and remove elements to the lists of those shadow variables accordingly. For a chained planning variable, the bi-directional relationship is always a one-to-one relationship. In that case, the genuine side looks like this: from optapy import planning_entity, planning_variable from optapy.types import PlanningVariableGraphType @planning_entity class Customer: @planning_variable(object, graph_type = PlanningVariableGraphType.CHAINED, ...) def get_previous_standstill(self): return self.previous_standstill def set_previous_standstill(previous_standstill): ... object was used as the @planning_variable type in Customer since we cannot use Standstill (defined below) as Standstill refer to Customer. And the shadow side looks like this: from optapy import planning_entity, inverse_relation_shadow_variable @planning_entity class Standstill: @inverse_relation_shadow_variable(Customer, source_variable_name = \"previous_standstill\") def get_next_customer(self): return self.next_customer def set_next_customer(Customer nextCustomer): ... Register this class as a planning entity, otherwise OptaPy won’t detect it and the shadow variable won’t update. The input planning problem of a Solver must not violate bi-directional relationships. If A points to B, then B must point to A. OptaPy will not violate that principle during planning, but the input must not violate it either. An anchor shadow variable is the anchor of a chained variable. Annotate the anchor property as a @anchor_shadow_variable annotation: from optapy import planning_entity, anchor_shadow_variable @planning_entity class Customer: # ... @anchor_shadow_variable(Vehicle, source_variable_name = \"previous_standstill\") def get_vehicle(self): ... def set_vehicle(self, vehicle): ... This class should already be registered as a planning entity. The source_variable_name property is the name of the chained variable on the same entity class. To update a shadow variable, OptaPy uses a VariableListener. To define a custom shadow variable, write a custom VariableListener: implement the interface and annotate it on the shadow variable that needs to change. @planning_variable(...) public Standstill getPreviousStandstill() { return previousStandstill; } @custom_shadow_variable(variable_listener_class = VehicleUpdatingVariableListener, sources = [planning_variable_reference(variable_name = \"previous_standstill\")]) def get_vehicle(self): return self.vehicle Register this class as a planning entity if it isn’t already. Otherwise OptaPy won’t detect it and the shadow variable won’t update. The source’s variable_name is the (genuine or shadow) variable that triggers changes to this shadow variable. If the source variable’s class is different than the shadow variable’s class, also specify the entity_class in the planning_variable_reference annotation and make sure the shadow variable’s class is registered as a planning entity. Implement the VariableListener interface. For example, the VehicleUpdatingVariableListener assures that every Customer in a chain has the same Vehicle, namely the chain’s anchor. from optapy import variable_listener @variable_listener class VehicleUpdatingVariableListener: def afterEntityAdded(self, score_director: ScoreDirector[VehicleRoutingSolution], customer: Customer): self.update_vehicle(scoreDirector, customer) def afterVariableChanged(self, score_director: ScoreDirector[VehicleRoutingSolution], customer: Customer)): self.update_vehicle(scoreDirector, customer) # ... def update_vehicle(self, score_director: ScoreDirector[VehicleRoutingSolution], source_customer: Customer)): previous_standstill = source_customer.previous_standstill vehicle = None if previous_standstill is None else previous_standstill.vehicle shadow_customer = source_customer while (shadow_customer is not None and shadow_customer.vehicle is not vehicle): scoreDirector.beforeVariableChanged(shadow_customer, \"vehicle\") shadow_customer.vehicle = vehicle scoreDirector.afterVariableChanged(shadow_customer, \"vehicle\") shadow_customer = shadow_customer.next_customer A VariableListener can only change shadow variables. It must never change a genuine planning variable or a problem fact. Any change of a shadow variable must be told to the ScoreDirector with before*() and after*() methods. If one VariableListener changes two shadow variables (because having two separate VariableListeners would be inefficient), then annotate only the first shadow variable with the variable_listener_class and let the other shadow variable(s) reference the first shadow variable: @planning_variable(...) def get_previous_standstill(self): return self.previous_standstill @custom_shadow_variable(variable_listener_class = TransportTimeAndCapacityUpdatingVariableListener, sources = [planning_variable_reference(variable_name = \"previous_standstill\")]) def get_transport_time(self): return self.transport_time @custom_shadow_variable(variable_listener_ref = planning_variable_reference(variable_name = \"transport_time\")) def get_capacity(self): return self.capacity A shadow variable’s value (just like a genuine variable’s value) isn’t planning cloned by the default solution cloner, unless it can easily prove that it must be planning cloned (for example the property type is a planning entity class). Specifically shadow variables of type list, set, or dict usually need to be planning cloned to avoid corrupting the best solution when the working solution changes. To planning clone a shadow variable, add @deep_planning_clone annotation: @deep_planning_clone @custom_shadow_variable(...) def get_used_man_hours_per_day_map(self): ... All shadow variables are triggered by a VariableListener, regardless if it’s a built-in or a custom shadow variable. The genuine and shadow variables form a graph, that determines the order in which the afterEntityAdded(), afterVariableChanged() and afterEntityRemoved() methods are called: In the example above, D could have also been ordered after E (or F) because there is no direct or indirect dependency between D and E (or F). OptaPy guarantees that: The first VariableListener's after*() methods trigger after the last genuine variable has changed. Therefore the genuine variables (A and B in the example above) are guaranteed to be in a consistent state across all its instances (with values A1, A2 and B1 in the example above) because the entire Move has been applied. The second VariableListener's after*() methods trigger after the last first shadow variable has changed. Therefore the first shadow variable (C in the example above) are guaranteed to be in a consistent state across all its instances (with values C1 and C2 in the example above). And of course the genuine variables too. And so forth. OptaPy does not guarantee the order in which the after*() methods are called for the sameVariableListener with different parameters (such as A1 and A2 in the example above), although they are likely to be in the order in which they were affected. By default, OptaPy does not guarantee that the events are unique. For example, if a shadow variable on an entity is changed twice in the same move (for example by two different genuine variables), then that will cause the same event twice on the VariableListeners that are listening to that original shadow variable. To avoid dealing with that complexity, overwrite the method requiresUniqueEntityEvents() to receive unique events at the cost of a small performance penalty: from optapy import variable_listener @variable_listener class StartTimeUpdatingVariableListener: def requiresUniqueEntityEvents(): return True ...","title":"Shadow variable","component":"docs","version":"latest","name":"shadow-variable","url":"/docs/latest/shadow-variable/shadow-variable.html","titles":[{"text":"1. Introduction","hash":"shadowVariableIntroduction","id":1},{"text":"2. Bi-directional variable (inverse relation shadow variable)","hash":"bidirectionalVariable","id":2},{"text":"3. Anchor shadow variable","hash":"anchorShadowVariable","id":3},{"text":"4. Custom VariableListener","hash":"customVariableListener","id":4},{"text":"5. VariableListener triggering order","hash":"variableListenerTriggeringOrder","id":5}]}},"components":{},"componentVersions":{"docs/latest":{"displayVersion":"latest","title":"OptaPy User Guide 8.21.0a0","version":"latest","name":"docs","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Documentation","site-url":"https://www.optapy.org","optapy-version":"8.21.0a0","java-version":11},"sourcemap":false},"url":"/docs/latest/index.html","navigation":[{"items":[{"content":"OptaPy Introduction","url":"/docs/latest/planner-introduction/planner-introduction.html","urlType":"internal"},{"content":"Quickstart","url":"/docs/latest/quickstart/quickstart.html","urlType":"internal"},{"content":"OptaPy configuration","url":"/docs/latest/planner-configuration/planner-configuration.html","urlType":"internal"},{"content":"Score calculation","url":"/docs/latest/score-calculation/score-calculation.html","urlType":"internal"},{"content":"Constraint streams score calculation","url":"/docs/latest/constraint-streams/constraint-streams.html","urlType":"internal"},{"content":"Shadow variable","url":"/docs/latest/shadow-variable/shadow-variable.html","urlType":"internal"},{"content":"Optimization algorithms","url":"/docs/latest/optimization-algorithms/optimization-algorithms.html","urlType":"internal"},{"content":"Move and neighborhood selection","url":"/docs/latest/move-and-neighborhood-selection/move-and-neighborhood-selection.html","urlType":"internal"},{"content":"Exhaustive search","url":"/docs/latest/exhaustive-search/exhaustive-search.html","urlType":"internal"},{"content":"Construction heuristics","url":"/docs/latest/construction-heuristics/construction-heuristics.html","urlType":"internal"},{"content":"Local search","url":"/docs/latest/local-search/local-search.html","urlType":"internal"},{"content":"Evolutionary algorithms","url":"/docs/latest/evolutionary-algorithms/evolutionary-algorithms.html","urlType":"internal"},{"content":"Partitioned search","url":"/docs/latest/partitioned-search/partitioned-search.html","urlType":"internal"},{"content":"Repeated planning","url":"/docs/latest/repeated-planning/repeated-planning.html","urlType":"internal"},{"content":"Design patterns","url":"/docs/latest/design-patterns/design-patterns.html","urlType":"internal"}],"root":true,"order":0}]}}}})